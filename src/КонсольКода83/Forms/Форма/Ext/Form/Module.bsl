&НаКлиенте
Перем ПутьФайлаЗапроса;
&НаКлиенте
Перем ТекущаяНастройка;
&НаКлиенте
Перем ХранилищеПараметров;
&НаКлиенте
Перем СтруктураТаблицы;
&НаКлиенте
Перем ТаблицаИзменена;
&НаКлиенте
Перем КлючТекущейНастройки;
&НаКлиенте
Перем ПараметрыТекущейНастройки Экспорт;
&НаКлиенте
Перем РезультатВыполнения;

//////////////////////////////////////////////////
/////Служебные методы
//////////////////////////////////////////////////

#Область  github_integration

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПубликации()
	
	Параметры = Новый Структура;

	Параметры.Вставить("owner", "alkoleft");
	Параметры.Вставить("repo", "ones_universal_tools");
	Параметры.Вставить("version", "v1.0.1");
	
	Возврат Параметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапросGitHub(АдресРесурса)
	ЗащищенноеСоединениеOpenSSL = Новый ЗащищенноеСоединениеOpenSSL();
	Соединение = Новый HTTPСоединение("api.github.com", ,,,,,	ЗащищенноеСоединениеOpenSSL);
	
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	
	Ответ = Соединение.Получить(Запрос);
	
	Если Ответ.КодСостояния <> 200 Тогда 
		
		Сообщить("Не удалось выполнить запрос.", Ответ.ПолучитьТелоКакСтроку());
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Ответ.ПолучитьТелоКакПоток();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьОбновление()
	
	ПараметрыПубликации = ПараметрыПубликации();
	// https://api.github.com/repos/alkoleft/ones_universal_tools/releases/latest
	Ответ = ЗапросGitHub(СтрШаблон("repos/%1/%2/releases/latest", ПараметрыПубликации.owner, ПараметрыПубликации.repo));
	Если Ответ = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	
	Чтение = Новый ЧтениеJSON();	
	Чтение.ОткрытьПоток(Ответ);
	
	Ответ = ПрочитатьJSON(Чтение, Истина);
	Чтение.Закрыть();
	
	Если Истина ИЛИ Ответ["tag_name"] > ПараметрыПубликации.version Тогда 
		
		ИнформацияОВерсии = Новый Структура;
		ИнформацияОВерсии.Вставить("Версия", Ответ["tag_name"]);
		ИнформацияОВерсии.Вставить("Скачать", Ответ["assets"][0]["browser_download_url"]);
		ИнформацияОВерсии.Вставить("Страница", Ответ["html_url"]);
		ИнформацияОВерсии.Вставить("Заголовок", Ответ["name"]);
		ИнформацияОВерсии.Вставить("Описание", Ответ["body"]);
		
		Возврат ИнформацияОВерсии;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьОбновлениеКлиент(Команда = Неопределено)
	ИнформацияОбОбновлении = ПроверитьОбновление();
	Если ИнформацияОбОбновлении = Ложь Тогда 
		Возврат;
	Иначе 
		
		фСтрока = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока("Доступна новая версия: " + ИнформацияОбОбновлении.Версия, Новый Шрифт(, 16, Истина)),
			Символы.ПС,
			Символы.ПС,
			"Описание: ",
			Новый ФорматированнаяСтрока(
				ИнформацияОбОбновлении.Версия + " " + ИнформацияОбОбновлении.Заголовок, 
				Новый Шрифт(, , Истина), , , 
				ИнформацияОбОбновлении.Страница),
			Символы.ПС,
			Символы.ПС,
			ИнформацияОбОбновлении.Описание,
			Символы.ПС,
			Символы.ПС,
			Новый ФорматированнаяСтрока(
				"Скачать" + Символы.ПС, , , , 
				ИнформацияОбОбновлении.Скачать)
		);
		ПоказатьПредупреждение(, фСтрока, , "Обновление");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти //github_integration

#Область  Универсальные_коллекции

&НаКлиентеНаСервереБезКонтекста
Функция ВыгрузитьЗначения(Коллекция, ИмяРеквизита)
	
	Массив = Новый Массив;
	
	Для Каждого Стр Из Коллекция Цикл 
		
		Массив.Добавить(Стр[ИмяРеквизита]);
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДополнитьСтруктуру(Структура, Дополнение, Ключи = Неопределено)
	
	Если Ключи = Неопределено Тогда 
	
		Для Каждого Эл Из Дополнение Цикл 
			
			Структура.Вставить(Эл.Ключ, Эл.Значение);	
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Ключ Из Ключи Цикл 
			
			Структура.Вставить(Ключ, Дополнение[Ключ]);	
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Скопировать(Источник, Знач Приемник)
	
	ТипЗ = ТипЗнч(Источник);
	
	Если Приемник = Неопределено Тогда 
		
		Приемник = Новый(ТипЗ);
		
	КонецЕсли;
	
	Если ТипЗ = Тип("Структура") ИЛИ ТипЗ = Тип("Соответствие") Тогда 
		
		Для Каждого Эл Из Источник Цикл 
			
			Приемник.Вставить(Эл.Ключ, Эл.Значение);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗ = Тип("СписокЗначений") Тогда 
		
		Для Каждого Эл Из Источник Цикл 
			ЗаполнитьЗначенияСвойств(Приемник.Добавить(), Эл);
		КонецЦикла;
		
	ИначеЕсли ТипЗ = Тип("ДеревоЗначений") или ТипЗ = Тип("СтрокаДереваЗначений") Тогда
		ПриемникКоллекция = ПолучитьКоллекцию(Приемник);
		ИсточникКоллекция = ПолучитьКоллекцию(Источник);
		
		Для Каждого стр из ИсточникКоллекция цикл
			нСтр = ПриемникКоллекция.Добавить();
			ЗаполнитьЗначенияСвойств(нСтр,стр);
			Скопировать(стр, нСтр);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКоллекцию(Объект)
	
	Тип = ТипЗнч(Объект);
	Если Тип = Тип("ДеревоЗначений") или Тип = Тип("СтрокаДереваЗначений") Тогда
		Возврат Объект.Строки;
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиВДеревеФормы(ЭлементыДерева, Реквизит, Значение)
	
	Для Каждого Элемент Из ЭлементыДерева Цикл 
		
		Если Элемент[Реквизит] = Значение Тогда 
			
			Возврат Элемент;
			
		Иначе
			
			НСТр = НайтиВДеревеФормы(Элемент.ПолучитьЭлементы(), Реквизит, Значение);
			
			Если НСТр <> Неопределено Тогда 
				
				Возврат НСТр;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеЗапросом(Текст, Параметры)
	Запрос = Новый Запрос(Текст);
	ДополнитьСтруктуру(Запрос.Параметры, Параметры);

	Результат = Запрос.Выполнить();

	Возврат ЗначениеИзРезультатаЗапроса(Результат);

КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеИзРезультатаЗапроса(Результат, ЗначениеПоумолчания = Неопределено, ИмяРеквизита = 0)

	Если Результат.Пустой() Тогда 
		Возврат ЗначениеПоумолчания;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Выборка.Следующий();

	Возврат Выборка[ИмяРеквизита];

КонецФункции

#КонецОбласти //Универсальные_коллекции

#Область Работа_с_файлами

&НаКлиенте
Функция ВыбратьФайлДляСохранения(Фильтр, Заголовок = Неопределено, ВыбранноеИмяФайла = Неопределено, ВыбранныйКаталог = Неопределено, ВыбранноеРасширение = Неопределено)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = Фильтр;
	Диалог.ПолноеИмяФайла 	= ВыбранноеИмяФайла;
	Диалог.Каталог 			= ВыбранныйКаталог;
	Диалог.Заголовок 		= Заголовок;
	Диалог.Расширение 		= ВыбранноеРасширение;
	
	Если Диалог.Выбрать() Тогда
		
		Возврат Новый Структура("ИмяФайла, Каталог", Диалог.ПолноеИмяФайла, Диалог.Каталог);

	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ВыбратьФайлДляОткрытия(Фильтр, Заголовок = Неопределено, ВыбранноеИмяФайла = Неопределено, ВыбранныйКаталог = Неопределено, ВыбранноеРасширение = Неопределено)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = Фильтр;
	Диалог.ПолноеИмяФайла 	= ВыбранноеИмяФайла;
	Диалог.Каталог 			= ВыбранныйКаталог;
	Диалог.Заголовок 		= Заголовок;
	Диалог.Расширение 		= ВыбранноеРасширение;
		
	Если Диалог.Выбрать() Тогда
		
		Возврат Новый Структура("ИмяФайла, Каталог", Диалог.ПолноеИмяФайла, Диалог.Каталог);
		
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ЗагрузитьФайлНаСервер(файл)
	Если ПустаяСтрока(файл)Тогда Возврат Неопределено;КонецЕсли;
	Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(файл),УникальныйИдентификатор);
КонецФункции

&НаСервереБезКонтекста
Функция ПоместитьВФайл(Адрес)
	двДанные = ПолучитьИзВременногоХранилища(Адрес);
	
	Если ТипЗнч(двДанные)=Тип("ДвоичныеДанные") Тогда
		ИмяФайла=ПолучитьИмяВременногоФайла();
		двДанные.Записать(ИмяФайла);
		Возврат ИмяФайла;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область Служебные

#Область  Форматирование

&НаКлиентеНаСервереБезКонтекста
Функция ФорматВремяВыполнения(Время)
	Возврат СтрШаблон("%1.%2", Формат('00010101' + Время / 1000, "ДЛФ=T"), Формат(Время % 1000, "ЧЦ=3; ЧН=000; ЧВН="));
КонецФункции

// <TODO необходимо вставить описание>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ФорматированноеОписание(Структура, ФорматнаяСтрока = Истина)
	
	Если ФорматнаяСтрока Тогда 
		ЖирныйШрифт = Новый Шрифт(Элементы.ДеревоНастроек.Шрифт, , , Истина);
		МассивЭлементов = Новый Массив;
		
		Для Каждого Эл Из Структура Цикл 
			
			МассивЭлементов.Добавить(Новый ФорматированнаяСтрока(Эл.Ключ + ": ", ЖирныйШрифт));
			МассивЭлементов.Добавить(Строка(Эл.Значение) + "; ");
			
		КонецЦикла;
		
		Возврат Новый ФорматированнаяСтрока(МассивЭлементов);
	Иначе
		
		Результат = "";
		
		Для Каждого Эл Из Структура Цикл 
			
			Результат = Результат +
						СтрШаблон("%1: %2;", Эл.Ключ, Эл.Значение) + 
						Символы.ПС;
			
		КонецЦикла;
		
		Возврат Результат;
	КонецЕсли;
	
КонецФункции // ФорматированноеОписание

&НаКлиенте
Функция ФорматированноеОписаниеСписок(Список, ФорматнаяСтрока = Истина)
	
	Если ФорматнаяСтрока Тогда 
		ЖирныйШрифт = Новый Шрифт(Элементы.Настройки_Дерево.Шрифт, , , Истина);
		МассивЭлементов = Новый Массив;
		
		Для Каждого Эл Из Список Цикл 
			Если ЗначениеЗаполнено(эл.Картинка) Тогда 
				МассивЭлементов.Добавить(Эл.Картинка);
			КонецЕсли;				
			
			МассивЭлементов.Добавить(Новый ФорматированнаяСтрока(" " + Эл.Представление + ": ", ЖирныйШрифт));
			МассивЭлементов.Добавить(Строка(Эл.Значение) + "; ");
			
		КонецЦикла;
		
		Возврат Новый ФорматированнаяСтрока(МассивЭлементов);
	Иначе
		
		Результат = "";
		
		Для Каждого Эл Из Список Цикл 
			
			Результат = Результат +
						СтрШаблон("%1: %2;", Эл.Представление, Эл.Значение) + 
						Символы.ПС;
			
		КонецЦикла;
		
		Возврат Результат;
	КонецЕсли;
	
КонецФункции // ФорматированноеОписание

#КонецОбласти //Форматирование

&НаКлиентеНаСервереБезКонтекста
Функция мОшибка(Ошибка, Результат = Неопределено)
	
	Если Результат = Неопределено Тогда 
		Результат = Новый Структура;
	КонецЕсли;
	
	Результат.Вставить("Выполнено", Ложь);
	
	Если ТипЗнч(Ошибка) = Тип("ИнформацияОбОшибке") Тогда 
		Результат.Вставить("Описание", ПодробноеПредставлениеОшибки(Ошибка));
	Иначе
		Результат.Вставить("Описание", Строка(Ошибка));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СообщитьОбОшибке(ОписаниеОшибки, ОписаниеДействия)
		
	фСтрока = Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока(?(ЗначениеЗаполнено(ОписаниеДействия), ОписаниеДействия + ".", "") + "Возникла ошибка:", Новый Шрифт(, 14, Истина)),
		Символы.ПС,
		Символы.ПС,
	    Новый ФорматированнаяСтрока(ОписаниеОшибки, , WebЦвета.Коралловый)
	);
	Сообщить(ОписаниеОшибки);
	ПоказатьПредупреждение(, фСтрока);		
	
КонецПроцедуры // СообщитьОбОшибке

&НаСервереБезКонтекста
Функция ПодключитьВнешнуюОбработкуСервер(Адрес)
	
	Возврат ВнешниеОбработки.Подключить(Адрес);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьТаблицу(ИсточникАдрес)
	
	РезультатТаблица.Очистить();
	СтруктураТаблицы = ЗагрузитьИзВременногоХранилищаТаблицу(ИсточникАдрес);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьИзВременногоХранилищаТаблицу(ИсточникАдрес)

	Таблица = ПолучитьИзВременногоХранилища(ИсточникАдрес);
	Если ИсточникАдрес <> РезультатТаблица_Адрес Тогда 
		ПоместитьВоВременноеХранилище(Таблица, РезультатТаблица_Адрес);
	КонецЕсли;
	Возврат ВывестиТаблицу(Таблица);
	
КонецФункции

&НаСервере
Функция ВывестиТаблицу(Таблица)
	Если Таблица = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ТЗРез = РеквизитФормыВЗначение("РезультатТаблица");
	УдалитьКолонки(ТЗРез.Колонки);

	ТЗРез = Таблица;
	
	СоздатьКолонкиТЗ(ТЗРез.Колонки);
	РезультатТаблица.Загрузить(ТЗРез);
	
	СтруктураТаблицы = Новый Массив;
	
	Для Каждого Колонка Из ТЗРез.Колонки Цикл 
		
		СтруктураТаблицы.Добавить(Новый Структура("Имя, ТипЗначения, Заголовок", Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок));
		
	КонецЦикла;
	
	Возврат СтруктураТаблицы;
КонецФункции

&НаКлиенте
Функция ВыполнитьКоманду(ИмяКоманды) Экспорт 
	
	Команда = ЭтаФорма.Команды.Найти(ИмяКоманды);
	Выполнить(Команда.Действие + "(Команда)");
	
КонецФункции

#КонецОбласти

#Область Работа_с_типами

&НаКлиенте
Функция ПолучитьПолноеИмяТипа(Тип)
	
	Если НЕ ХранилищеПараметров.Свойство("КэшТипов") Тогда
		
		ХранилищеПараметров.Вставить("КэшТипов", Новый Соответствие);
		
	КонецЕсли;
	
	Если ХранилищеПараметров.КэшТипов[Тип] = Неопределено Тогда 
		
		ХранилищеПараметров.КэшТипов.Вставить(Тип, ПолучитьПолноеИмяТипаСервер(Тип));
		
	КонецЕсли;
	
	Возврат ХранилищеПараметров.КэшТипов[Тип];
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПолноеИмяТипаСервер(Тип)
	
	Мета = Метаданные.НайтиПоТипу(Тип);
	
	Если Мета <> Неопределено Тогда 
		Возврат Мета.ПолноеИмя();
	Иначе
		Возврат Строка(Тип);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеТиповВсеСсылки() Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(
	"<TypeDescription xmlns=""http://v8.1c.ru/8.1/data/core"">
	|      <TypeSet xmlns:cc=""http://v8.1c.ru/8.1/data/enterprise/current-config"">cc:AnyRef</TypeSet>
	|</TypeDescription>");
	Результат = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	Возврат Результат;
	
КонецФункции

#КонецОбласти //Работа_с_типами

#Область Работа_с_формой

&НаСервере
процедура СоздатьКолонкиТЗ(Колонки)
	МассивРеквизитов = Новый Массив;
	
	Для Каждого Колонка из Колонки Цикл
		Если Колонка.Имя = "_Служебная" Тогда 
			Продолжить;
		КонецЕсли;
		
		РеквизитФормы = Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения,, "NULL"), "РезультатТаблица");
		МассивРеквизитов.Добавить(РеквизитФормы);
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
	
	Для Каждого Колонка из Колонки цикл
		Если Колонка.Имя = "_Служебная" Тогда 
			Продолжить;
		КонецЕсли;
		имяКолонки = "РезультатТаблица" + Колонка.Имя;
		Элемент = ЭтаФорма.Элементы.Найти(имяКолонки);
		
		Если Элемент = Неопределено Тогда
			Элемент = ЭтаФорма.Элементы.Добавить(имяКолонки, Тип("ПолеФормы"), Элементы.РезультатТаблица);
			Попытка
				Элемент.ПутьКДанным = "РезультатТаблица." + Колонка.Имя;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок = Колонка.Имя;
	КонецЦикла;
	Элементы.РезультатТаблица_Служебная.Видимость = Ложь;
КонецПроцедуры

&НаСервере
Процедура УдалитьКолонки(Колонки)
	массивУдаляемыхРеквизитов=Новый Массив;	
	Для Каждого Колонка из Колонки цикл
		Если Колонка.Имя = "_Служебная" Тогда 
			Продолжить;
		КонецЕсли;
		массивУдаляемыхРеквизитов.Добавить("РезультатТаблица."+Колонка.Имя);
	КонецЦикла;
	ЭтаФорма.ИзменитьРеквизиты(, массивУдаляемыхРеквизитов);
	Для Каждого Колонка из Колонки цикл
		Если Колонка.Имя = "_Служебная" Тогда 
			Продолжить;
		КонецЕсли;
		имяКолонки="РезультатТаблица" + Колонка.Имя;
		колонкаФ = ЭтаФорма.Элементы.Найти(имяКолонки);
		ЭтаФорма.Элементы.Удалить(колонкаФ);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти //Работа_с_формой

//////////////////////////////////////////////////
/////Основные методы
//////////////////////////////////////////////////

#Область Выполнение

&НаКлиенте
Процедура ВыполнитьНастройку(ПараметрыНастройки)
	
	ТекущиеДанные = ДанныеНастройки(ПараметрыНастройки);
	
	ЭтоЗапрос = ПараметрыНастройки.Тип = 0;
	
	ПараметрыВыполнения = Новый Структура;
	
	Для Каждого стр из ТекущиеДанные.ПараметрыЗапроса цикл
		ПараметрыВыполнения.Вставить(стр.ИмяПараметра, стр.ЗначениеПараметра);
	КонецЦикла;
	
	ВыполнитьНаСервере = ЭтоЗапрос ИЛИ НЕ ВыполнятьНаКлиенте;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если ВыполнитьНаСервере Тогда 
		
		Если НЕ ЭтоЗапрос И ТаблицаИзменена = Истина Тогда 
			ПоместитьТаблицуНаСервер(РезультатТаблица, РезультатТаблица_Адрес);
			ТаблицаИзменена = Ложь;
		КонецЕсли;
		
		РезультатВыполнения = ВыполнитьЗапросСкриптНаСервере(
			ТекущиеДанные.Текст, 
			ПараметрыВыполнения, 
			ЭтоЗапрос,
			РезультатТаблица_Адрес);			
			
		Если РезультатВыполнения.Выполнено И РезультатВыполнения.Свойство("ЕстьДанные") Тогда 
			
			ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ЗагрузитьТаблицу(РезультатТаблица_Адрес);
			ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
			
			РезультатВыполнения.Вставить("ВремяВывода", ВремяОкончания - ВремяНачала);

		КонецЕсли;
		
	Иначе
	
		РезультатВыполнения = ВыполнитьСкриптНаКлиенте(ТекущиеДанные.ТекстАлгоритма, ПараметрыВыполнения);		
				
	КонецЕсли;
	
	ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	РезультатВыполнения.Вставить("ОбщееВремя", ВремяОкончания - ВремяНачала); 
	
	ПослеВыполнения();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоместитьТаблицуНаСервер(Знач РезультатТаблица, Знач Адрес)
	
	Таблица = ДанныеФормыВЗначение(РезультатТаблица, Тип("ТаблицаЗначений"));
	
	ПоместитьВоВременноеХранилище(Таблица, Адрес);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьЗапросСкриптНаСервере(Текст, ПараметрыВыполнения, ЭтоЗапрос, АдресРезультата)
	
	РезультатВыполнения = Новый Структура;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Попытка
		
		Если ЭтоЗапрос Тогда 
					
			//Результат = ВыполнитьЗапросНаСервере(Текст, ПараметрыВыполнения);
			Результат = ВыполнитьЗапросСЗамером(Текст, ПараметрыВыполнения, Истина);
			
		Иначе
			
			Контекст = Новый Структура;
			Контекст.Вставить("Таблица", ПолучитьИзВременногоХранилища(АдресРезультата));
			
			Результат = ВыполнитьСкриптНаСервере(Текст, ПараметрыВыполнения, Контекст);
			
		КонецЕсли;
		
	Исключение
		
		Результат = Новый Структура("Выполнено, Описание", Ложь, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	РезультатВыполнения.Вставить("ВремяВыполнения", ВремяОкончания - ВремяНачала);
	
	Данные = Неопределено;
	
	Если Результат.Выполнено И Результат.Свойство("Данные") И Результат.Данные <> Неопределено Тогда
		Данные = Результат.Данные;
	ИначеЕсли Результат.Выполнено И Результат.Свойство("АдресДанных") И ЭтоАдресВременногоХранилища(Результат.АдресДанных) Тогда
		Данные = ПолучитьИзВременногоХранилища(Результат.АдресДанных);
	КонецЕсли;
	
	Если Данные <> Неопределено Тогда
		
		ПоместитьВоВременноеХранилище(Данные, АдресРезультата);
		РезультатВыполнения.Вставить("ЕстьДанные", Истина);
		
	КонецЕсли;
	
	Если Результат.Выполнено И ЭтоЗапрос Тогда 

		РезультатВыполнения.Вставить("ОписаниеРезультатов", Результат.ОписаниеРезультатов);
				
	КонецЕсли;
	
	РезультатВыполнения.Вставить("Выполнено", Результат.Выполнено);
	
	Если Результат.Свойство("Описание") Тогда 
		РезультатВыполнения.Вставить("Описание", Результат.Описание);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьЗапросНаСервере(Текст, ПараметрыВыполнения)
	
	Запрос = Новый Запрос(Текст);
	
	СтруктураЗапроса = ПолучитьСтруктуруЗапроса(Текст);
	
	Для Каждого Параметр из ПараметрыВыполнения цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Новый Структура("Выполнено, Данные", Истина, Результат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьСкриптНаСервере(Текст, ПараметрыВыполнения, Контекст)
	
	ТекстУстановкаКонтекста = "";
	
	Для Каждого Эл Из Контекст Цикл 
		ТекстУстановкаКонтекста = ТекстУстановкаКонтекста + СтрШаблон("%1 = Контекст.%1;", Эл.Ключ);	
	КонецЦикла;
	
	Результат = Неопределено;
	Выполнить(ТекстУстановкаКонтекста + Текст);
		
	Возврат Новый Структура("Выполнено, Данные", Истина, Результат);
	
КонецФункции

&НаКлиенте
Функция ВыполнитьСкриптНаКлиенте(Текст, ПараметрыВыполнения)
		
	Попытка
		
		Выполнить(Текст);
		
	Исключение
		
		Возврат Новый Структура("Выполнено, Описание", Ложь, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Новый Структура("Выполнено, Описание", Истина);	
	
КонецФункции

&НаКлиенте
Процедура ПослеВыполнения()
	
	Описание = Новый СписокЗначений();
	Описание.Добавить(РезультатТаблица.Количество(), "Строк", , БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	Описание.Добавить(ФорматВремяВыполнения(РезультатВыполнения.ОбщееВремя), "Общее", , БиблиотекаКартинок.УстановитьВремя);
	
	
	Служебные_ОписаниеРезультат = ФорматированноеОписаниеСписок(Описание);
	
	Если РезультатВыполнения.Свойство("ВремяВыполнения") Тогда 
		Описание.Добавить(ФорматВремяВыполнения(РезультатВыполнения.ВремяВыполнения), "Выполнения");
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ВремяВывода") Тогда 
		Описание.Добавить(ФорматВремяВыполнения(РезультатВыполнения.ВремяВывода), "Вывод");
	КонецЕсли;
	
	Элементы.Служебные_ОписаниеРезультат.Подсказка = ФорматированноеОписаниеСписок(Описание, Ложь);

	Если НЕ РезультатВыполнения.Выполнено Тогда 
		
		СообщитьОбОшибке(РезультатВыполнения.Описание, "Выполнение");
		
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ОписаниеРезультатов") Тогда 
		
		Результат_ВременныеТаблицы.Очистить();
		Для Каждого Стр Из РезультатВыполнения.ОписаниеРезультатов Цикл 
			
			НовСтр = Результат_ВременныеТаблицы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			НовСтр.Время = ФорматВремяВыполнения(НовСтр.Продолжительность);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция МожноВыполнить()
	
	Если ПараметрыТекущейНастройки = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыТекущейНастройки.Тип <> 0 И ПараметрыТекущейНастройки.Тип <> 1 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьЗапросСЗамером(ТекстЗапроса, ПараметрыЗапроса, СохранятьВТ)
	
	СтруктураЗапроса = ПолучитьСтруктуруЗапроса(ТекстЗапроса);
	
	// [TODO Оптимизация] Добавить анализ параметров, чтоб не передавай каждый раз. Корякин Алексей 18.08.2017 22:09:48
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Для Каждого Параметр из ПараметрыЗапроса цикл
		
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	ОписаниеРезультатов = Новый Массив;
	
	СозданныеВТ = Новый Соответствие;
	
	Для Каждого Подзапрос Из СтруктураЗапроса Цикл 
		
		ОписаниеРезультат = Новый Структура;
		ОписаниеРезультат.Вставить("Имя", Подзапрос.Имя);
		ОписаниеРезультат.Вставить("Тип", Подзапрос.Тип);
		
		Запрос.Текст = Подзапрос.Текст;
		
		ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
		РезультатЗапроса = Запрос.Выполнить();
		Продолжительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала;
		
		Если Подзапрос.Тип = "СозданиеВТ" Тогда
			
			Количество = РезультатЗапроса.Выгрузить()[0][0];
			СозданныеВТ.Вставить(ВРег(Подзапрос.ИмяТаблицы), Истина);
			
		ИначеЕсли Подзапрос.Тип = "Выборка" Тогда
			
			ОписаниеРезультат.Вставить("Данные", РезультатЗапроса.Выгрузить());
			Количество = ОписаниеРезультат.Данные.Количество();
			
		ИначеЕсли Подзапрос.Тип = "Уничтожение" Тогда
			
			СозданныеВТ.Удалить(ВРег(Подзапрос.ИмяТаблицы));
			Количество = 0;
			
		КонецЕсли;
		
		ОписаниеРезультат.Вставить("Продолжительность", Продолжительность);
		ОписаниеРезультат.Вставить("Количество", Количество);
		
		ОписаниеРезультатов.Добавить(ОписаниеРезультат);
		
	КонецЦикла;
	
	Для Каждого ОписаниеРезультат Из ОписаниеРезультатов Цикл 
		
		Данные = Неопределено;
		
		Если ОписаниеРезультат.Свойство("Данные") Тогда
			Данные = ОписаниеРезультат.Данные;
		ИначеЕсли ОписаниеРезультат.Тип = "СозданиеВТ" И СозданныеВТ[ВРег(ОписаниеРезультат.Имя)] = Истина Тогда 
			Запрос.Текст = "ВЫБРАТЬ * ИЗ " + ОписаниеРезультат.Имя;
			Данные = Запрос.Выполнить().Выгрузить();
		КонецЕсли;	
		
		Если Данные <> Неопределено Тогда
			
			АдресДанных = ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор);
			ОписаниеРезультат.Удалить("Данные");
			ОписаниеРезультат.Вставить("АдресДанных", АдресДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	
	Результат.Вставить("Выполнено", Истина);
	Результат.Вставить("ОписаниеРезультатов", ОписаниеРезультатов);
	Результат.Вставить("АдресДанных", АдресДанных);
		
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруЗапроса(Текст)
	
	Схема = Новый СхемаЗапроса();
	
	Схема.УстановитьТекстЗапроса(Текст);
	
	МассивЗапросов = Новый Массив;
	
	Для Каждого Пакет Из Схема.ПакетЗапросов Цикл 
		
		ДанныеЗапроса = Новый Структура;
		
		Если ТипЗнч(Пакет) = Тип("ЗапросВыбораСхемыЗапроса") Тогда 
			ДанныеЗапроса.Вставить("Текст", Пакет.ПолучитьТекстЗапроса());
		Иначе
			ДанныеЗапроса.Вставить("Текст", "УНИЧТОЖИТЬ " + Пакет.ИмяТаблицы);			
		КонецЕсли;
		
		Если ТипЗнч(Пакет) = Тип("ЗапросВыбораСхемыЗапроса") Тогда 
			
			Если ЗначениеЗаполнено(Пакет.ТаблицаДляПомещения) Тогда 
				
				ДанныеЗапроса.Вставить("Тип", "СозданиеВТ");
				ДанныеЗапроса.Вставить("ИмяТаблицы", Пакет.ТаблицаДляПомещения);
				ДанныеЗапроса.Вставить("Имя", Пакет.ТаблицаДляПомещения);
				
			Иначе
				
				ДанныеЗапроса.Вставить("Тип", "Выборка");
				ДанныеЗапроса.Вставить("Имя", "Запрос " + (Схема.ПакетЗапросов.Индекс(Пакет) + 1));
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Пакет) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда 
			
			ДанныеЗапроса.Вставить("Тип", "Уничтожение");
			ДанныеЗапроса.Вставить("ИмяТаблицы", Пакет.ИмяТаблицы);
			ДанныеЗапроса.Вставить("Имя", "~" + Пакет.ИмяТаблицы);
			
		КонецЕсли;
		
		МассивЗапросов.Добавить(ДанныеЗапроса);
	КонецЦикла;
	
	Возврат МассивЗапросов;
	
КонецФункции

#КонецОбласти

#Область  Функции_скрипта_клиент

&НаКлиенте
Функция ПодключитьВнешнуюОбработку(ИмяФайла)
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
	Возврат ПодключитьВнешнуюОбработкуСервер(Адрес);
	
КонецФункции

&НаКлиенте
Функция ОткрытьВнешнуюОбработку(ИмяФайла, ПараметрыФормы = Неопределено)
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
	ИмяОбработки = ПодключитьВнешнуюОбработкуСервер(Адрес);
	
	ОткрытьФорму(СтрШаблон("ВнешняяОбработка.%1.Форма", ИмяОбработки), ПараметрыФормы, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецФункции

#КонецОбласти //Функции_скрипта_клиент

#Область Редактирование_Текстов

&НаКлиенте
Процедура ПриЗакрытииКЗ(Текст, ДополнительныеПараметры) Экспорт 
	Если Текст = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ВыбраннаяНастройка_Текст.УстановитьТекст(Текст);
КонецПроцедуры

#Область Обработка_запроса
//удаляет из текста запроса всю шнягу которая там при переносе из модуля 
//(палки, кавычки, точки с запятой)
&НаКлиенте
Функция обПропылесоситьТекстЗапроса(ИсходныйТекст) Экспорт
	
	ИсходныйТекст = СокрЛП(ИсходныйТекст);
	
	//вертипалки
	ОбработанныйТекст	=	СтрЗаменить(ИсходныйТекст,"|","");
	
	//открывающая кавычка
	Пока Лев(ОбработанныйТекст,1) = Символ(34) Цикл
		ОбработанныйТекст = Сред(ОбработанныйТекст,2);
		//закрывающая кавычка удаляется только если была открывающая
		//иначе может быть глюк со строковым выражением в запросе
		Пока Прав(ОбработанныйТекст,1) = Символ(34) Цикл
			ОбработанныйТекст = Сред(ОбработанныйТекст,1,СтрДлина(ОбработанныйТекст)-1);
		КонецЦикла; 
	КонецЦикла; 
	//закрывающая точка с запятой
	Если Прав(ОбработанныйТекст,1) = ";" Тогда
		ОбработанныйТекст = Сред(ОбработанныйТекст,1,СтрДлина(ОбработанныйТекст)-1);
	КонецЕсли; 
	
	//двойные кавычки надо заменить на одинарные
	//Строка2Кавычки = Символ(34) + Символ(34);
	//Строка1Кавычка = Символ(34);
	
	//ОбработанныйТекст	=	СтрЗаменить(ОбработанныйТекст,Строка2Кавычки,Строка1Кавычка);
	
	Возврат ОбработанныйТекст;
	
КонецФункции //обПропылесоситьТекстЗапроса

&НаСервереБезКонтекста
Функция ПроверкаПередВыполнением(ТекстЗапроса)
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		
		Возврат мОшибка("Не заполнен текст запроса!");
		
	КонецЕсли;
		
	Попытка
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.НайтиПараметры();
		
	Исключение
		
		Возврат мОшибка(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Новый Структура("Успешно", Истина);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьТекстДляМодуля(ТекстЗапроса)
	
	ТекстМодуля = ТекстЗапроса;
	
	//одинарные кавычки надо заменить на двойные
	Строка2Кавычки = Символ(34) + Символ(34);
	Строка1Кавычка = Символ(34);
	ТекстМодуля	=	СтрЗаменить(ТекстМодуля, Строка1Кавычка, Строка2Кавычки);
	
	//открывающие и закрывающие 
	ТекстМодуля = Символ(34) + ТекстМодуля + Символ(34) + ";";
	
	
	ТекстДок = Новый ТекстовыйДокумент; 
	ТекстДок.УстановитьТекст(ТекстМодуля);
	
	Для сч = 2 по ТекстДок.КоличествоСтрок() Цикл
		Строка = ТекстДок.ПолучитьСтроку(сч);
		ТекстДок.ЗаменитьСтроку(сч,"|"+Строка);
	КонецЦикла;  
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Вариант1",Символы.ВК+ТекстДок.ПолучитьТекст());
	
	ТекстДок.ВставитьСтроку(0, 	
	"Запрос = Новый Запрос;
	|Запрос.Текст = 
	|" );
	
	
	//Для каждого СтрокаПараметров Из ПараметрыЗапроса Цикл
	//	ТекстПеременной = СформироватьСтрокуПолученияСсылкиПоГУИД(СтрокаПараметров.ЗначениеПараметра);
	//	ТекстМодуля = ТекстМодуля + Символы.ПС + "Запрос.УстановитьПараметр(" + Строка1Кавычка + СокрЛП(СтрокаПараметров.ИмяПараметра) + Строка1Кавычка + ", " + ТекстПеременной + ");"
	//КонецЦикла; 
	//
	//ТекстМодуля = ТекстМодуля + Символы.ПС + "Результат = Запрос.Выполнить();";
	//СтруктураПараметров.Вставить("Вариант2",Символы.ВК + ТекстМодуля);
	//ОткрытьФормуСовместимость82(мПутьКОбработке+".ВариантыЗапросаДляБуфераУпр",СтруктураПараметров);
	
	Возврат ТекстДок;
КонецФункции

&НаКлиенте
Процедура ВыбраннаяНастройка_ТекстПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗакомментироватьВыделенныйТекст()
	Перем СтрНач,СтрКон,КолНач,КолКон;
	
	Элементы.ВыбраннаяНастройка_Текст.ПолучитьГраницыВыделения(СтрНач, КолНач, СтрКон, КолКон);
		
	Для сч = СтрНач по СтрКон Цикл
		НовСтрока = "//" + ВыбраннаяНастройка_Текст.ПолучитьСтроку(сч);
		ВыбраннаяНастройка_Текст.ЗаменитьСтроку(сч, НовСтрока);
	КонецЦикла;  
	
	Элементы.ВыбраннаяНастройка_Текст.УстановитьГраницыВыделения(СтрНач, КолНач, СтрКон, КолКон);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасКомментироватьВыделенныйТекст()
	Перем СтрНач,СтрКон,КолНач,КолКон;
	
	Элементы.ВыбраннаяНастройка_Текст.ПолучитьГраницыВыделения(СтрНач,КолНач,СтрКон,КолКон);
	
	Текст = ВыбраннаяНастройка_Текст;
	
	Для сч = СтрНач по СтрКон Цикл
		СтарСтрока = Текст.ПолучитьСтроку(сч);
		Если Не Лев(СтарСтрока,2) = "//" Тогда Продолжить КонецЕсли; 
		
		НовСтрока = Сред(СтарСтрока, 3, СтрДлина(СтарСтрока));
		Текст.ЗаменитьСтроку(сч, НовСтрока);
	КонецЦикла; 
		
	Элементы.ВыбраннаяНастройка_Текст.УстановитьГраницыВыделения(СтрНач,КолНач,СтрКон,КолКон);
	Модифицированность = Истина;
	
КонецПроцедуры


#КонецОбласти //Обработка_запроса

#КонецОбласти

#Область Параметры

&НаСервереБезКонтекста
Функция Параметры_ЗаполнитьНаСервере(ТекстЗапроса)
	
	мПараметры = Новый Массив;
	
	Попытка
		Запрос = Новый Запрос(ТекстЗапроса);
	Исключение
		
		Возврат Новый Структура("Выполнено, Описание", Ложь, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Для Каждого Параметр Из Запрос.НайтиПараметры() Цикл 
		
		мПараметры.Добавить(Новый Структура("Имя, ТипЗначения", Параметр.Имя, Параметр.ТипЗначения));
		
	КонецЦикла;
	
	Возврат Новый Структура("Выполнено, Параметры", Истина, мПараметры);
	
КонецФункции

&НаКлиенте
Процедура Параметры_ЗаполнитьНаКлиенте()
		
	ТекстЗапроса = ВыбраннаяНастройка_Текст.ПолучитьТекст();
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда 
		Возврат;
	КонецЕсли;
	
	
	Результат = Параметры_ЗаполнитьНаСервере(ТекстЗапроса);
	
	Если НЕ Результат.Выполнено Тогда 
		
		СообщитьОбОшибке(Результат.Описание, "При получении параметров запроса");
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЗапроса = ВыбраннаяНастройка_Параметры;
	
	Для Каждого Параметр Из Результат.Параметры Цикл 
		
		Строки = ПараметрыЗапроса.НайтиСтроки(Новый Структура("ИмяПараметра", Параметр.Имя));
		
		Если Строки.Количество() = 0 Тогда 
			
			Стр = ПараметрыЗапроса.Добавить();
			Стр.ИмяПараметра = Параметр.Имя;
			
		Иначе
			
			Стр = Строки[0];
			
		КонецЕсли;
		Стр.ТипПараметра = Параметр.ТипЗначения;
		Стр.ЗначениеПараметра = Параметр.ТипЗначения.ПривестиЗначение(Стр.ЗначениеПараметра);
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
	СохранитьДанныеНастройки(ПараметрыТекущейНастройки);
	
КонецПроцедуры



&НаКлиенте
Процедура УстановитьЗначениеПараметра(Имя, Значение, ТипЗначения = Неопределено)
	ПараметрыЗапроса = ВыбраннаяНастройка_Параметры;
	
	Строки = ПараметрыЗапроса.НайтиСтроки(Новый Структура("ИмяПараметра", Имя));
	
	Если Строки.Количество() = 0 Тогда 
		
		Стр = ПараметрыЗапроса.Добавить();
		Стр.ИмяПараметра = Имя;
		
	Иначе
		
		Стр = Строки[0];
		
	КонецЕсли;
	Если ТипЗначения <> Неопределено Тогда 
		Стр.ТипПараметра = ТипЗначения;
	КонецЕсли;
	
	Если Значение = Неопределено Тогда 
		Стр.ЗначениеПараметра = ТипЗначения.ПривестиЗначение(Стр.ЗначениеПараметра);
	Иначе
		Стр.ЗначениеПараметра = Значение;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти //Параметры

#Область Настройки

// [TODO Оптимизация] Реализовать безконтекстное сохранение/загрузку. Корякин Алексей 30.07.2017 12:03:45
&НаСервере
Процедура ЗагрузитьНастройкиНаСервере(Адрес)
	
	ИмяФайла = ПоместитьВФайл(Адрес);	
	Если ИмяФайла=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	вНастройки = ЗначениеИзФайла(ИмяФайла);
	УдалитьФайлы(ИмяФайла);
	
	
	Если ТипЗнч(вНастройки) = Тип("Структура") Тогда 
		
		Настройки_Дерево.ПолучитьЭлементы().Очистить();
		Дерево = РеквизитФормыВЗначение("Настройки_Дерево");
		
		Скопировать(вНастройки.Дерево, Дерево);
		ЗначениеВРеквизитФормы(Дерево,"Настройки_Дерево");
		
		ЗначениеВРеквизитФормы(вНастройки.Алгоритмы, "Настройки_Алгоритмы");
		ЗначениеВРеквизитФормы(вНастройки.Запросы, "Настройки_Запросы");
		
	КонецЕсли;
	
	УстановитьКартинкуНастройки(Настройки_Дерево.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьКартинкуНастройки(Элементы)
	
	Для Каждого Элемент Из Элементы Цикл 
		
		Элемент.Картинка = КартинкаПоТипуНастройки(Элемент.Тип);
		УстановитьКартинкуНастройки(Элемент.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресФайлаНастроек()
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	СохранитьНастройкиНаСервере(ИмяФайла);
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
КонецФункции

&НаСервере
Функция СохранитьНастройкиНаСервере(ИмяФайла)
	
	ЗначениеВФайл(ИмяФайла, Новый Структура("Дерево, Запросы, Алгоритмы",
		РеквизитФормыВЗначение("Настройки_Дерево"),
		РеквизитФормыВЗначение("Настройки_Запросы"),
		РеквизитФормыВЗначение("Настройки_Алгоритмы"),
	));
	
	// ЗначениеВФайл(ИмяФайла, РеквизитФормыВЗначение("ДеревоНастроек"));
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьДанныеНастройки(ПараметрыНастройки)
	
	
	Стр = ДанныеНастройки(ПараметрыНастройки);
	
	Если Стр = Неопределено Тогда 
		
		ВыбраннаяНастройка_Текст.Очистить();
		Возврат;
		
	КонецЕсли;
	
	ВыбраннаяНастройка_Текст.УстановитьТекст(Стр.Текст);
	
	ВыбраннаяНастройка_Параметры.Очистить();
	Для Каждого Параметр Из Стр.ПараметрыЗапроса Цикл 
		
		ЗаполнитьЗначенияСвойств(ВыбраннаяНастройка_Параметры.Добавить(), Параметр);

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СохранитьДанныеНастройки(ПараметрыНастройки = Неопределено) Экспорт 
	
	Если ПараметрыНастройки = Неопределено Тогда 
		ПараметрыНастройки = ПараметрыТекущейНастройки;
	КонецЕсли;
	
	Если ПараметрыНастройки = Неопределено ИЛИ НЕ ПараметрыНастройки.Свойство("ИдентификаторДанные") Тогда 
		
		Возврат Ложь;
		
	КонецЕсли;
	
	
	Стр = ТаблицаНастроек(ПараметрыНастройки.Тип).НайтиПоИдентификатору(ПараметрыНастройки.ИдентификаторДанные);
	
	Стр.Текст = ВыбраннаяНастройка_Текст.ПолучитьТекст();
	Стр.ПараметрыЗапроса.Очистить();
	
	Для Каждого Параметр Из ВыбраннаяНастройка_Параметры Цикл 
		
		ЗаполнитьЗначенияСвойств(Стр.ПараметрыЗапроса.Добавить(), Параметр);

	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область  Получение_настроек

&НаКлиенте
Функция ТаблицаНастроек(Тип)
	Если Тип = 0 Тогда 
		
		Возврат Настройки_Запросы;
		
	ИначеЕсли Тип = 1 Тогда 
		
		Возврат Настройки_Алгоритмы;
		
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ДанныеНастройки(ПараметрыНастройки) Экспорт 
	Если ПараметрыНастройки = Неопределено ИЛИ НЕ ПараметрыНастройки.Свойство("ИдентификаторДанные") Тогда 
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ТаблицаНастроек(ПараметрыНастройки.Тип).НайтиПоИдентификатору(ПараметрыНастройки.ИдентификаторДанные);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыНастройки(КлючНастройки)
	
	Если КлючНастройки = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
		
	СтрН = НайтиВДеревеФормы(Настройки_Дерево.ПолучитьЭлементы(), "Ключ", КлючНастройки);
	
	Если СтрН = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	Результат = Новый Структура;
	
	Результат.Вставить("Ключ", КлючНастройки);
	Результат.Вставить("Тип", СтрН.Тип);
	Результат.Вставить("Идентификатор", СтрН.ПолучитьИдентификатор());
	
	ТаблицаДанные = ТаблицаНастроек(СтрН.Тип);
	
	Если ТаблицаДанные <> Неопределено Тогда 
		Строки = ТаблицаДанные.НайтиСтроки(Новый Структура("Ключ", КлючНастройки));
		
		Результат.Вставить("ИдентификаторДанные", Строки[0].ПолучитьИдентификатор());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция - Добавить настройку
//
// Параметры:
//  Тип	 - Число	 - 0 - Запрос, 1 - Скрипт, 9 -Группа
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте
Функция ДобавитьНастройку(Тип)
	
	Модифицированность = Истина;
	
	Если ПараметрыТекущейНастройки <> Неопределено И ПараметрыТекущейНастройки.Тип = 9 Тогда 
		
		Родитель = Настройки_Дерево.НайтиПоИдентификатору(ПараметрыТекущейНастройки.Идентификатор);
		
	Иначе
		
		Родитель = Настройки_Дерево;
		
	КонецЕсли;
	
	Стр = Родитель.ПолучитьЭлементы().Добавить();
	Стр.Тип = Тип;
	Стр.Ключ = Новый УникальныйИдентификатор;
	Стр.Картинка = КартинкаПоТипуНастройки(Тип);
	
	Если Тип = 0 Тогда
		
		СтрДанные = Настройки_Запросы.Добавить();
		
	ИначеЕсли Тип = 1 Тогда 
		
		СтрДанные = Настройки_Алгоритмы.Добавить();
		
	КонецЕсли;
	
	Если СтрДанные <> Неопределено Тогда 
		СтрДанные.Ключ = Стр.Ключ;
	КонецЕсли;
	
	Элементы.Настройки_Дерево.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	
КонецФункции

#КонецОбласти //Получение_настроек

//////////////////////////////////////////////////
/////Интерфейсные методы, обработчики команд
//////////////////////////////////////////////////


#Область Форма

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КонсольКода_ЗагрузитьИзВременногоХранилища" Тогда 
		Сообщить("Адрес данных: " + Параметр);
		ЗагрузитьТаблицу(Параметр);
		
		Если ТипЗнч(Источник) = Тип("УправляемаяФорма") И Источник.Открыта() Тогда 
			Источник.Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовок()
	Заголовок = "Консоль кода" + ?(ПустаяСтрока(ИмяФайлаНастроек), "", ": " + ИмяФайлаНастроек);
КонецПроцедуры

#Область События

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда 
		
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаВопросаПриЗакрытии", ЭтотОбъект), "Настройки не сохранены. Закрыть?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаПриЗакрытии(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		
		Модифицированность = Ложь;
		ЭтотОбъект.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ХранилищеПараметров = Новый Структура;
	
	Если НЕ ПустаяСтрока(ИмяФайлаНастроек)Тогда 
		Адрес = ЗагрузитьФайлНаСервер(ИмяФайлаНастроек);
		
		Если ЭтоАдресВременногоХранилища(Адрес) Тогда 
			ЗагрузитьНастройкиНаСервере(Адрес);
		КонецЕсли;
	Иначе
		
		ДобавитьНастройку(0);
		Модифицированность = Ложь;
		
	КонецЕсли;
	УстановитьЗаголовок();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	РезультатТаблица_Адрес = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Команды

#Область Настройки

&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)
	РезультатВыбора = ВыбратьФайлДляОткрытия("Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*",
		"Укажите файл Для списка запросов",
		ИмяФайлаНастроек,
		ПутьФайлаЗапроса,
		"sel"
	);
	Если РезультатВыбора = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	РезультатВыбора.Свойство("ИмяФайла", ИмяФайлаНастроек);
	РезультатВыбора.Свойство("Каталог", ПутьФайлаЗапроса);
	
	Адрес = ЗагрузитьФайлНаСервер(ИмяФайлаНастроек);
	Если НЕ ЭтоАдресВременногоХранилища(Адрес) Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНастройкиНаСервере(Адрес);

	Модифицированность = Ложь;
	
	УстановитьЗаголовок();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	Если Команда.Имя = "Файл_СохранитьНастройкиКак" ИЛИ ПустаяСтрока(ИмяФайлаНастроек) Тогда 
		РезультатВыбора = ВыбратьФайлДляСохранения("Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*",
			"Укажите файл Для списка запросов",
			ИмяФайлаНастроек,
			ПутьФайлаЗапроса,
			"sel"
		);
		
		Если РезультатВыбора = Неопределено Тогда 
			
			Возврат;
			
		КонецЕсли;
		
		РезультатВыбора.Свойство("ИмяФайла", ИмяФайлаНастроек);
		РезультатВыбора.Свойство("Каталог", ПутьФайлаЗапроса);
	КонецЕсли;
	
	Адрес = ПолучитьАдресФайлаНастроек();
	
	ПолучитьФайл(Адрес, ИмяФайлаНастроек, Ложь);
	
	УдалитьИзВременногоХранилища(Адрес);
	
	УстановитьЗаголовок();
	
	Модифицированность = Ложь;
	
	ПоказатьОповещениеПользователя("Настройки сохранены", , ИмяФайлаНастроек);
КонецПроцедуры

#КонецОбласти //Настройки

#Область  Редактор

&НаКлиенте
Процедура Редактор_Раскомментировать(Команда)
	РасКомментироватьВыделенныйТекст();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросСкрипт(Команда)
	
	СохранитьДанныеНастройки(ПараметрыТекущейНастройки);
	
	Если НЕ МожноВыполнить() Тогда 
		Возврат;
	КонецЕсли;
	
	ВыполнитьНастройку(ПараметрыТекущейНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТекстДляМодуля(Команда)
	
	ТекстДок = СформироватьТекстДляМодуля(ВыбраннаяНастройка_Текст.ПолучитьТекст());
	
	ТекстДок.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекстЗапросаОтМусора()
	
	ВыбраннаяНастройка_Текст.УстановитьТекст(обПропылесоситьТекстЗапроса(ВыбраннаяНастройка_Текст.ПолучитьТекст()));
	
КонецПроцедуры // ОчиститьТекстЗапросаОтМусора()

&НаКлиенте
Процедура Редактор_ОткрытьКонструкторЗапроса(Команда)
	
	ТекстЗапроса = ВыбраннаяНастройка_Текст.ПолучитьТекст();
	Контсруктор = Новый КонструкторЗапроса(?(ПустаяСтрока(ТекстЗапроса) ,Неопределено, ТекстЗапроса));

	Контсруктор.Показать(Новый ОписаниеОповещения("ПриЗакрытииКЗ", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура Редактор_Закомментировать(Команда)
	ЗакомментироватьВыделенныйТекст();
КонецПроцедуры

&НаКлиенте
Процедура Параметры_Заполнить(Команда)
	Параметры_ЗаполнитьНаКлиенте();
КонецПроцедуры

#КонецОбласти //Редактор

#Область Таблица_результат

&НаКлиенте
Процедура Таблица_НастроитьКолонки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПрименитьНастройкиТаблицы", ЭтаФорма);
	ОткрытьФорму("ВнешняяОбработка.КонсольКода83.Форма.ФормаНастройкаТаблицы", Новый Структура("Данные", СтруктураТаблицы), ЭтаФорма, , , ,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Результат_ДобавитьВПараметры(Команда)
	Значение = ЗначениеТекущейЯчейки();
	
	ИмяПараметра = Элементы.РезультатТаблица.ТекущийЭлемент.Заголовок;
	
	УстановитьЗначениеПараметра(ИмяПараметра, Значение);
КонецПроцедуры

#КонецОбласти //Таблица_результат

&НаКлиенте
Процедура ПереключитьВидимость(Команда)
	Элемент = Неопределено;
	Кнопка = Неопределено;
	
	ИзменяемыеЭлементы = Новый Массив;
	
	Если Команда.Имя = "Видимость_Дерево_Настроек" Тогда 
		Элемент = Элементы.Настройки_Дерево;
		ИзменяемыеЭлементы.Добавить(Элемент);
		ИзменяемыеЭлементы.Добавить(Элементы.Настройки_ДеревоГруппаДобавить);
		Кнопка = Элементы.Видимость_Дерево_Настроек;
	ИначеЕсли Команда.Имя = "Видимость_Параметры" Тогда 
		Элемент = Элементы.ВыбраннаяНастройка_Параметры;
		ИзменяемыеЭлементы.Добавить(Элемент);
		Кнопка = Элементы.Видимость_Параметры;
	КонецЕсли;
	
	ВидимостьНовая = НЕ Элемент.Видимость;
	
	Для Каждого Эл Из ИзменяемыеЭлементы Цикл 
		Эл.Видимость = ВидимостьНовая;
	КонецЦикла;
	
	Кнопка.Пометка = ВидимостьНовая;
	//Кнопка.ЦветФона = ?(Элемент.Видимость, WebЦвета.Белый, WebЦвета.Серебряный);
КонецПроцедуры

#Область  Дерево_настроек
&НаКлиенте
Процедура Настройки_ДобавитьНастройку(Команда)
	
	Если Команда.Имя = "Настройки_ДобавитьЗапрос" Тогда 
		Тип = 0;
	ИначеЕсли Команда.Имя = "Настройки_ДобавитьСкрипт" Тогда 
		Тип = 1;
	ИначеЕсли Команда.Имя = "Настройки_ДобавитьГруппу" Тогда 
		Тип = 9;
	КонецЕсли;
	
	Если Тип= Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДобавитьНастройку(Тип);
	
КонецПроцедуры

#КонецОбласти //Дерево_настроек

#КонецОбласти

#Область События_элементов_формы

&НаКлиенте
Процедура ДеревоНастроекПриАктивизацииСтроки(Элемент)
	
	Если ТекущаяНастройка = Элементы.ДеревоНастроек.ТекущиеДанные Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ?(Элементы.ДеревоНастроек.ТекущиеДанные=Неопределено, Неопределено, Элементы.ДеревоНастроек.ТекущиеДанные.ТекстЗапроса);
	ТекущаяНастройка = Элементы.ДеревоНастроек.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура СохраняемыеДанныеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПараметрыЗапросаПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоНастроекПараметрыЗапросаЗначениеПараметра.ОграничениеТипа = Элемент.ТекущиеДанные.ТипПараметра;
КонецПроцедуры

&НаКлиенте
Процедура РезультатТаблицаПриАктивизацииЯчейки(Элемент)
	ПодключитьОбработчикОжидания("ВывестиОписаниеЗначенияТаблицы", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура РезультатТаблицаПриИзменении(Элемент)
	ТаблицаИзменена = Истина;
КонецПроцедуры

#КонецОбласти //События_элементов_формы

#Область Таблица_результата

&НаКлиенте
Функция ЗначениеТекущейЯчейки()
	Элемент = Элементы.РезультатТаблица;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Элемент.ТекущиеДанные[ИмяТекущейКолонки()];
	
КонецФункции

&НаКлиенте
Функция ИмяТекущейКолонки()
	
	Возврат Элементы.РезультатТаблица.ТекущийЭлемент.Заголовок;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвойстваЗначения(Значение)
	
	Результат = Новый Структура("Выполнено, Описание", Истина);
	
	ТипЗначения = ТипЗнч(Значение);
	
	Описание = Новый СписокЗначений;
	
	Результат.Вставить("ОписаниеЗначения", Описание);
	
	Если НЕ ОписаниеТиповВсеСсылки().СодержитТип(ТипЗначения) Тогда 
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Описание.Добавить(Значение.УникальныйИдентификатор(), "UID", , БиблиотекаКартинок.ПерейтиПоНавигационнойСсылке);
	Исключение
	КонецПопытки;
	
	ЗначениеЗаполнено = ЗначениеЗаполнено(Значение);
	
	Попытка
		Мета = Метаданные.НайтиПоТипу(ТипЗначения);
		
		Если ЗначениеЗаполнено И Метаданные.Перечисления.Содержит(Мета) Тогда 
			
			Порядок = ЗначениеЗапросом("ВЫБРАТЬ " + Мета.ПолноеИмя() + ".Порядок ГДЕ Ссылка = &Ссылка", Новый Структура("Ссылка", Значение));
			МетаЗначение = Мета.ЗначенияПеречисления[Порядок];
			Описание.Добавить(Мета.ПолноеИмя() + "." + МетаЗначение.Имя, "Полное имя", , БиблиотекаКартинок.Изменить);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено И Метаданные.Справочники.Содержит(Мета)
			ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(Мета)
			ИЛИ Метаданные.ПланыСчетов.Содержит(Мета)
			ИЛИ Метаданные.ПланыВидовРасчета.Содержит(Мета) Тогда 
			
			ИмяПредопределенного = ЗначениеЗапросом("ВЫБРАТЬ " + Мета.ПолноеИмя() + ".ИмяПредопределенныхДанных ГДЕ Ссылка = &Ссылка", Новый Структура("Ссылка", Значение));
			
			Если ЗначениеЗаполнено(ИмяПредопределенного) Тогда 
				Описание.Добавить(Мета.ПолноеИмя() + "." + ИмяПредопределенного, "Полное имя", , БиблиотекаКартинок.Изменить);
			КонецЕсли;
			
		КонецЕсли;		
	Исключение
		
		Возврат мОшибка(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВывестиОписаниеЗначенияТаблицы()
	
	Значение = ЗначениеТекущейЯчейки();
	
	Если Значение = Неопределено Тогда 
		Служебные_ОписаниеТекущегоЗначения = Неопределено;
		Возврат;
	КонецЕсли;
	
	
	// Костыль от зацикливания
	Если ХранилищеПараметров.Свойство("ТекущееЗначениеТаблицы") И Значение = ХранилищеПараметров.ТекущееЗначениеТаблицы Тогда 
		Возврат;
	КонецЕсли;
	
	ХранилищеПараметров.Вставить("ТекущееЗначениеТаблицы", Значение);
	
	Описание = Новый СписокЗначений;	
	
	Описание.Добавить(Значение, "Значение", , БиблиотекаКартинок.ПоказатьДанные);
	Описание.Добавить(ПолучитьПолноеИмяТипа(ТипЗнч(Значение)), "Тип", , БиблиотекаКартинок.ВыбратьТип);
	
	ХранилищеПараметров.Вставить("ТекущееЗначениеТаблицы_Описание", Описание);
	
	Служебные_ОписаниеТекущегоЗначения = ФорматированноеОписаниеСписок(Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура Служебные_ОписаниеТекущегоЗначенияНажатие(Элемент, СтандартнаяОбработка)
	
	Если НЕ ХранилищеПараметров.Свойство("ТекущееЗначениеТаблицы_Описание") Тогда 
		Возврат;
	КонецЕсли;
	
	// Не дополненное описание	
	Если ХранилищеПараметров.ТекущееЗначениеТаблицы_Описание.Количество() = 2 Тогда 
		
		ХранилищеПараметров.ТекущееЗначениеТаблицы_Описание.Добавить(ИмяТекущейКолонки(), "Имя реквизита");
		Результат = ПолучитьСвойстваЗначения(ХранилищеПараметров.ТекущееЗначениеТаблицы_Описание[0].Значение);
		
		Если НЕ Результат.Выполнено Тогда 
			СообщитьОбОшибке(Результат.Описание, "Получение описания значения");
			Возврат;
		КонецЕсли;
		
		Скопировать(Результат.ОписаниеЗначения, ХранилищеПараметров.ТекущееЗначениеТаблицы_Описание);
				
	КонецЕсли;
		
	ОткрытьФорму(ИмяФормы + "Свойств", 
			Новый Структура("Список", ХранилищеПараметров.ТекущееЗначениеТаблицы_Описание), 
			ЭтаФорма, , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиТаблицы(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда 
		
		СтруктураТаблицы = ПрименитьНастройкиТаблицыСервер(Результат);
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Функция ПрименитьНастройкиТаблицыСервер(СтруктураТаблицы)

	Таблица = РеквизитФормыВЗначение("РезультатТаблица");
	
	НовыеКолонки = Новый Массив;
	УдаляемыеКолонки = Новый Массив;
	ИзмененныеКолонки = Новый Массив;
	
	ИндексКолонок = Новый Структура;
	
	Для Каждого Колонка Из СтруктураТаблицы Цикл 
		ИндексКолонок.Вставить(Колонка.Имя, Колонка);
		
		КолонкаТаблицы = Таблица.Колонки.Найти(Колонка.Имя);
		Если КолонкаТаблицы = Неопределено Тогда 
			НовыеКолонки.Добавить(Колонка);			
		ИначеЕсли КолонкаТаблицы.ТипЗначения <> Колонка.ТипЗначения Тогда 
			ИзмененныеКолонки.Добавить(Колонка);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КолонкаТаблицы Из Таблица.Колонки Цикл 
		
		Колонка = ИндексКолонок[Колонка.Имя];
		
		Если Колонка = Неопределено Тогда 
			
			УдаляемыеКолонки.Добавить(КолонкаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Колонка Из НовыеКолонки Цикл 
		
		Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок);
		
	КонецЦикла;
	
	Для Каждого Колонка Из УдаляемыеКолонки Цикл 
		
		Таблица.Колонки.Удалить(Колонка);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Таблица, РезультатТаблица_Адрес);

	Возврат ВывестиТаблицу(Таблица);
	
КонецФункции

#КонецОбласти //Таблица_результата

#Область  Дерево_настроек

&НаКлиенте
Процедура УстановитьНастройкиИнфтерфейса(ПараметрыНастройки)
	
	ИспользоватьРедактор = ПараметрыНастройки <> Неопределено И (ПараметрыНастройки.Тип = 0 ИЛИ ПараметрыНастройки.Тип = 1);
	Если ИспользоватьРедактор И ПараметрыНастройки.Тип = 0 Тогда 
		
		Элементы.ГруппаКоманды.ТекущаяСтраница = Элементы.ГруппаЗапрос;
		
	ИначеЕсли ИспользоватьРедактор И ПараметрыНастройки.Тип = 1 Тогда 
	
		Элементы.ГруппаКоманды.ТекущаяСтраница = Элементы.ГруппаСкрипт;
		
	КонецЕсли;
		
	Элементы.ГруппаРедактор.Доступность = ИспользоватьРедактор;
	Элементы.ТекстЗапросаКонтекстноеМенюОткрытьКонструкторЗапроса.Доступность = ИспользоватьРедактор И ПараметрыНастройки.Тип = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки_ДеревоПриАктивизацииСтроки(Элемент)
	
	СохранитьДанныеНастройки(ПараметрыТекущейНастройки);
	
	КлючТекущейНастройки = ?(Элементы.Настройки_Дерево.ТекущиеДанные = Неопределено, Неопределено, Элементы.Настройки_Дерево.ТекущиеДанные.Ключ);
	
	ПараметрыТекущейНастройки = ПолучитьПараметрыНастройки(КлючТекущейНастройки);
	
	УстановитьНастройкиИнфтерфейса(ПараметрыТекущейНастройки);
	ОтобразитьДанныеНастройки(ПараметрыТекущейНастройки);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КартинкаПоТипуНастройки(Тип)
	Если Тип = 0 Тогда 
		
		Возврат БиблиотекаКартинок.КонструкторЗапроса;
		
	ИначеЕсли Тип = 1 Тогда 
		
		Возврат БиблиотекаКартинок.ПроизвольноеВыражение;
		
	ИначеЕсли Тип = 9 Тогда 
		
		Возврат БиблиотекаКартинок.ВнешнийИсточникДанныхКуб;
		
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура Результат_ВременныеТаблицыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Результат_ВременныеТаблицы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ РезультатВыполнения = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ТекущиеДанные.АдресДанных) Тогда 
		ЗагрузитьТаблицу(ТекущиеДанные.АдресДанных);
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти //Дерево_настроек

