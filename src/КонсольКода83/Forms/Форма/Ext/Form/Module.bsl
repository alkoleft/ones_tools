&НаКлиенте
Перем ПутьФайлаЗапроса;
&НаКлиенте
Перем ТекущаяНастройка;
&НаКлиенте
Перем ХранилищеПараметров;

#Область Коллекции

&НаСервереБезКонтекста
Функция ПолучитьКоллекцию(Объект)
	Тип = ТипЗнч(Объект);
	Если Тип = Тип("ДеревоЗначений") или Тип = Тип("СтрокаДереваЗначений") Тогда
		Возврат Объект.Строки;
	КонецЕсли;
	Возврат Объект;
КонецФункции

&НаСервереБезКонтекста
Процедура СкопироватьСодержимое(Приемник,Источник)	
	ПриемникКоллекция=ПолучитьКоллекцию(Приемник);
	ИсточникКоллекция=ПолучитьКоллекцию(Источник);
	для каждого стр из Источник.Строки цикл
		нСтр=ПриемникКоллекция.Добавить();
		ЗаполнитьЗначенияСвойств(нСтр,стр);
		СкопироватьСодержимое(нСтр,стр);
	КонецЦикла;
КонецПроцедуры
#КонецОбласти

#Область Работа_с_файлами

&НаКлиенте
Функция ВыбратьФайлДляСохранения(Фильтр, Заголовок = Неопределено, ВыбранноеИмяФайла = Неопределено, ВыбранныйКаталог = Неопределено, ВыбранноеРасширение = Неопределено)
	Диалог = новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = Фильтр;
	Диалог.ПолноеИмяФайла 	= ВыбранноеИмяФайла;
	Диалог.Каталог 			= ВыбранныйКаталог;
	Диалог.Заголовок 		= Заголовок;
	Диалог.Расширение 		= ВыбранноеРасширение;
	
	Если Диалог.Выбрать() Тогда
		
		Возврат Новый Структура("ИмяФайла, Каталог", Диалог.ПолноеИмяФайла, Диалог.Каталог);

	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ВыбратьФайлДляОткрытия(Фильтр, Заголовок = Неопределено, ВыбранноеИмяФайла = Неопределено, ВыбранныйКаталог = Неопределено, ВыбранноеРасширение = Неопределено)
	Диалог = новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = Фильтр;
	Диалог.ПолноеИмяФайла 	= ВыбранноеИмяФайла;
	Диалог.Каталог 			= ВыбранныйКаталог;
	Диалог.Заголовок 		= Заголовок;
	Диалог.Расширение 		= ВыбранноеРасширение;
		
	Если Диалог.Выбрать() Тогда
		
		Возврат Новый Структура("ИмяФайла, Каталог", Диалог.ПолноеИмяФайла, Диалог.Каталог);
		
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ЗагрузитьФайлНаСервер(файл)
	Если ПустаяСтрока(файл)Тогда Возврат Неопределено;КонецЕсли;
	Возврат ПоместитьВоВременноеХранилище(новый ДвоичныеДанные(файл),УникальныйИдентификатор);
КонецФункции

&НаСервереБезКонтекста
Функция ПоместитьВФайл(Адрес)
	двДанные = ПолучитьИзВременногоХранилища(Адрес);
	
	Если ТипЗнч(двДанные)=Тип("ДвоичныеДанные") Тогда
		ИмяФайла=ПолучитьИмяВременногоФайла();
		двДанные.Записать(ИмяФайла);
		Возврат ИмяФайла;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область Редактирование_Текстов

&НаКлиенте
Процедура ПриЗакрытииКЗ(Текст, ДополнительныеПараметры) Экспорт 
	Если Текст = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоНастроек.ТекущиеДанные.ТекстЗапроса = Текст;
КонецПроцедуры

#КонецОбласти

#Область Параметры

&НаСервереБезКонтекста
Функция Параметры_ЗаполнитьНаСервере(ТекстЗапроса)
	
	мПараметры = Новый Массив;
	
	Попытка
		Запрос = Новый Запрос(ТекстЗапроса);
	Исключение
		
		Возврат Новый Структура("Выполнено, Описание", Ложь, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Для Каждого Параметр Из Запрос.НайтиПараметры() Цикл 
		
		мПараметры.Добавить(Новый Структура("Имя, ТипЗначения", Параметр.Имя, Параметр.ТипЗначения));
		
	КонецЦикла;
	
	Возврат Новый Структура("Выполнено, Параметры", Истина, мПараметры);
	
КонецФункции

&НаКлиенте
Процедура Параметры_ЗаполнитьНаКлиенте()
	
	ТекстЗапроса = Элементы.ДеревоНастроек.ТекущиеДанные.ТекстЗапроса;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда 
		Возврат;
	КонецЕсли;
	
	
	Результат = Параметры_ЗаполнитьНаСервере(ТекстЗапроса);
	
	Если НЕ Результат.Выполнено Тогда 
		
		СообщитьОбОшибке(Результат.Описание, "При получении параметров запроса");
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЗапроса = Элементы.ДеревоНастроек.ТекущиеДанные.ПараметрыЗапроса;
	
	Для Каждого Параметр Из Результат.Параметры Цикл 
		
		Строки = ПараметрыЗапроса.НайтиСтроки(Новый Структура("ИмяПараметра", Параметр.Имя));
		
		Если Строки.Количество() = 0 Тогда 
			
			Стр = ПараметрыЗапроса.Добавить();
			Стр.ИмяПараметра = Параметр.Имя;
			
		Иначе
			
			Стр = Строки[0];
			
		КонецЕсли;
		Стр.ТипПараметра = Параметр.ТипЗначения;
		Стр.ЗначениеПараметра = Параметр.ТипЗначения.ПривестиЗначение(Стр.ЗначениеПараметра);
		
	КонецЦикла;
	
КонецПроцедуры



&НаКлиенте
Процедура УстановитьЗначениеПараметра(Имя, Значение, ТипЗначения = Неопределено)
	ПараметрыЗапроса = Элементы.ДеревоНастроек.ТекущиеДанные.ПараметрыЗапроса;
	
	Строки = ПараметрыЗапроса.НайтиСтроки(Новый Структура("ИмяПараметра", Имя));
	
	Если Строки.Количество() = 0 Тогда 
		
		Стр = ПараметрыЗапроса.Добавить();
		Стр.ИмяПараметра = Имя;
		
	Иначе
		
		Стр = Строки[0];
		
	КонецЕсли;
	Если ТипЗначения <> Неопределено Тогда 
		Стр.ТипПараметра = ТипЗначения;
	КонецЕсли;
	
	Если Значение = Неопределено Тогда 
		Стр.ЗначениеПараметра = ТипЗначения.ПривестиЗначение(Стр.ЗначениеПараметра);
	Иначе
		Стр.ЗначениеПараметра = Значение;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти //Параметры

#Область Выполнение

&НаКлиенте
Процедура ВыполнитьЗапросСкрипт(Команда)
	
	ЭтоЗапрос = Элементы.ГруппаТексты.ТекущаяСтраница = Элементы.ГруппаЗапрос;
	
	ПараметрыВыполнения = Новый Структура;
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Для каждого стр из ТекущиеДанные.ПараметрыЗапроса цикл
		ПараметрыВыполнения.Вставить(стр.ИмяПараметра, стр.ЗначениеПараметра);
	КонецЦикла;
	
	ВыполнитьНаСервере = ЭтоЗапрос ИЛИ НЕ ВыполнятьНаКлиенте;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если ВыполнитьНаСервере Тогда 
		РезультатВыполнения = ВыполнитьЗапросСкриптНаСервере(
			?(ЭтоЗапрос, ТекущиеДанные.ТекстЗапроса, ТекущиеДанные.ТекстАлгоритма), 
			ПараметрыВыполнения, 
			ЭтоЗапрос,
			РезультатТаблица_Адрес);
			
		Если РезультатВыполнения.Выполнено И РезультатВыполнения.Свойство("ЕстьДанные") Тогда 
			
			РезультатТаблица.Очистить();
			ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ЗагрузитьИзВременногоХранилищаТаблицу(РезультатТаблица_Адрес);
			ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
			
			РезультатВыполнения.Вставить("ВремяВывода", ВремяОкончания - ВремяНачала);

		КонецЕсли;
		
	Иначе
	
		РезультатВыполнения = ВыполнитьСкриптНаКлиенте(ТекущиеДанные.ТекстАлгоритма, ПараметрыВыполнения);		
				
	КонецЕсли;
	
	ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	РезультатВыполнения.Вставить("ОбщееВремя", ВремяОкончания - ВремяНачала); 
	
	Описание = Новый СписокЗначений();
	Описание.Добавить(РезультатТаблица.Количество(), "Строк", , БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	Описание.Добавить(ФорматВремяВыполнения(РезультатВыполнения.ОбщееВремя), "Общее", , БиблиотекаКартинок.УстановитьВремя);
	
	
	Служебные_ОписаниеРезультат = ФорматированноеОписаниеСписок(Описание);
	
	Если РезультатВыполнения.Свойство("ВремяВыполнения") Тогда 
		Описание.Добавить(ФорматВремяВыполнения(РезультатВыполнения.ВремяВыполнения), "Выполнения");
	КонецЕсли;
	Если РезультатВыполнения.Свойство("ВремяВывода") Тогда 
		Описание.Добавить(ФорматВремяВыполнения(РезультатВыполнения.ВремяВывода), "Вывод");
	КонецЕсли;
	Элементы.Служебные_ОписаниеРезультат.Подсказка = ФорматированноеОписаниеСписок(Описание, Ложь);

	Если НЕ РезультатВыполнения.Выполнено Тогда 
		
		ПоказатьПредупреждение(, "Возникла ошибка.");		
		Сообщить(РезультатВыполнения.Описание);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьЗапросСкриптНаСервере(Текст, ПараметрыВыполнения, ЭтоЗапрос, АдресРезультата)
	
	РезультатВыполнения = Новый Структура;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Попытка
		
		Если ЭтоЗапрос Тогда 
					
			Результат = ВыполнитьЗапросНаСервере(Текст, ПараметрыВыполнения);
			
		Иначе
			Контекст = Новый Структура;
			Контекст.Вставить("Таблица", ПолучитьИзВременногоХранилища(АдресРезультата));
			
			Результат = ВыполнитьСкриптНаСервере(Текст, ПараметрыВыполнения, Контекст);
			
		КонецЕсли;
		
	Исключение
		
		Результат = Новый Структура("Выполнено, Описание", Ложь, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	РезультатВыполнения.Вставить("ВремяВыполнения", ВремяОкончания - ВремяНачала);
	
	Если Результат.Выполнено И Результат.Данные <> Неопределено Тогда
		
		ПоместитьВоВременноеХранилище(Результат.Данные, АдресРезультата);
		РезультатВыполнения.Вставить("ЕстьДанные", Истина);
		
	КонецЕсли;
	
	РезультатВыполнения.Вставить("Выполнено", Результат.Выполнено);
	
	Если Результат.Свойство("Описание") Тогда 
		РезультатВыполнения.Вставить("Описание", Результат.Описание);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьЗапросНаСервере(Текст, ПараметрыВыполнения)
	
	Запрос = новый Запрос(Текст);
	
	Для каждого Параметр из ПараметрыВыполнения цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Новый Структура("Выполнено, Данные", Истина, Результат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьСкриптНаСервере(Текст, ПараметрыВыполнения, Контекст)
	
	ТекстУстановкаКонтекста = "";
	
	Для Каждого Эл Из Контекст Цикл 
		ТекстУстановкаКонтекста = ТекстУстановкаКонтекста + СтрШаблон("%1 = Контекст.%1;", Эл.Ключ);	
	КонецЦикла;
	
	Результат = Неопределено;
	Выполнить(ТекстУстановкаКонтекста + Текст);
		
	Возврат Новый Структура("Выполнено, Данные", Истина, Результат);
	
КонецФункции

&НаКлиенте
Функция ВыполнитьСкриптНаКлиенте(Текст, ПараметрыВыполнения)
		
	Попытка
		
		Выполнить(Текст);
		
	Исключение
		
		Возврат Новый Структура("Выполнено, Описание", Ложь, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Новый Структура("Выполнено, Описание", Истина);	
	
КонецФункции

#КонецОбласти

#Область Настройки

#Область Команды

&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)
	РезультатВыбора = ВыбратьФайлДляОткрытия("Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*",
		"Укажите файл для списка запросов",
		ИмяФайлаНастроек,
		ПутьФайлаЗапроса,
		"sel"
	);
	Если РезультатВыбора = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	РезультатВыбора.Свойство("ИмяФайла", ИмяФайлаНастроек);
	РезультатВыбора.Свойство("Каталог", ПутьФайлаЗапроса);
	
	Адрес = ЗагрузитьФайлНаСервер(ИмяФайлаНастроек);
	Если НЕ ЭтоАдресВременногоХранилища(Адрес) Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНастройкиНаСервере(Адрес);

	Модифицированность = Ложь;
	
	УстановитьЗаголовок();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	Если Команда.Имя = "Файл_СохранитьНастройкиКак" ИЛИ ПустаяСтрока(ИмяФайлаНастроек) Тогда 
		РезультатВыбора = ВыбратьФайлДляСохранения("Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*",
			"Укажите файл для списка запросов",
			ИмяФайлаНастроек,
			ПутьФайлаЗапроса,
			"sel"
		);
		
		Если РезультатВыбора = Неопределено Тогда 
			
			Возврат;
			
		КонецЕсли;
		
		РезультатВыбора.Свойство("ИмяФайла", ИмяФайлаНастроек);
		РезультатВыбора.Свойство("Каталог", ПутьФайлаЗапроса);
	КонецЕсли;
	
	Адрес = ПолучитьАдресФайлаНастроек();
	
	ПолучитьФайл(Адрес, ИмяФайлаНастроек, Ложь);
	
	УдалитьИзВременногоХранилища(Адрес);
	
	УстановитьЗаголовок();
	
	Модифицированность = Ложь;
	
	ПоказатьОповещениеПользователя("Настройки сохранены", , ИмяФайлаНастроек);
КонецПроцедуры

#КонецОбласти

// [TODO Оптимизация] Реализовать безконтекстное сохранение/загрузку. Корякин Алексей 30.07.2017 12:03:45
&НаСервере
Процедура ЗагрузитьНастройкиНаСервере(Адрес)
	ИмяФайла = ПоместитьВФайл(Адрес);	
	Если ИмяФайла=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	вНастройки=ЗначениеИзФайла(ИмяФайла);
	УдалитьФайлы(ИмяФайла);
	
	Настройки=РеквизитФормыВЗначение("ДеревоНастроек");
	Настройки.Строки.Очистить();
	СкопироватьСодержимое(Настройки,вНастройки);
	ЗначениеВРеквизитФормы(Настройки,"ДеревоНастроек");
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресФайлаНастроек()
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	СохранитьНастройкиНаСервере(ИмяФайла);
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
КонецФункции

&НаСервере
Функция СохранитьНастройкиНаСервере(ИмяФайла)
	
	ЗначениеВФайл(ИмяФайла, РеквизитФормыВЗначение("ДеревоНастроек"));
	
КонецФункции

#КонецОбласти

#Область Форма

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КонсольКода_ЗагрузитьИзВременногоХранилища" Тогда 
		Сообщить("Адрес данных: " + Параметр);
		ЗагрузитьИзВременногоХранилищаТаблицу(Параметр);
		
		Если ТипЗнч(Источник) = Тип("УправляемаяФорма") И Источник.Открыта() Тогда 
			Источник.Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовок()
	Заголовок = "Консоль кода" + ?(ПустаяСтрока(ИмяФайлаНастроек), "", ": " + ИмяФайлаНастроек);
КонецПроцедуры

#Область События

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда 
		
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаВопросаПриЗакрытии", ЭтотОбъект), "Настройки не сохранены. Закрыть?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаПриЗакрытии(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		
		Модифицированность = Ложь;
		ЭтотОбъект.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ХранилищеПараметров = Новый Структура;
	
	Если НЕ ПустаяСтрока(ИмяФайлаНастроек)Тогда 
		Адрес = ЗагрузитьФайлНаСервер(ИмяФайлаНастроек);
		
		Если ЭтоАдресВременногоХранилища(Адрес) Тогда 
			ЗагрузитьНастройкиНаСервере(Адрес);
		КонецЕсли;
		
	КонецЕсли;
	УстановитьЗаголовок();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДеревоНастроек.ПолучитьЭлементы().Добавить();
	РезультатТаблица_Адрес = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура Параметры_Заполнить(Команда)
	Параметры_ЗаполнитьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура Результат_ДобавитьВПараметры(Команда)
	Значение = ЗначениеТекущейЯчейки();
	
	ИмяПараметра = Элементы.РезультатТаблица.ТекущийЭлемент.Заголовок;
	
	УстановитьЗначениеПараметра(ИмяПараметра, Значение);
КонецПроцедуры

&НаКлиенте
Процедура Редактор_ОткрытьКонструкторЗапроса(Команда)
	
	ТекстЗапроса = Элементы.ДеревоНастроек.ТекущиеДанные.ТекстЗапроса;
	Контсруктор = Новый КонструкторЗапроса(?(ПустаяСтрока(ТекстЗапроса) ,Неопределено, ТекстЗапроса));

	Контсруктор.Показать(Новый ОписаниеОповещения("ПриЗакрытииКЗ", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура Редактор_Закомментировать(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьВидимость(Команда)
	Элемент = Неопределено;
	Кнопка = Неопределено;
	Если Команда.Имя = "Видимость_Запросы" Тогда 
		Элемент = Элементы.ДеревоНастроек;
		Кнопка = Элементы.Видимость_Запросы;
	КонецЕсли;
	
	Элемент.Видимость = НЕ Элемент.Видимость;
	Кнопка.ЦветФона = ?(Элемент.Видимость, WebЦвета.Белый, WebЦвета.Серебряный);
КонецПроцедуры

#КонецОбласти

#Область События_элементов_формы

&НаКлиенте
Процедура ДеревоНастроекПриАктивизацииСтроки(Элемент)
	
	Если ТекущаяНастройка = Элементы.ДеревоНастроек.ТекущиеДанные Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ?(Элементы.ДеревоНастроек.ТекущиеДанные=Неопределено, Неопределено, Элементы.ДеревоНастроек.ТекущиеДанные.ТекстЗапроса);
	ТекущаяНастройка = Элементы.ДеревоНастроек.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура СохраняемыеДанныеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПараметрыЗапросаПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоНастроекПараметрыЗапросаЗначениеПараметра.ОграничениеТипа = Элемент.ТекущиеДанные.ТипПараметра;
КонецПроцедуры

&НаКлиенте
Процедура РезультатТаблицаПриАктивизацииЯчейки(Элемент)
	ПодключитьОбработчикОжидания("ВывестиОписаниеЗначенияТаблицы", 0.1, Истина);
КонецПроцедуры

#КонецОбласти //События_элементов_формы

#Область Служебные

#Область  Форматирование

&НаКлиентеНаСервереБезКонтекста
Функция ФорматВремяВыполнения(Время)
	Возврат СтрШаблон("%1.%2мс. ", Формат('00010101' + Время / 1000, "ДЛФ=T"), Время % 1000);
КонецФункции

// <TODO необходимо вставить описание>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ФорматированноеОписание(Структура, ФорматнаяСтрока = Истина)
	
	Если ФорматнаяСтрока Тогда 
		ЖирныйШрифт = Новый Шрифт(Элементы.ДеревоНастроек.Шрифт, , , Истина);
		МассивЭлементов = Новый Массив;
		
		Для Каждого Эл Из Структура Цикл 
			
			МассивЭлементов.Добавить(Новый ФорматированнаяСтрока(Эл.Ключ + ": ", ЖирныйШрифт));
			МассивЭлементов.Добавить(Строка(Эл.Значение) + "; ");
			
		КонецЦикла;
		
		Возврат Новый ФорматированнаяСтрока(МассивЭлементов);
	Иначе
		
		Результат = "";
		
		Для Каждого Эл Из Структура Цикл 
			
			Результат = Результат +
						СтрШаблон("%1: %2;", Эл.Ключ, Эл.Значение) + 
						Символы.ПС;
			
		КонецЦикла;
		
		Возврат Результат;
	КонецЕсли;
	
КонецФункции // ФорматированноеОписание

&НаКлиенте
Функция ФорматированноеОписаниеСписок(Список, ФорматнаяСтрока = Истина)
	
	Если ФорматнаяСтрока Тогда 
		ЖирныйШрифт = Новый Шрифт(Элементы.ДеревоНастроек.Шрифт, , , Истина);
		МассивЭлементов = Новый Массив;
		
		Для Каждого Эл Из Список Цикл 
			Если ЗначениеЗаполнено(эл.Картинка) Тогда 
				МассивЭлементов.Добавить(Эл.Картинка);
			КонецЕсли;				
			
			МассивЭлементов.Добавить(Новый ФорматированнаяСтрока(" " + Эл.Представление + ": ", ЖирныйШрифт));
			МассивЭлементов.Добавить(Строка(Эл.Значение) + "; ");
			
		КонецЦикла;
		
		Возврат Новый ФорматированнаяСтрока(МассивЭлементов);
	Иначе
		
		Результат = "";
		
		Для Каждого Эл Из Список Цикл 
			
			Результат = Результат +
						СтрШаблон("%1: %2;", Эл.Представление, Эл.Значение) + 
						Символы.ПС;
			
		КонецЦикла;
		
		Возврат Результат;
	КонецЕсли;
	
КонецФункции // ФорматированноеОписание

#КонецОбласти //Форматирование

&НаКлиенте
Процедура СообщитьОбОшибке(ОписаниеОшибки, ОписаниеДействия)
	
	Сообщить(ОписаниеОшибки);
	ПоказатьПредупреждение(, "" + ОписаниеДействия + Символы.ПС + "Возникла ошибка");		
	
КонецПроцедуры // СообщитьОбОшибке

&НаСервереБезКонтекста
Функция ПодключитьВнешнуюОбработкуСервер(Адрес)
	
	Возврат ВнешниеОбработки.Подключить(Адрес);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИзВременногоХранилищаТаблицу(Адрес)

	Таблица = ПолучитьИзВременногоХранилища(Адрес);
	
	ВывестиТаблицу(Таблица);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицу(Таблица)
	Если Таблица = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТЗРез = РеквизитФормыВЗначение("РезультатТаблица");
	УдалитьКолонки(ТЗРез.Колонки);

	ТЗРез = Таблица;
	
	СоздатьКолонкиТЗ(ТЗРез.Колонки);
	РезультатТаблица.Загрузить(ТЗРез);
	
КонецПроцедуры

&НаСервере
процедура СоздатьКолонкиТЗ(колонки)
	массивРеквизитов=новый Массив;
	
	для каждого колонка из колонки цикл
		реквизитФормы=новый РеквизитФормы(колонка.Имя,новый ОписаниеТипов(колонка.ТипЗначения,,"NULL"),"РезультатТаблица");
		массивРеквизитов.Добавить(реквизитФормы);
	КонецЦикла;
	ЭтаФорма.ИзменитьРеквизиты(массивРеквизитов);
	
	для каждого колонка из колонки цикл
		имяКолонки="кол"+колонка.Имя;
		колонкаФ=ЭтаФорма.Элементы.Найти(имяКолонки);
		Если колонкаФ=Неопределено Тогда
			колонкаФ=ЭтаФорма.Элементы.Добавить(имяКолонки,Тип("ПолеФормы"),Элементы.РезультатТаблица);
			попытка
				колонкаФ.ПутьКДанным="РезультатТаблица."+колонка.Имя;
			исключение
			КонецПопытки;
		КонецЕсли;
		колонкаФ.Вид=ВидПоляФормы.ПолеВвода;
		колонкаФ.Заголовок=колонка.Заголовок;
	КонецЦикла;
	Элементы.РезультатТаблица_Служебная.Видимость=Ложь;
КонецПроцедуры

&НаСервере
процедура УдалитьКолонки(колонки)
	массивУдаляемыхРеквизитов=новый Массив;	
	для каждого колонка из колонки цикл
		Если колонка.Имя="_Служебная" Тогда Продолжить;КонецЕсли;
		массивУдаляемыхРеквизитов.Добавить("РезультатТаблица."+колонка.Имя);
	КонецЦикла;
	ЭтаФорма.ИзменитьРеквизиты(,массивУдаляемыхРеквизитов);
	для каждого колонка из колонки цикл
		Если колонка.Имя="_Служебная" Тогда Продолжить;КонецЕсли;
		имяКолонки="кол"+колонка.Имя;
		колонкаФ=ЭтаФорма.Элементы.Найти(имяКолонки);
		ЭтаФорма.Элементы.Удалить(колонкаФ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПолноеИмяТипа(Тип)
	
	Если НЕ ХранилищеПараметров.Свойство("КэшТипов") Тогда
		
		ХранилищеПараметров.Вставить("КэшТипов", Новый Соответствие);
		
	КонецЕсли;
	
	Если ХранилищеПараметров.КэшТипов[Тип] = Неопределено Тогда 
		
		ХранилищеПараметров.КэшТипов.Вставить(Тип, ПолучитьПолноеИмяТипаСервер(Тип));
		
	КонецЕсли;
	
	Возврат ХранилищеПараметров.КэшТипов[Тип];
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПолноеИмяТипаСервер(Тип)
	
	Мета = Метаданные.НайтиПоТипу(Тип);
	
	Если Мета <> Неопределено Тогда 
		Возврат Мета.ПолноеИмя();
	Иначе
		Возврат Строка(Тип);
	КонецЕсли;
	
КонецФункции
#КонецОбласти

#Область  Функции_скрипта_клиент

&НаКлиенте
Функция ПодключитьВнешнуюОбработку(ИмяФайла)
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
	Возврат ПодключитьВнешнуюОбработкуСервер(Адрес);
	
КонецФункции

&НаКлиенте
Функция ОткрытьВнешнуюОбработку(ИмяФайла, ПараметрыФормы = Неопределено)
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
	ИмяОбработки = ПодключитьВнешнуюОбработкуСервер(Адрес);
	
	ОткрытьФорму(СтрШаблон("ВнешняяОбработка.%1.Форма", ИмяОбработки), ПараметрыФормы, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецФункции

#КонецОбласти //Функции_скрипта_клиент

&НаКлиенте
Процедура ВывестиОписаниеЗначенияТаблицы()
	
	Значение = ЗначениеТекущейЯчейки();
	
	Если Значение = Неопределено Тогда 
		Служебные_ОписаниеТекущегоЗначения = Неопределено;
		Возврат;
	КонецЕсли;
	
	
	// Костыль от зацикливания
	Если ХранилищеПараметров.Свойство("ТекущееЗначениеТаблицы") И Значение = ХранилищеПараметров.ТекущееЗначениеТаблицы Тогда 
		Возврат;
	КонецЕсли;
	
	ХранилищеПараметров.Вставить("ТекущееЗначениеТаблицы", Значение);
	
	Описание = Новый СписокЗначений;	
	
	Описание.Добавить(Значение, "Значение", , БиблиотекаКартинок.ПоказатьДанные);
	Описание.Добавить(ПолучитьПолноеИмяТипа(ТипЗнч(Значение)), "Тип", , БиблиотекаКартинок.ВыбратьТип);
	
	ХранилищеПараметров.Вставить("ТекущееЗначениеТаблицы_Описание", Описание);
	
	Служебные_ОписаниеТекущегоЗначения = ФорматированноеОписаниеСписок(Описание);
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеТекущейЯчейки()
	Элемент = Элементы.РезультатТаблица;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Элемент.ТекущиеДанные[Элемент.ТекущийЭлемент.Заголовок];
	
КонецФункции

&НаКлиенте
Процедура Служебные_ОписаниеТекущегоЗначенияНажатие(Элемент, СтандартнаяОбработка)
	
	Если НЕ ХранилищеПараметров.Свойство("ТекущееЗначениеТаблицы_Описание") Тогда 
		Возврат;
	КонецЕсли;
	
	// Не дополненное описание
	Если ХранилищеПараметров.ТекущееЗначениеТаблицы_Описание.Количество() = 2 Тогда 
		Попытка
			ХранилищеПараметров.ТекущееЗначениеТаблицы_Описание.Добавить(ХранилищеПараметров.ТекущееЗначениеТаблицы_Описание[0].Значение.УникальныйИдентификатор(), "UID", , БиблиотекаКартинок.ПерейтиПоНавигационнойСсылке);
			//ХранилищеПараметров.ТекущееЗначениеТаблицы_Описание.Добавить(ЗначениеВСтрокуВнутр(ХранилищеПараметров.ТекущееЗначениеТаблицы_Описание[0].Значение), "Внутр", , БиблиотекаКартинок.Справка);
		Исключение
		КонецПопытки;
	КонецЕсли;
		
	ОткрытьФорму(ИмяФормы + "Свойств", 
			Новый Структура("Список", ХранилищеПараметров.ТекущееЗначениеТаблицы_Описание), 
			ЭтаФорма, , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


