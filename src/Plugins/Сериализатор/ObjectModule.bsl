#Область База

Перем Ядро;

Функция Инициализировать(пЯдро) Экспорт 
	
	Ядро = пЯдро;
	
	Возврат ОписаниеПлагина();
	
КонецФункции

Функция Уничтожить() Экспорт
	
	Ядро = Неопределено;
	
КонецФункции

Функция ОписаниеПлагина() Экспорт 
	
	Описание = Новый Структура;
	Описание.Вставить("Ключ", "Сериализатор");
	Описание.Вставить("Представление", "Сериализатор");
	Описание.Вставить("Функциональность", Новый Массив);
	
	Описание.Функциональность.Добавить(Ядро.БазовыеОперации.Сохранить);
	Описание.Функциональность.Добавить(Ядро.БазовыеОперации.Загрузить);
	
	Возврат Описание;
	
КонецФункции // ОписаниеПлагина

Функция ЕстьПоддержкаФункционала(Функционал, Параметры) Экспорт 
	
	Перем Тип, Формат;
	
	Параметры.Свойство("Тип", Тип);
	Параметры.Свойство("Формат", Формат);
	
	Возврат Тип = Тип("ТаблицаЗначений") И Форматы(Функционал, Тип)[ВРег(Формат)] <> неопределено;
	
КонецФункции // ЕстьПоддержкаФункционала

#КонецОбласти // База


Функция ПолучитьФорматыСериализации(Операция, Тип) Экспорт 

	Результат = Новый Соответствие;
			
	Для Каждого Формат Из Форматы(Операция, Тип) Цикл 
		
		Результат.Вставить(СтрШаблон("*.%1", Формат.Ключ), СтрШаблон("*.%1", Формат.Ключ));
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ПолучитьФорматыСериализации()

Функция СохранитьЗначение(Значение, Формат) Экспорт
	
	Формат = ВРег(Формат);
	
	ТипФайла = Форматы(Ядро.БазовыеОперации.Сохранить, ТипЗнч(Значение))[Формат];
	
	Если ТипФайла = Неопределено Тогда 
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Формат = "XML" Тогда 
		
		Возврат СохранитьЗначениеXML(Значение);
		
	ИначеЕсли Формат = "JSON" Тогда 
		
		Возврат СохранитьЗначениеJSON(Значение);
		
	ИначеЕсли Формат = "CSV" Тогда 
		
		Возврат СохранитьЗначениеCSV(Значение);
		
	КонецЕсли;
	
	Возврат СохранитьЗначениеТабличный_документы(Значение, ТипФайла);
	
КонецФункции // СохранитьЗначение()

Функция ЗагрузитьЗначение(Данные, Формат, Тип) Экспорт 
	
	Формат = ВРег(Формат);
	
	ТипФайла = Форматы(Ядро.БазовыеОперации.Загрузить, Тип)[Формат];
	
	Если ТипФайла = Неопределено Тогда 
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Формат = "XML" Тогда 
		
		Возврат ЗагрузитьЗначениеXML(Данные, Тип);
		
	ИначеЕсли Формат = "JSON" Тогда 
		
		Возврат ЗагрузитьЗначениеJSON(Данные, Тип);
		
	ИначеЕсли Формат = "CSV" Тогда 
		
		Возврат ЗагрузитьЗначениеCSV(Данные, Тип);
		
	КонецЕсли;
	
КонецФункции // ЗагрузитьЗначение

#Область Табличный_документы

Функция СохранитьЗначениеТабличный_документы(Значение, ТипФайла)
		
	ТабДок = ТабДокЧерезПостроительОтчета(Значение);

	Поток = Новый ПотокВПамяти;
	ТабДок.Записать(Поток, ТипФайла);
	
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

Функция Форматы(Операция, Тип)
	
	Форматы = Новый Структура;
	
	Если Операция = Ядро.БазовыеОперации.Сохранить Тогда 
		Форматы.Вставить("DOCX",	ТипФайлаТабличногоДокумента.DOCX);
		Форматы.Вставить("HTML",	ТипФайлаТабличногоДокумента.HTML5);
		Форматы.Вставить("MXL",		ТипФайлаТабличногоДокумента.MXL);
		Форматы.Вставить("ODS",		ТипФайлаТабличногоДокумента.ODS);
		Форматы.Вставить("PDF",		ТипФайлаТабличногоДокумента.PDF);
		Форматы.Вставить("TXT",		ТипФайлаТабличногоДокумента.TXT);
		Форматы.Вставить("XLS",		ТипФайлаТабличногоДокумента.XLS);
		Форматы.Вставить("XLSX",	ТипФайлаТабличногоДокумента.XLSX);
	КонецЕсли;
	
	Форматы.Вставить("XML", Истина);
	Форматы.Вставить("JSON", Истина);
	
	Если Тип = Тип("ТаблицаЗначений") Тогда 
		Форматы.Вставить("CSV", Истина);
		Форматы.Вставить("TSV", Истина);
	КонецЕсли;
	
	Возврат Форматы;
	
КонецФункции

Функция ТабДокЧерезПостроительОтчета(Значение)
	
	ТабДок = Новый ТабличныйДокумент;
	Построитель = Новый ПостроительОтчета;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(Значение);
	Построитель.ЗаполнитьНастройки();
	Построитель.Вывести(ТабДок);
	
	Возврат ТабДок
	
КонецФункции

#КонецОбласти // Табличный_документы

#Область CSV

Функция СохранитьЗначениеCSV(Значение) Экспорт
	
	Запись = Новый ТекстовыйДокумент;
	
	КолвоКолонок = Значение.Колонки.Количество() - 1;
	Для Каждого Строка Из Значение Цикл 
		
		СтрБуфер = Неопределено;
		
		Для Инд = 0 По КолвоКолонок Цикл 
			
			Если СтрБуфер = Неопределено Тогда
				СтрБуфер = Строка(Строка[Инд]);
			Иначе
				СтрБуфер = СтрБуфер + ";" + Строка(Строка[Инд]);
			КонецЕсли; 
		КонецЦикла;
		
		Запись.ДобавитьСтроку(СтрБуфер);
		
	КонецЦикла;
	
	Возврат Запись.ПолучитьТекст();

КонецФункции // СохранитьЗначение()

Функция ЗагрузитьЗначениеCSV(Строка, Тип) Экспорт 
	
	
	Если ТипЗнч(Строка) = Тип("Строка") Тогда
		
		Поток = Новый ПотокВПамяти;
		Запись = Новый ЗаписьДанных(Поток);
		Запись.ЗаписатьСтроку(Строка);
		Запись.Закрыть();
		
		Поток.Перейти(0, ПозицияВПотоке.Начало);
		
		Чтение = Новый ЧтениеТекста(Поток);
		
	ИначеЕсли ТипЗнч(Строка) = Тип("ДвоичныеДанные") Тогда 
		
		Чтение = Новый ЧтениеТекста(Строка.ОткрытьПотокДляЧтения());
	
	КонецЕсли;
	
	Таблица = Новый ТаблицаЗначений;
	
	Пока Истина Цикл 
		
		Строка = Чтение.ПрочитатьСтроку();
		
		Если Строка = Неопределено Тогда 
			
			Прервать;
			
		КонецЕсли;
		
		Значения = СтрРазделить(Строка, ";", Истина);
		
		Пока Таблица.Колонки.Количество() < Значения.Количество() Цикл 
			
			Таблица.Колонки.Добавить("Колонка" + (Таблица.Колонки.Количество() + 1), Новый ОписаниеТипов("Строка"));
			
		КонецЦикла;
		
		СтрТаблицы = Таблица.Добавить();
		
		Для инд = 0 по Значения.Количество() - 1 Цикл 
			
			СтрТаблицы[инд] = Значения[инд];
			
		КонецЦикла;
		
	КонецЦикла;
	
	Чтение.Закрыть();
	
	Возврат Таблица;

КонецФункции // ЗагрузитьЗначение

#КонецОбласти // CSV

#Область XML

Функция СохранитьЗначениеXML(Значение) Экспорт

	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	
	Возврат Запись.Закрыть();

КонецФункции // СохранитьЗначение()

Функция ЗагрузитьЗначениеXML(Строка, Тип) Экспорт 
	
	Чтение = Новый ЧтениеXML;
	
	Если ТипЗнч(Строка) = Тип("Строка") Тогда
		
		Чтение.УстановитьСтроку(Строка);
		
	ИначеЕсли ТипЗнч(Строка) = Тип("ДвоичныеДанные") Тогда 
		
		 Чтение.ОткрытьПоток(Строка.ОткрытьПотокДляЧтения());
		 
	КонецЕсли;
	
	Значение = СериализаторXDTO.ПрочитатьXML(Чтение, Тип);
	
	Чтение.Закрыть();
	
	Возврат Значение;

КонецФункции // ЗагрузитьЗначение

#КонецОбласти // XML

#Область JSON

Функция СохранитьЗначениеJSON(Значение) Экспорт

	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	
	СериализаторXDTO.ЗаписатьJSON(Запись, Значение);
	
	Возврат Запись.Закрыть();

КонецФункции // СохранитьЗначение()

Функция ЗагрузитьЗначениеJSON(Строка, Тип) Экспорт 
	
	Чтение = Новый ЧтениеJSON;
	
	Если ТипЗнч(Строка) = Тип("Строка") Тогда
		
		Чтение.УстановитьСтроку(Строка);
		
	ИначеЕсли ТипЗнч(Строка) = Тип("ДвоичныеДанные") Тогда 
		
		 Чтение.ОткрытьПоток(Строка.ОткрытьПотокДляЧтения());
		 
	КонецЕсли;
	
	Значение = СериализаторXDTO.ПрочитатьJSON(Чтение, Тип);
	
	Чтение.Закрыть();
	
	Возврат Значение;

КонецФункции // ЗагрузитьЗначение

#КонецОбласти // JSON