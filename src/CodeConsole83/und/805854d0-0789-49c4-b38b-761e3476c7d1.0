{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},1,3d3cb80c-508b-41fa-8a18-680cdf5f1712,
{10,
{1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"Декорация1",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2Fy
ZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAARpJREFUeNrE0z9LQlEYx/Fr/gXdJILe
gSQJEk13yrUxxDFwUhqagyAEF8E34BsIFKlozpqao8K9WVrCJSWu30d+F44SOjj4
wId77nPOeTjn3HMjQRB4m8SOt2Fsv0CE8HleYoRdnGEPF8jhB4+4xw0ONLc7R4E7
VJBX23JNtJBFSflD9YXjrT3fQhxpfKqqRQEf+MaLxuTVF3e3bo02yjjBrTMojD+9
R52+sO3F8KxC13YmeELCHbT0vtBnE6ua1EfDGZRQO7qiQNEK1LiNRzynSKpjCJ+8
fY1T5d/VZ+2Y5nQs8YVXPW01+zjGg3JvuFK+q1yoZ3tOaVnJpcOzqOtwzzF28rba
X0zWXbQMBvqc/r83cet/40yAAQCHjz1eQkhXqAAAAABJRU5ErkJggg==}
},0,""},0,0,0,
{1,0},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{0,1,0}
},1,
{21,
{2,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"Декорация1КонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,2,
{1,
{1,0},0},0,1,
{10,
{3,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"Декорация1РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,0,0,1,0,3,3},"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0},"#Область База

&НаКлиенте
Перем Ядро;

&НаКлиенте
Функция Инициализировать(пЯдро) Экспорт 
	
	Ядро = пЯдро;
	
	Возврат ОписаниеПлагина();
	
КонецФункции

&НаКлиенте
Функция Уничтожить() Экспорт
	
	Ядро = Неопределено;
	
КонецФункции

&НаКлиенте
Функция ОписаниеПлагина() Экспорт 
	
	Описание = Новый Структура;
	Описание.Вставить(""Имя"", ""SQL"");
	Описание.Вставить(""Представление"", ""SQL"");
	Описание.Вставить(""Ключ"", ""SQL"");
	
	Описание.Вставить(""Функциональность"", Новый Массив);
	Описание.Функциональность.Добавить(Ядро.БазовыеОперации.ВыполнениеСкрипта);
	
	Описание.Вставить(""Подключение"", ""ФормаSQL"");
	Описание.Вставить(""КодТипа"", 3);
	Описание.Вставить(""Выполнение"", Истина);
	Описание.Вставить(""КлиентСервер"", Истина);
	Описание.Вставить(""Иконка"", Элементы.Декорация1.Картинка);
	Описание.Вставить(""Команды"", Новый Массив);
	Описание.Команды.Добавить(Новый Структура(""Имя, ИмяКоманды, Действие"", ""УстановитьСоединение"", ""УстановитьСоединение"", ""ВыполнитьКомандуПлагина""));
	
	Возврат Описание;
	
КонецФункции // ОписаниеПлагина

&НаКлиенте
Функция ЕстьПоддержкаФункционала(Функционал, Параметры) Экспорт 
	
	Возврат Функционал = Ядро.БазовыеОперации.ВыполнениеСкрипта;
	
КонецФункции // ЕстьПоддержкаФункционала

#КонецОбласти // База

&НаКлиенте
Функция УстановитьСоединение() Экспорт 
	
	Данные = Новый Массив;
	Провайдеры = Новый СписокЗначений;
	Провайдеры.Добавить(""SQLOLEDB.1"");
	Провайдеры.Добавить(""SQLNCLI10"");
	Провайдеры.Добавить(""SQLNCLI11"");
	
	Данные.Добавить(Новый Структура(""Имя, Тип, Обязательное, СписокВыбора, РежимВыбораИзСписка"", ""Провайдер"", ""Строка"", Истина, Провайдеры, Истина));
	Данные.Добавить(Новый Структура(""Имя, Тип, Обязательное"", ""Сервер"", ""Строка"", Истина));
	Данные.Добавить(Новый Структура(""Имя, Тип, Обязательное"", ""БазаДанных"", ""Строка"", Ложь));
	Данные.Добавить(Новый Структура(""Имя, Тип, Обязательное"", ""Пользователь"", ""Строка"", Ложь));
	Данные.Добавить(Новый Структура(""Имя, Тип, Обязательное"", ""Пароль"", ""Строка"", Ложь));
	Данные.Добавить(Новый Структура(""Имя, Тип, Обязательное, Вид"", ""АвторизацияWindows"", ""Булево"", Ложь, ""ПолеФлажка""));
	
	ПараметрыОткрытия = Новый Структура(""ОписаниеДанных, Заголовок"", Данные, ""Настройки подключения"");
	ОписаниеОповещения = Новый ОписаниеОповещения(""СохранитьПараметрыПодключения"", ЭтаФорма);
	ОткрытьФорму(""ВнешняяОбработка.CodeConsole83.Форма.ФормаВводаДанных"", ПараметрыОткрытия, ВладелецФормы, УникальныйИдентификатор, , , ОписаниеОповещения);
	
КонецФункции

&НаКлиенте
Процедура СохранитьПараметрыПодключения(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыСтрокиПодключения = Новый Структура;
	ПараметрыСтрокиПодключения.Вставить(""Провайдер"", ""Provider"");
	ПараметрыСтрокиПодключения.Вставить(""Сервер"", ""Data Source"");
	ПараметрыСтрокиПодключения.Вставить(""БазаДанных"", ""Initial Catalog"");
	ПараметрыСтрокиПодключения.Вставить(""Пользователь"", ""User ID"");
	ПараметрыСтрокиПодключения.Вставить(""Пароль"", ""Pwd"");
	ПараметрыСтрокиПодключения.Вставить(""АвторизацияWindows"", ""Trusted_Connection"");
	
	ПараметрыПодключения = Новый Соответствие;
	
	Для Каждого Эл ИЗ РезультатЗакрытия Цикл 
		
		Если ЗначениеЗаполнено(Эл.Значение) Тогда 
			ПараметрыПодключения.Вставить(ПараметрыСтрокиПодключения[эл.Ключ], Эл.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыПодключения.Получить(""Trusted_Connection"") = Истина Тогда 
		ПараметрыПодключения.Вставить(""Trusted_Connection"", ""yes"");
	Иначе
		ПараметрыПодключения.Удалить(""Trusted_Connection"");
	КонецЕсли;
	
	ВладелецФормы.ХранилищеПараметров.Вставить(""ПараметрыПодключенияSQL"", ПараметрыПодключения);
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьЗапрос(Знач Текст, Знач ПараметрыВыполнения, Знач НастройкиВыполнения, Знач АдресРезультата) Экспорт 
	
	Перем ПараметрыСоединения;
	
	Если НЕ ВладелецФормы.ХранилищеПараметров.Свойство(""ПараметрыПодключенияSQL"", ПараметрыСоединения) ИЛИ ПараметрыСоединения = Неопределено Тогда 
		Возврат Новый Структура(""Выполнено, Описание"", Ложь, ""Не установлено соединение"");
	КонецЕсли;
	
	Результат = ВыполнитьЗапросНаСервере(Текст, ПараметрыВыполнения, ПараметрыСоединения, УникальныйИдентификатор);
	
	Возврат Результат;
	 
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьЗапросНаСервере(Знач ТекстЗапроса, Знач ПарамтерыЗапроса, Знач ПараметрыСоединения, Знач УникальныйИдентификатор)
	
	Результат = ВыполнитьЗапросSQL(ТекстЗапроса, ПарамтерыЗапроса, ПараметрыСоединения);
	
	Если НЕ Результат.Выполнено Тогда 
		Возврат Результат;
	КонецЕсли;
	
	АдресДанных = ПоместитьВоВременноеХранилище(Результат.Данные[0], УникальныйИдентификатор);
	
	Результат.Вставить(""Данные"", АдресДанных);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСоединение(ПараметрыСоединения)
	
	Если ПараметрыСоединения[""Соединение""] <> Неопределено Тогда 
		Возврат ПараметрыСоединения[""Соединение""];
	КонецЕсли;
	
	СтрокаСоединения = """";
	
	Для Каждого Параметр Из ПараметрыСоединения Цикл 
		
		СтрокаСоединения = СтрокаСоединения + СтрШаблон(""%1=%2; "", Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
		
	Соединение = Новый COMОбъект(""ADODB.Connection"");
	Соединение.Open(СтрокаСоединения);
	
	ПараметрыСоединения.Вставить(""Соединение"", Соединение);
	
	Возврат Соединение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьЗапросSQL(ТекстЗапроса, ПарамтерыЗапроса, ПараметрыСоединения)
	
	Соединение = ПолучитьСоединение(ПараметрыСоединения);
		
	РезультатЗапроса = ПолучитьРезультатЗапроса(Соединение, ТекстЗапроса);
	
	Результат = ЗагрузитьРезультатЗапроса(РезультатЗапроса);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьРезультатЗапроса(Соединение, ТекстЗапроса)
	
	Command = Новый COMОбъект(""ADODB.Command"");
	
	RecordSet=Новый COMОбъект(""ADODB.Recordset"");
    RecordSet.CursorLocation=3;
    RecordSet.LockType=2;	
	RecordSet.Open(ТекстЗапроса, Соединение);
	
	Если RecordSet.EOF() and RecordSet.BOF() then
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат RecordSet;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗагрузитьРезультатЗапроса(Знач RecordSet)
	
	мРезультаты = Новый Массив;
	
	Пока RecordSet <> Неопределено Цикл 
		
		РезльтатТаблица = ЗагрузитьТаблицу(RecordSet);
		Если РезльтатТаблица.Выполнено Тогда 
			мРезультаты.Добавить(РезльтатТаблица.Данные);
		Иначе
			Возврат РезльтатТаблица;
		КонецЕсли;
		RecordSet = RecordSet.NextRecordset();
		
	КонецЦикла;
	
	Результат = Новый Структура(""Выполнено, Описание"", Истина);
	Результат.Вставить(""Данные"", мРезультаты);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗагрузитьТаблицу(RecordSet)
	
	Результат = Новый Структура(""Выполнено, Описание"", Истина);
	
	#Если Сервер Тогда

	КоличествоКолонок = RecordSet.Fields.Count - 1;	
	РезультатТЗ = new ТаблицаЗначений;
	ДвДанные = 205;
	Для i = 0 По КоличествоКолонок Цикл
		Массив = new Массив;
		Массив.Add(ПолучитьТип(RecordSet.Fields(i).Type));
		name = RecordSet.Fields(i).name;
		Если ПустаяСтрока(name) Тогда 
			name = ""col"" + i; 
		КонецЕсли;
		Если Массив[0] = Тип(""ДвоичныеДанные"") Тогда 
			РезультатТЗ.Columns.Add(name);
		Иначе
			РезультатТЗ.Columns.Add(name, new ОписаниеТипов(Массив));
		КонецЕсли;
	КонецЦикла;
	RecordSet.MoveFirst();
	Пока  not (RecordSet.EOF() or RecordSet.BOF()) Цикл
		row = РезультатТЗ.Add();
		Для i = 0 По КоличествоКолонок Цикл 
			value = RecordSet.Fields(i).Value;
			Если value = Null then
				continue;
			ИначеЕсли ТипЗнч(value) = Тип(""COMSafeArray"") Тогда
				Type = RecordSet.Fields(i).Type;
				Если Type = 205 or Type = 128 then
					value = ПолучитьДвДанные(value);
				Иначе	
					value = value.Выгрузить();
				КонецЕсли;
				
			Иначе
			КонецЕсли;
			row[i] = Value;
		КонецЦикла;
		RecordSet.MoveNext();
	КонецЦикла;
	
	Результат.Вставить(""Данные"", РезультатТЗ);
	
	#Иначе
		
	#КонецЕсли

	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТип(ТипADO)
	Если 	ТипADO = 20 ИЛИ
			ТипADO = 14 ИЛИ
			ТипADO = 5 ИЛИ
			ТипADO = 3 ИЛИ
			ТипADO = 131 ИЛИ
			ТипADO = 4 ИЛИ
			ТипADO = 2 ИЛИ
			ТипADO = 16 ИЛИ
			ТипADO = 21 ИЛИ
			ТипADO = 19 ИЛИ
			ТипADO = 18 ИЛИ
			ТипADO = 17 ИЛИ
			ТипADO = 139
		Тогда 
		Возврат Тип(""Число"");
	ИначеЕсли 
			ТипADO = 8 ИЛИ
			ТипADO = 129 ИЛИ
			ТипADO = 203 ИЛИ
			ТипADO = 201 ИЛИ
			ТипADO = 200 ИЛИ
			ТипADO = 202 ИЛИ
			ТипADO = 130 
		Тогда 
		Возврат Тип(""Строка"");
	ИначеЕсли 
			ТипADO = 11
		Тогда 
		Возврат Тип(""Булево"");
	ИначеЕсли 
			ТипADO = 133 ИЛИ
			ТипADO = 7 ИЛИ
			ТипADO = 137 ИЛИ
			ТипADO = 34 ИЛИ
			ТипADO = 134 ИЛИ
			ТипADO = 135
		Тогда 
		Возврат Тип(""Дата"");
	ИначеЕсли 
			ТипADO = 128 ИЛИ
			ТипADO = 204 ИЛИ
			ТипADO = 205
		Тогда 
		Возврат Тип(""ДвоичныеДанные"");
	ИначеЕсли 
			ТипADO = 0
		Тогда 
		Возврат Тип(""Неопределено"");
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДвДанные(ЗначениеADO)
	
	Если ТипЗнч(ЗначениеADO) = Тип(""COMSafeArray"") Тогда
		Если ЗначениеADO.GetLength() > 1500 Тогда 
			Возврат ПолучитьДвоичныеДанныеИзCOMSafeArray_Msxml2(ЗначениеADO);
		Иначе
			Возврат ПолучитьДвоичныеДанныеИзCOMSafeArray_Буфер(ЗначениеADO);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДвоичныеДанныеИзCOMSafeArray_Буфер(COMSafeArray)
	
	Массив = COMSafeArray.Выгрузить();
	
	Буфер = новый БуферДвоичныхДанных(Массив.Количество());
	Для инд = 0 по Массив.Количество() - 1 Цикл
		Буфер.Установить(инд, Массив[инд]);	
	КонецЦикла;
	
	Поток = новый ПотокВПамяти(Буфер);
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДвоичныеДанныеИзCOMSafeArray_Msxml2(COMSafeArray)
	
	дом                		= Новый COMОбъект(""Msxml2.DOMDocument"");
    элДом            		= дом.createElement(""tmp"");
    элДом.datatype    		= ""bin.base64"";
    элДом.nodeTypedvalue 	= COMSafeArray;
    Возврат ПолучитьДвоичныеДанныеИзBase64Строки(элДом.Text);
	
КонецФункции

",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",4ad458ad-238c-4899-8046-e0f8c829ebe2}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxvdXRwdXRQ
YXJhbWV0ZXJzLz4NCjwvU2V0dGluZ3M+}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}