Перем Плагины;

Перем БазовыеОперации Экспорт ;

Перем ФункциональностьПлагинов;

// ВнешниеОбработки.Создать("CodeConsole83").ПоместитьЗапросВоВременноеХранилище(Запрос);

Функция Инициализировать(МассивАдресовОбработок, УникальныйИдентификатор) Экспорт 
	
	ПлагиныЗагрузить(МассивАдресовОбработок);
	
	Возврат СохранитьСостояние(УникальныйИдентификатор);
	
КонецФункции

Функция ДоступнаяФункциональность() Экспорт 
	
	Возврат ВыгрузитьЗначения(ФункциональностьПлагинов, "Ключ");
	
КонецФункции

Функция Уничтожить() Экспорт 
	
	УничтожитьПлагины();
	
КонецФункции

Функция ПоместитьЗапрос(Запрос, Знач Адрес = Неопределено) Экспорт 
	
	Если Адрес = Неопределено Тогда 
		Адрес = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ПолучитьДанныеЗапроса(Запрос), Адрес);
	
КонецФункции

Функция ПоместитьЗапросСКД(СхемаКомпоновкиДанных, Настройки, Знач Адрес = Неопределено) Экспорт 
	
	Если Адрес = Неопределено Тогда 
		Адрес = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ПолучитьДанныеЗапросаСКД(СхемаКомпоновкиДанных, Настройки), Адрес);
	
КонецФункции

Функция ПолучитьДанныеЗапроса(Запрос) Экспорт 
	
	#Если Клиент Тогда
		Запрос = Новый Запрос;
	#КонецЕсли	
	
	ДанныеЗапроса = Новый Структура("Текст, Параметры");

	ЗаполнитьЗначенияСвойств(ДанныеЗапроса, Запрос);
		
	Если Запрос.МенеджерВременныхТаблиц <> Неопределено Тогда 
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		
		ВременныеТаблицыЗапроса = Новый Соответствие;
		Для Каждого Пакет Из СхемаЗапроса.ПакетЗапросов Цикл 
			
			Если ЗначениеЗаполнено(Пакет.ТаблицаДляПомещения) Тогда 
				
				ВременныеТаблицыЗапроса.Вставить(ВРег(Пакет.ТаблицаДляПомещения), Истина);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстыУстановкиВТ = "";
		
		
		Для каждого Таблица Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл 
			
			Если ВременныеТаблицыЗапроса[ВРег(Таблица.ПолноеИмя)] = Неопределено Тогда 
				
				ДанныеЗапроса.Параметры.Вставить(Таблица.ПолноеИмя, Таблица.ПолучитьДанные().Выгрузить());
				ТекстыУстановкиВТ = ТекстыУстановкиВТ + СтрШаблон("ВЫБРАТЬ * ПОМЕСТИТЬ %1 ИЗ &%1%2;%2", Таблица.ПолноеИмя, Символы.ПС);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеЗапроса.Текст = ТекстыУстановкиВТ + ДанныеЗапроса.Текст;
		
	КонецЕсли;
	
	Возврат ДанныеЗапроса;
	
КонецФункции

Функция ПолучитьДанныеЗапросаСКД(СхемаКомпоновкиДанных, Знач Настройки) Экспорт 
	
	Настройки = ПолучитьНастройки(Настройки);
	
	#Если Клиент Тогда
	    Схема = Новый СхемаКомпоновкиДанных; 	
	    Настройки = Новый НастройкиКомпоновкиДанных; 	
	#КонецЕсли
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ?(Настройки = Неопределено, СхемаКомпоновкиДанных.НастройкиПоУмолчанию, Настройки));
	
	ДанныеЗапроса = Новый Структура("Текст, Параметры", "", Новый Структура);

	ДанныеЗапроса.Текст = МакетКомпоновки.НаборыДанных[0].Запрос;
	
	Для Каждого Параметр Из МакетКомпоновки.ЗначенияПараметров Цикл 
				
		ДанныеЗапроса.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
		
	КонецЦикла;
	
	Возврат ДанныеЗапроса;
	
КонецФункции

Функция ПолучитьНастройки(Компановщик)
	
	ТипКомпановщика = ТипЗнч(Компановщик);
	
	Если ТипКомпановщика = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда 

		Возврат Компановщик.ПолучитьНастройки();
		
	ИначеЕсли ТипКомпановщика = Тип("СхемаКомпоновкиДанных") Тогда 
		
		Возврат Компановщик.НастройкиПоУмолчанию;
		
	ИначеЕсли ТипКомпановщика = Тип("НастройкиКомпоновкиДанных") Тогда 
		
		Возврат Компановщик;
		
	ИначеЕсли ТипКомпановщика = Тип("ДинамическийСписок") Тогда
		
		Возврат Компановщик.КомпоновщикНастроек.Настройки;
		
	иначе 
		Возврат Неопределено; 
	КонецЕсли;
КонецФункции

#Область Работа_с_формой

процедура СоздатьКолонкиТЗ(Форма, ИмяТаблицы, Колонки) Экспорт 
	
	МассивРеквизитов = Новый Массив;
	
	Для Каждого Колонка из Колонки Цикл
		Если Колонка.Имя = "_Служебная" Тогда 
			Продолжить;
		КонецЕсли;
		
		РеквизитФормы = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяТаблицы);
		МассивРеквизитов.Добавить(РеквизитФормы);
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
	ЭлементТаблица = Форма.Элементы[ИмяТаблицы];
	Для Каждого Колонка из Колонки цикл
		
		Если Колонка.Имя = "_Служебная" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ИмяКолонки = ИмяТаблицы + Колонка.Имя;
		Элемент = Форма.Элементы.Найти(ИмяКолонки);
		
		Если Элемент = Неопределено Тогда
			
			Элемент = Форма.Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ЭлементТаблица);

			Элемент.ПутьКДанным = СтрШаблон("%1.%2", ИмяТаблицы, Колонка.Имя);

		КонецЕсли;
		
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок = Колонка.Имя;
		
	КонецЦикла;
	
	Если Форма.Элементы.Найти(ИмяТаблицы + "_Служебная") <> Неопределено Тогда 
		
		Форма.Элементы[ИмяТаблицы + "_Служебная"].Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьКолонкиТЗ(Форма, ИмяТаблицы, Колонки) Экспорт 
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	Для Каждого Колонка из Колонки цикл
		Если Колонка.Имя = "_Служебная" Тогда 
			Продолжить;
		КонецЕсли;
		
		МассивУдаляемыхРеквизитов.Добавить(СтрШаблон("%1.%2", ИмяТаблицы, Колонка.Имя));
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
	
	Для Каждого Колонка из Колонки цикл
		
		Если Колонка.Имя = "_Служебная" Тогда 
			Продолжить;
		КонецЕсли;
		
		ИмяКолонки = ИмяТаблицы + Колонка.Имя;
		Элемент = Форма.Элементы.Найти(ИмяКолонки);
		Форма.Элементы.Удалить(Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьКолонкиТЗ(Форма, ИмяТаблицы, СтарыеКолонки, НовыеКолонки) Экспорт 
	
	УдалитьКолонкиТЗ(Форма, ИмяТаблицы, СтарыеКолонки);
	СоздатьКолонкиТЗ(Форма, ИмяТаблицы, НовыеКолонки);
	
	Возврат;
	
	ДобавляемыеКолонки = Новый Массив;
	УдаляемыеКолонки = Новый Массив;
	
	СоответствиеСтарые = ВСоответствие(СтарыеКолонки, "Имя");
	СоответствиеНовые = ВСоответствие(НовыеКолонки, "Имя");
	
	Для Каждого Колонка Из СтарыеКолонки Цикл 
		
		НайденнаяКолонка = СоответствиеНовые.Получить(Колонка.Имя);
		
		Если НайденнаяКолонка = Неопределено ИЛИ НайденнаяКолонка.ТипЗначения <> Колонка.ТипЗначения Тогда 
			
			УдаляемыеКолонки.Добавить(Колонка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Колонка Из НовыеКолонки Цикл 
		
		НайденнаяКолонка = СоответствиеСтарые.Получить(Колонка.Имя);
		
		Если НайденнаяКолонка = Неопределено ИЛИ НайденнаяКолонка.ТипЗначения <> Колонка.ТипЗначения Тогда 
			
			ДобавляемыеКолонки.Добавить(Колонка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если УдаляемыеКолонки.Количество() Тогда 
		УдалитьКолонкиТЗ(Форма, ИмяТаблицы, УдаляемыеКолонки);
	КонецЕсли;
	Если ДобавляемыеКолонки.Количество() Тогда 
		СоздатьКолонкиТЗ(Форма, ИмяТаблицы, ДобавляемыеКолонки);
	КонецЕсли;
	
	УпорядочитьЭлементы(Форма.Элементы[ИмяТаблицы].ПодчиненныеЭлементы, НовыеКолонки);
	
КонецПроцедуры

Процедура УпорядочитьЭлементы(Элементы, Колонки)
	
	Для Порядок = 0 По Колонки.Количество() - 1 Цикл 
		
		Элемент = Элементы.Найти(Колонки[Порядок]);
		ИндексЭлемента = Элементы.Индекс(Элемент);
		
		Если Порядок <> ИндексЭлемента Тогда 
			
			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти //Работа_с_формой

#Область Плагины

Функция ПлагиныЗагрузить(МассивАдресовОбработок) Экспорт 
	
	ФункциональностьПлагинов = Новый Соответствие;
	Плагины = Новый Соответствие;
	
	Для Каждого Файл из МассивАдресовОбработок Цикл 
		
		Попытка
			
			ИмяПлагина = Неопределено;
			ИмяПлагина = ВнешниеОбработки.Подключить(Файл);
			Плагин = ВнешниеОбработки.Создать(ИмяПлагина);
			
			ОписаниеПлагина = Плагин.Инициализировать(ЭтотОбъект);
			Плагины.Вставить(ИмяПлагина, Плагин);
								
			Для Каждого Функциональность Из ОписаниеПлагина.Функциональность Цикл 
				
				Если ФункциональностьПлагинов[Функциональность] = Неопределено Тогда 
					
					ФункциональностьПлагинов.Вставить(Функциональность, Новый Массив);
					
				КонецЕсли;
				
				ФункциональностьПлагинов[Функциональность].Добавить(Плагин);
				
			КонецЦикла;
			
		Исключение
			
			Сообщить(СтрШаблон("Загрузка плагинов. [%1]%2%3", ИмяПлагина, Символы.ПС, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецФункции

Функция УничтожитьПлагины()
	
	Для Каждого Плагин Из Плагины Цикл 
		
		Попытка
			Плагин.Значение.Уничтожить();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	Плагины.Очистить();
	ФункциональностьПлагинов.Очистить();
	
КонецФункции

Функция СохранитьСостояние(АдресДанных) Экспорт 
	
	Состояние = Новый Структура("Плагины, ФункциональностьПлагинов", Плагины, ФункциональностьПлагинов);
	
	Возврат ПоместитьВоВременноеХранилище(Состояние, АдресДанных);
	
КонецФункции // СохранитьСостояние

Функция ВосстановитьСостояние(АдресДанных) Экспорт 
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресДанных) Тогда 
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Состояние = ПолучитьИзВременногоХранилища(АдресДанных);
	Плагины = Состояние.Плагины;
	ФункциональностьПлагинов = Состояние.ФункциональностьПлагинов;
	
КонецФункции // ВосстановитьСостояние

Функция ПолучитьПлагин(Функционал, Параметры)
	
	ДоступныеПлагины = ФункциональностьПлагинов[Функционал];
	
	Если ДоступныеПлагины = Неопределено Тогда 
		
		Ошибка("Поиск плагина", СтрШаблон("Функиональность ""%1"" не поддерживается. Не удалось найти подходящий плагин", Функционал), Функционал);
		Возврат Неопределено;
		
	КонецЕсли;
	
	Для каждого Плагин Из ДоступныеПлагины Цикл
		
		Если Плагин.ЕстьПоддержкаФункционала(Функционал, Параметры) Тогда 
			
			Возврат Плагин;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Ошибка("Поиск плагина", СтрШаблон("Не поддерживается ""%1"". С параметрами %2", Функционал, ЗначениеВСтроку(Параметры)), Функционал);
	
КонецФункции

Функция ПолучитьПлагины(Функционал, Параметры)
	
	ДоступныеПлагины = ФункциональностьПлагинов[Функционал];
	
	Если ДоступныеПлагины = Неопределено Тогда 
		
		Ошибка("Поиск плагина", СтрШаблон("Функиональность ""%1"" не поддерживается. Не удалось найти подходящих плагинов", Функционал), Функционал);
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры) Тогда 
		
		Возврат ДоступныеПлагины;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Для каждого Плагин Из ДоступныеПлагины Цикл
		
		Если Плагин.ЕстьПоддержкаФункционала(Функционал, Параметры) Тогда 
			
			Результат.Добавить(Плагин);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Результат.Количество() Тогда 		
	
		Ошибка("Поиск плагина", СтрШаблон("Не поддерживается ""%1"". С параметрами %2", Функционал, ЗначениеВСтроку(Параметры)), Функционал);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Плагин(ИмяПлагина) Экспорт 
	
	Возврат Плагины[ИмяПлагина];
	
КонецФункции

#КонецОбласти //Плагины

#Область Сериализация

Функция СохранитьЗначение(Знач Значение, Формат) Экспорт 
	
	Если ЭтоАдресВременногоХранилища(Значение) Тогда 
		
		Значение = ПолучитьИзВременногоХранилища(Значение);
		
	КонецЕсли;
	
	Тип = ТипЗнч(Значение);
	
	Плагин = ПолучитьПлагин(БазовыеОперации.Сохранить, Новый Структура("Тип, Формат", Тип, Формат));
	
	Если Плагин = Неопределено Тогда 
		
		Возврат Новый Структура("Выполнено, Описание", Ложь, "Не удалось найти плагин");;
		
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Плагин.СохранитьЗначение(Значение, Формат));
	
КонецФункции

Функция ЗагрузитьЗначение(Знач Данные, Формат, Тип) Экспорт 

	Если ЭтоАдресВременногоХранилища(Данные) Тогда 
		
		Данные = ПолучитьИзВременногоХранилища(Данные);
		
	КонецЕсли;
	
	Плагин = ПолучитьПлагин(БазовыеОперации.Загрузить, Новый Структура("Тип, Формат", Тип, Формат));
	
	Если Плагин = Неопределено Тогда 
		
		ВызватьИсключение СтрШаблон("Не поддерживается загрузка ""%1"" в формате ""%2""", Тип, Формат);
		
	КонецЕсли;
	
	Возврат Плагин.ЗагрузитьЗначение(Данные, Формат, Тип);

КонецФункции // ЗагрузитьЗначение()

Функция ПолучитьФорматыСериализации(Операция, Тип) Экспорт 
	
	Форматы = Новый Соответствие;
	ДоступныеПлагины = ПолучитьПлагины(Операция, Новый Структура("Тип", Тип));
	Если ДоступныеПлагины = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Плагин Из ДоступныеПлагины Цикл
		
		Для Каждого Формат Из Плагин.ПолучитьФорматыСериализации(Операция, Тип) Цикл 
			
			Форматы.Вставить(Формат.Ключ, Формат.Значение);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Форматы;
	
КонецФункции

#КонецОбласти //Сериализация

#Область Универсальные_коллекции

Функция ВыгрузитьЗначения(Знач Коллекция, Знач ИмяРеквизита) Экспорт 
	
	Массив = Новый Массив;
	
	Для Каждого Стр Из Коллекция Цикл 
		
		Массив.Добавить(Стр[ИмяРеквизита]);
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция ДополнитьСтруктуру(Знач Структура, Знач Дополнение, Знач Ключи = Неопределено) Экспорт 
	
	Если Ключи = Неопределено Тогда 
	
		Для Каждого Эл Из Дополнение Цикл 
			
			Структура.Вставить(Эл.Ключ, Эл.Значение);	
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Ключ Из Ключи Цикл 
			
			Структура.Вставить(Ключ, Дополнение[Ключ]);	
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

Функция Скопировать(Знач Источник, Знач Приемник) Экспорт 
	
	ТипЗ = ТипЗнч(Источник);
	
	Если ТипЗ = Тип("Структура") ИЛИ ТипЗ = Тип("Соответствие") Тогда 
		
		Для Каждого Эл Из Источник Цикл 
			
			Приемник.Вставить(Эл.Ключ, Эл.Значение);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗ = Тип("СписокЗначений") Тогда 
		
		Для Каждого Эл Из Источник Цикл 
			ЗаполнитьЗначенияСвойств(Приемник.Добавить(), Эл);
		КонецЦикла;
	#Если Сервер Тогда
	ИначеЕсли ТипЗ = Тип("ДеревоЗначений") ИЛИ ТипЗ = Тип("СтрокаДереваЗначений") ИЛИ ТипЗ = Тип("ДанныеФормыКоллекция") Тогда
	#ИначеЕсли Клиент Тогда
	ИначеЕсли ТипЗ = Тип("ДанныеФормыКоллекция") ИЛИ ТипЗ = Тип("ДанныеФормыЭлементДерева") Тогда
	#КонецЕсли
	
		ПриемникКоллекция = ПолучитьКоллекцию(Приемник);
		ИсточникКоллекция = ПолучитьКоллекцию(Источник);
		
		Для Каждого стр из ИсточникКоллекция Цикл 
			
			нСтр = ПриемникКоллекция.Добавить();
			ЗаполнитьЗначенияСвойств(нСтр,стр);
			Скопировать(стр, нСтр);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКоллекцию(Объект) Экспорт 
	
	Тип = ТипЗнч(Объект);
	
	Если Тип = Тип("ДанныеФормыДерево") ИЛИ Тип = Тип("ДанныеФормыЭлементДерева") Тогда 
		
		Возврат Объект.ПолучитьЭлементы();
		
	КонецЕсли;
	
	#Если Сервер Тогда
	Если Тип = Тип("ДеревоЗначений") или Тип = Тип("СтрокаДереваЗначений") Тогда
		Возврат Объект.Строки;
	КонецЕсли;
	#КонецЕсли	
	
	Возврат Объект;
	
КонецФункции

Функция НайтиВДеревеФормы(Знач ЭлементыДерева, Знач Реквизит, Знач Значение) Экспорт 
	
	Для Каждого Элемент Из ЭлементыДерева Цикл 
		
		Если Элемент[Реквизит] = Значение Тогда 
			
			Возврат Элемент;
			
		Иначе
			
			НСТр = НайтиВДеревеФормы(Элемент.ПолучитьЭлементы(), Реквизит, Значение);
			
			Если НСТр <> Неопределено Тогда 
				
				Возврат НСТр;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ДеревоВСписок(Дерево, Список = Неопределено)
	
	Если Список = Неопределено Тогда 
		Список = Новый Массив;
	КонецЕсли;
	
	Для Каждого Стр Из Дерево.ПолучитьЭлементы() Цикл 
		
		Список.Добавить(Стр);
		ДеревоВСписок(Стр, Список);
		
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

Функция ЗначениеЗапросом(Знач Текст, Знач Параметры) Экспорт 
	Запрос = Новый Запрос(Текст);
	ДополнитьСтруктуру(Запрос.Параметры, Параметры);

	Результат = Запрос.Выполнить();

	Возврат ЗначениеИзРезультатаЗапроса(Результат);

КонецФункции

Функция ЗначениеИзРезультатаЗапроса(Знач Результат, Знач ЗначениеПоумолчания = Неопределено, Знач ИмяРеквизита = 0) Экспорт 

	Если Результат.Пустой() Тогда 
		Возврат ЗначениеПоумолчания;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Выборка.Следующий();

	Возврат Выборка[ИмяРеквизита];

КонецФункции

Функция СоздатьТаблицуИзКоллекции(Знач Колонки, Знач Коллекция) 
	
	Таблица = Новый ТаблицаЗначений;
	
	Количество = Коллекция.Количество();
	
	Для инд = 1 По Количество Цикл 
		
		Таблица.Добавить();
		
	КонецЦикла;
	
	Для Каждого Колонка Из СтрРазделить(Колонки, ",") Цикл 
		
		Колонка = СокрЛП(Колонка);
		
		Значения = ВыгрузитьЗначения(Коллекция, Колонка);
		
		МассивТипов = Новый Массив;
		Для Каждого Значение Из Значения Цикл 
			
			Если МассивТипов.Найти(ТипЗнч(Значение)) = Неопределено Тогда 
				МассивТипов.Добавить(ТипЗнч(Значение));
			КонецЕсли;
			
		КонецЦикла;
		
		Таблица.Колонки.Добавить(Колонка, Новый ОписаниеТипов(МассивТипов));
		
		Таблица.ЗагрузитьКолонку(Значения, Колонка);
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция СформироватьМассивСтруктур(Источник, Колонки)
	
	Результат = Новый Массив;
	
	Для Каждого Стр Из Источник Цикл 
		
		Запись = Новый Структура(Колонки);
		ЗаполнитьЗначенияСвойств(Запись, Стр);
		Результат.Добавить(Запись);
		
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

Функция ПреобразоватьЗначениеДляОтображенияНаФорме(Значение)
	
	ТипЗнч = ТипЗнч(Значение);
	
	Если ТипЗнч = Тип("Массив") Тогда 
		
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(Значение);
		Возврат Список;
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ЭлементПодченен(Элемент, Родитель)Экспорт
	
	Если Элемент = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Элемент = Родитель Тогда 
		
		Возврат Истина;
		
	Иначе
		
		ЭлементРодитель = ?(ТипЗнч(Элемент) = Тип("ДанныеФормыЭлементДерева"), Элемент.ПолучитьРодителя(), Элемент.Родитель);
		
		Возврат ЭлементПодченен(ЭлементРодитель, Родитель);
		
	КонецЕсли;
	
КонецФункции

Функция ЗначениеВXMLСтроку(Значение) Экспорт 
	
	_Запись = Новый ЗаписьXML;
	_Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(_Запись, Значение);
	
	Возврат _Запись.Закрыть();
	
КонецФункции

Функция ЗначениеИзXMLСтроку(Значение) Экспорт 
	
	_Запись = Новый ЗаписьXML;
	_Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(_Запись, Значение);
	
	Возврат _Запись.Закрыть();
	
КонецФункции

Функция XMLСтрокаВЗначение(СтрокаXML, Тип) Экспорт 
	
	_Чтение = Новый ЧтениеXML;
	_Чтение.УстановитьСтроку(СтрокаXML);
	
	Значение = СериализаторXDTO.ПрочитатьXML(_Чтение, Тип);
	
	_Чтение.Закрыть();
	
	Возврат Значение;
	
КонецФункции

Функция ЕстьПересечениеМассивов(Массив1, Массив2) 
	
	Если Массив1.Количество() = 0 ИЛИ Массив2.Количество() = 0 Тогда 
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого Значение Из Массив1 Цикл 
		
		Если Массив2.Найти(Значение) <> Неопределено Тогда 
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ВСоответствие(Коллекция, Ключ, Значение = Неопределено)
	
	Соответствие = Новый Соответствие;
	
	Для Каждого Стр Из Коллекция Цикл 
		
		Соответствие.Вставить(Стр[Ключ], ?(Значение = Неопределено, Стр, Стр[Значение]));
		
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

Функция СтрШаблонКолллекция(МассивЗначений, Шаблон) Экспорт 
	
	МассивРезультат = Новый Массив;
	
	Для Каждого Знч Из МассивЗначений Цикл 
		
		МассивРезультат.Добавить(СтрШаблон(Шаблон, Знч));
		
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

#КонецОбласти //Универсальные_коллекции

#Область Прочее

Функция ЗначениеВСтроку(Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("Структура") Тогда 
		Стр = "";
		Для Каждого Эл Из Значение Цикл 
			Стр = Стр + СтрШаблон("%1: %2; ", Эл.Ключ, ЗначениеВСтроку(Эл.Значение));
		КонецЦикла;
		
		Возврат Стр;
		
	ИначеЕсли ТипЗначения = Тип("Массив") Тогда 
		
		Возврат СтрСоединить(Значение, ", ");
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда 
		
		Возврат Значение;
		
	Иначе
		
		Возврат Строка(Значение);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти // Прочее

#Область Логирование

Процедура Ошибка(Операция, ТекстОшибки, ОбрабатываемыйОбъект)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = СтрШаблон("%1: %2.%3%4", Операция, ТекстОшибки, Символы.ПС, ОбрабатываемыйОбъект);
	Сообщение.Сообщить();
	
КонецПроцедуры

#КонецОбласти // Логирование

#Область БазовыеОперации

БазовыеОперации = Новый Структура;
БазовыеОперации.Вставить("Сохранить", "Сохранить");
БазовыеОперации.Вставить("Загрузить", "Загрузить");

#КонецОбласти // БазовыеОперации

