&НаКлиенте
Перем ПутьФайлаЗапроса;
&НаКлиенте
Перем ХранилищеПараметров;
&НаКлиенте
Перем СтруктураТаблицы;
&НаКлиенте
Перем ТаблицаИзменена;
&НаКлиенте
Перем КлючТекущейНастройки;
&НаКлиенте
Перем ПараметрыТекущейНастройки Экспорт;
&НаКлиенте
Перем РезультатВыполнения;
&НаКлиенте
Перем ИмяФайлаОбработки;
&НаКлиенте
Перем НастройкиОбработки;
&НаКлиенте
Перем РезультатТаблица_Адрес;

//////////////////////////////////////////////////
/////Служебные методы
//////////////////////////////////////////////////

#Область github_integration

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПубликации()
	
	Параметры = Новый Структура;

	Параметры.Вставить("owner", "alkoleft");
	Параметры.Вставить("repo", "ones_universal_tools");
	Параметры.Вставить("version", "v1.10");
	
	Возврат Параметры;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьURL(Ресурс, api = Ложь)
	
	ПараметрыПубликации = ПараметрыПубликации();
	
	Если api Тогда 
		
		Возврат СтрШаблон("https://api.github.com/repos/%1/%2/%3", ПараметрыПубликации.owner, ПараметрыПубликации.repo, Ресурс);
		
	Иначе
		
		Возврат СтрШаблон("https://github.com/%1/%2/%3", ПараметрыПубликации.owner, ПараметрыПубликации.repo, Ресурс);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПроверитьОбновление()
	
	ПараметрыПубликации = ПараметрыПубликации();
	
	Ответ = ПолучитьДанные(ПолучитьURL("releases/latest", Истина));

	Если Ответ = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	
	Чтение = Новый ЧтениеJSON();	
	Чтение.ОткрытьПоток(Ответ);
	
	Ответ = ПрочитатьJSON(Чтение, Истина);
	Чтение.Закрыть();
	
	Если Ответ["tag_name"] > ПараметрыПубликации.version Тогда 
		
		ИнформацияОВерсии = Новый Структура;
		ИнформацияОВерсии.Вставить("Версия", Ответ["tag_name"]);
		ИнформацияОВерсии.Вставить("Скачать", Ответ["assets"][0]["browser_download_url"]);
		ИнформацияОВерсии.Вставить("Страница", Ответ["html_url"]);
		ИнформацияОВерсии.Вставить("Заголовок", Ответ["name"]);
		ИнформацияОВерсии.Вставить("Описание", Ответ["body"]);
		
		Возврат ИнформацияОВерсии;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура github_checkupdate(Команда = Неопределено)
	
	ИнформацияОбОбновлении = ПроверитьОбновление();
	
	Если ИнформацияОбОбновлении = Ложь Тогда
		
		ПоказатьПредупреждение(, 
		Новый ФорматированнаяСтрока("У вас последная версия", Новый Шрифт(, 16, )), , 
		"Обновление");
		
	Иначе 
		
		фСтрока = Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока("Доступна новая версия: " + ИнформацияОбОбновлении.Версия, Новый Шрифт(, 16, Истина)),
		Символы.ПС,
		Символы.ПС,
		"Описание: ",
		Новый ФорматированнаяСтрока(
		ИнформацияОбОбновлении.Версия + " " + ИнформацияОбОбновлении.Заголовок, 
		Новый Шрифт(, , Истина), , , 
		ИнформацияОбОбновлении.Страница),
		Символы.ПС,
		Символы.ПС,
		ИнформацияОбОбновлении.Описание,
		Символы.ПС,
		Символы.ПС,
		Новый ФорматированнаяСтрока("Скачать по ссылке(откроется в браузере)", , , , ИнформацияОбОбновлении.Скачать),
		Символы.ПС,
		Символы.ПС,
		Новый ФорматированнаяСтрока("Обновить обработку?", Новый Шрифт(, 14, Истина))
		);
		
		ПоказатьВопрос(
		Новый ОписаниеОповещения("ПроверитьОбновлениеОтвет", ЭтаФорма, ИнформацияОбОбновлении.Скачать)
		, фСтрока
		, РежимДиалогаВопрос.ДаНет
		, , КодВозвратаДиалога.Да
		, "Обновление");
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура github_about(Команда)
	
	ЗапуститьПриложение(ПолучитьURL(""));
	
КонецПроцедуры

&НаКлиенте
Процедура github_issues(Команда)
	
	ЗапуститьПриложение(ПолучитьURL("issues"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОбновлениеОтвет(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		
		Данные = СкачатьФайлHTTP(ДополнительныеПараметры);
		
		Если Данные <> Неопределено Тогда 
			
			Данные.Записать(ИмяФайлаОбработки);
			
			ПоказатьПредупреждение(, "Обработка обновлена. Перезапустите обработку");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеОбновление()
	
	ИнформацияОбОбновлении = ПроверитьОбновление();
	
	Если ИнформацияОбОбновлении <> Ложь Тогда
		
		Элементы.НадписьНайденноОбновление.Видимость = Истина;
		
	КонецЕсли;

КонецПроцедуры

#Область HTTP

&НаКлиенте
Функция СкачатьФайлHTTP(URLФайла)
	
	СтруктураАдреса = РазобратьURL(URLФайла);
	
	Соединение = УстановитьHTTPСоединение(СтруктураАдреса.Сервер, НРег(СтруктураАдреса.Схема) = "https");
	
	Ответ = ВыполнитьHTTPЗапрос(Соединение, СтруктураАдреса.АдресРесурса);
	
	Если Ответ = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Ответ.ПолучитьТелоКакДвоичныеДанные();
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанные(URL, ОтветКак = "Поток")
	
	СтруктураАдреса = РазобратьURL(URL);
	
	Соединение = УстановитьHTTPСоединение(СтруктураАдреса.Сервер, НРег(СтруктураАдреса.Схема) = "https");
	
	Ответ = ВыполнитьHTTPЗапрос(Соединение, СтруктураАдреса.АдресРесурса);
	
	Если Ответ = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ОтветКак = "Поток" Тогда 
		Возврат Ответ.ПолучитьТелоКакПоток();
	ИначеЕсли ОтветКак = "Строка" Тогда 
		Возврат Ответ.ПолучитьТелоКакСтроку();
	ИначеЕсли ОтветКак = "ДвоичныеДанные" Тогда 
		Возврат Ответ.ПолучитьТелоКакДвоичныеДанные();
	Иначе
		Возврат Ответ;
	КонецЕсли;
	
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция РазобратьURL(Знач URL) Экспорт
	// https://habrahabr.ru/post/232385
	
	СтруктураАдреса = Новый Структура("Схема, Сервер, Порт, Путь, ИмяФайла, АргументыЗапроса, Фрагмент, Пользователь, Пароль, АдресРесурса", 
	"http", , 80, "/");
	
	Позиция = СтрНайти(URL, "://");
	Если Позиция <> 0 Тогда
		
		СтруктураАдреса.Вставить("Схема", Лев(URL, Позиция - 1));
		URL = Сред(URL, Позиция + 3);
		
	КонецЕсли;
	
	Позиция = СтрНайти(URL, "/");
	
	Если Позиция Тогда 
		
		СтруктураАдреса.АдресРесурса = Сред(URL, Позиция + 1);
		
	КонецЕсли;
	
	Позиция = СтрНайти(URL, "#", НаправлениеПоиска.СКонца);
	Если Позиция <> 0 Тогда 
		
		СтруктураАдреса.Фрагмент = Сред(URL, Позиция + 1);
		URL = Лев(URL, Позиция - 1);		
		
	КонецЕсли;
	
	Позиция = СтрНайти(URL, "?", НаправлениеПоиска.СКонца);
	Если Позиция <> 0 Тогда 
		
		СтруктураАдреса.АргументыЗапроса = Сред(URL, Позиция + 1);
		URL = Лев(URL, Позиция - 1);		
		
	КонецЕсли;
	
	Позиция = СтрНайти(URL, "/");
	
	Если Позиция Тогда
		
		СтруктураАдреса.Сервер = Лев(URL, Позиция - 1);
		
		СтруктураАдреса.Путь = Сред(URL, Позиция + 1);
		
		Позиция = СтрНайти(СтруктураАдреса.Путь, "/", НаправлениеПоиска.СКонца);
		
		Если Позиция Тогда 
			
			СтруктураАдреса.ИмяФайла = Сред(СтруктураАдреса.Путь, Позиция + 1);
			
		КонецЕсли;
		
	Иначе
		
		СтруктураАдреса.Сервер = URL;
		
	КонецЕсли;
	
	Позиция = СтрНайти(СтруктураАдреса.Сервер, "@");
	Если Позиция Тогда 
		
		ПользовательПароль = Лев(СтруктураАдреса.Сервер, Позиция - 1);
		СтруктураАдреса.Сервер = Сред(СтруктураАдреса.Сервер, Позиция + 1);
		
		Позиция = СтрНайти(ПользовательПароль, ":");
		СтруктураАдреса.Пользователь = Лев(ПользовательПароль, Позиция - 1);
		СтруктураАдреса.Пароль = Сред(ПользовательПароль, Позиция + 1);
		
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

&НаКлиенте
Функция УстановитьHTTPСоединение(Сервер, ИспользоватьSSL)
	
	ЗащищенноеСоединениеOpenSSL = ?(ИспользоватьSSL, Новый ЗащищенноеСоединениеOpenSSL(), Неопределено);
	
	Соединение = Новый HTTPСоединение(Сервер, , , , НастройкиПрокси(), ,	ЗащищенноеСоединениеOpenSSL);
	
	Возврат Соединение;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьHTTPЗапрос(Соединение, АдресРесурса)
	
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	
	Ответ = Соединение.Получить(Запрос);
	
	Если Ответ.КодСостояния = 302 Тогда // Редирект
		
		Ответ = ПолучитьДанные(Ответ.Заголовки["Location"], Неопределено);
		
	ИначеЕсли Ответ.КодСостояния <> 200 Тогда 
		
		Сообщить("Не удалось выполнить запрос. " + Ответ.ПолучитьТелоКакСтроку());
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

&НаКлиенте
Функция НастройкиПрокси()

	Если НастройкиОбработки = Неопределено ИЛИ НастройкиОбработки["proxy"] = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Прокси = Новый ИнтернетПрокси();
	
	ПараметрыПрокси = НастройкиОбработки["proxy"];
	Сервер = Неопределено;
	Порт = Неопределено;
	Пользователь = Неопределено;
	Пароль = "";
	СтрокаСерверПорт = Неопределено;
	
	Если ПараметрыПрокси = "default" Тогда 
		Возврат Прокси;
	ИначеЕсли ТипЗнч(ПараметрыПрокси) = Тип("Строка") Тогда
		
		СтрокаСерверПорт = ПараметрыПрокси;
		
	ИначеЕсли ТипЗнч(ПараметрыПрокси) = Тип("Соответствие") Тогда 
		
		СтрокаСерверПорт = ПараметрыПрокси["server"];
		Порт 			= ПараметрыПрокси["port"];
		Пользователь 	= ПараметрыПрокси["user"];
		Пароль 			= ПараметрыПрокси["password"];
		
	КонецЕсли;
	
	Если СтрокаСерверПорт <> Неопределено Тогда 
		РазделениеСерверПорт = СтрНайти(ПараметрыПрокси, ":", , , 2);
		Если РазделениеСерверПорт <> 0 Тогда 
			Сервер = Лев(ПараметрыПрокси, РазделениеСерверПорт - 1);
			Порт = Число(Сред(ПараметрыПрокси, РазделениеСерверПорт + 1));
		Иначе
			Сервер = СтрокаСерверПорт;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пользователь) Тогда 
		Прокси.Установить("http", Сервер, Порт, Пользователь, Пароль, Ложь);
		Прокси.Установить("https", Сервер, Порт, Пользователь, Пароль, Ложь);
	Иначе
		Прокси.Установить("http", Сервер, Порт);
		Прокси.Установить("https", Сервер, Порт);
	КонецЕсли;
	
	Возврат Прокси;
КонецФункции

#КонецОбласти //HTTP

#КонецОбласти //github_integration

#Область Универсальные_коллекции

&НаКлиентеНаСервереБезКонтекста
Функция ВыгрузитьЗначения(Знач Коллекция, Знач ИмяРеквизита) Экспорт 
	
	Массив = Новый Массив;
	
	Для Каждого Стр Из Коллекция Цикл 
		
		Массив.Добавить(Стр[ИмяРеквизита]);
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДополнитьСтруктуру(Знач Структура, Знач Дополнение, Знач Ключи = Неопределено) Экспорт 
	
	Если Ключи = Неопределено Тогда 
	
		Для Каждого Эл Из Дополнение Цикл 
			
			Структура.Вставить(Эл.Ключ, Эл.Значение);	
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Ключ Из Ключи Цикл 
			
			Структура.Вставить(Ключ, Дополнение[Ключ]);	
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Скопировать(Знач Источник, Знач Приемник) Экспорт 
	
	ТипЗ = ТипЗнч(Источник);
	
	Если ТипЗ = Тип("Структура") ИЛИ ТипЗ = Тип("Соответствие") Тогда 
		
		Для Каждого Эл Из Источник Цикл 
			
			Приемник.Вставить(Эл.Ключ, Эл.Значение);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗ = Тип("СписокЗначений") Тогда 
		
		Для Каждого Эл Из Источник Цикл 
			ЗаполнитьЗначенияСвойств(Приемник.Добавить(), Эл);
		КонецЦикла;
	#Если Сервер Тогда
	ИначеЕсли ТипЗ = Тип("ДеревоЗначений") ИЛИ ТипЗ = Тип("СтрокаДереваЗначений") ИЛИ ТипЗ = Тип("ДанныеФормыКоллекция") Тогда
	#ИначеЕсли Клиент Тогда
	ИначеЕсли ТипЗ = Тип("ДанныеФормыКоллекция") ИЛИ ТипЗ = Тип("ДанныеФормыЭлементДерева") Тогда
	#КонецЕсли
	
		ПриемникКоллекция = ПолучитьКоллекцию(Приемник);
		ИсточникКоллекция = ПолучитьКоллекцию(Источник);
		
		Для Каждого стр из ИсточникКоллекция Цикл 
			
			нСтр = ПриемникКоллекция.Добавить();
			ЗаполнитьЗначенияСвойств(нСтр,стр);
			Скопировать(стр, нСтр);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКоллекцию(Объект) Экспорт 
	
	Тип = ТипЗнч(Объект);
	
	Если Тип = Тип("ДанныеФормыДерево") ИЛИ Тип = Тип("ДанныеФормыЭлементДерева") Тогда 
		
		Возврат Объект.ПолучитьЭлементы();
		
	КонецЕсли;
	
	#Если Сервер Тогда
	Если Тип = Тип("ДеревоЗначений") или Тип = Тип("СтрокаДереваЗначений") Тогда
		Возврат Объект.Строки;
	КонецЕсли;
	#КонецЕсли	
	
	Возврат Объект;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиВДеревеФормы(Знач ЭлементыДерева, Знач Реквизит, Знач Значение) Экспорт 
	
	Для Каждого Элемент Из ЭлементыДерева Цикл 
		
		Если Элемент[Реквизит] = Значение Тогда 
			
			Возврат Элемент;
			
		Иначе
			
			НСТр = НайтиВДеревеФормы(Элемент.ПолучитьЭлементы(), Реквизит, Значение);
			
			Если НСТр <> Неопределено Тогда 
				
				Возврат НСТр;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеЗапросом(Знач Текст, Знач Параметры) Экспорт 
	Запрос = Новый Запрос(Текст);
	ДополнитьСтруктуру(Запрос.Параметры, Параметры);

	Результат = Запрос.Выполнить();

	Возврат ЗначениеИзРезультатаЗапроса(Результат);

КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеИзРезультатаЗапроса(Знач Результат, Знач ЗначениеПоумолчания = Неопределено, Знач ИмяРеквизита = 0) Экспорт 

	Если Результат.Пустой() Тогда 
		Возврат ЗначениеПоумолчания;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Выборка.Следующий();

	Возврат Выборка[ИмяРеквизита];

КонецФункции

&НаСервереБезКонтекста
Функция СоздатьТаблицуИзКоллекции(Знач Колонки, Знач Коллекция) 
	
	Таблица = Новый ТаблицаЗначений;
	
	Количество = Коллекция.Количество();
	
	Для инд = 1 По Количество Цикл 
		
		Таблица.Добавить();
		
	КонецЦикла;
	
	Для Каждого Колонка Из СтрРазделить(Колонки, ",") Цикл 
		
		Колонка = СокрЛП(Колонка);
		
		Значения = ВыгрузитьЗначения(Коллекция, Колонка);
		
		МассивТипов = Новый Массив;
		Для Каждого Значение Из Значения Цикл 
			
			Если МассивТипов.Найти(ТипЗнч(Значение)) = Неопределено Тогда 
				МассивТипов.Добавить(ТипЗнч(Значение));
			КонецЕсли;
			
		КонецЦикла;
		
		Таблица.Колонки.Добавить(Колонка, Новый ОписаниеТипов(МассивТипов));
		
		Таблица.ЗагрузитьКолонку(Значения, Колонка);
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьМассивСтруктур(Источник, Колонки)
	
	Результат = Новый Массив;
	
	Для Каждого Стр Из Источник Цикл 
		
		Запись = Новый Структура(Колонки);
		ЗаполнитьЗначенияСвойств(Запись, Стр);
		Результат.Добавить(Запись);
		
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьЗначениеДляОтображенияНаФорме(Значение)
	
	ТипЗнч = ТипЗнч(Значение);
	
	Если ТипЗнч = Тип("Массив") Тогда 
		
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(Значение);
		Возврат Список;
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭлементПодченен(Элемент, Родитель)Экспорт
	
	Если Элемент = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Элемент = Родитель Тогда 
		
		Возврат Истина;
		
	Иначе
		
		ЭлементРодитель = ?(ТипЗнч(Элемент) = Тип("ДанныеФормыЭлементДерева"), Элемент.ПолучитьРодителя(), Элемент.Родитель);
		
		Возврат ЭлементПодченен(ЭлементРодитель, Родитель);
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеВXMLСтроку(Значение) Экспорт 
	
	_Запись = Новый ЗаписьXML;
	_Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(_Запись, Значение);
	
	Возврат _Запись.Закрыть();
	
КонецФункции

&НаКлиенте
Функция ЗначениеИзXMLСтроку(Значение) Экспорт 
	
	_Запись = Новый ЗаписьXML;
	_Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(_Запись, Значение);
	
	Возврат _Запись.Закрыть();
	
КонецФункции

&НаКлиенте
Функция XMLСтрокаВЗначение(СтрокаXML, Тип) Экспорт 
	
	_Чтение = Новый ЧтениеXML;
	_Чтение.УстановитьСтроку(СтрокаXML);
	
	Значение = СериализаторXDTO.ПрочитатьXML(_Чтение, Тип);
	
	_Чтение.Закрыть();
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти //Универсальные_коллекции

#Область Работа_с_файлами

&НаКлиентеНаСервереБезКонтекста
Функция ФайлСуществует(Знач ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	
	Возврат Файл.Существует();
	
КонецФункции

&НаКлиенте
Функция ВыбратьФайлДляСохранения(Фильтр, Заголовок = Неопределено, ВыбранноеИмяФайла = Неопределено, ВыбранныйКаталог = Неопределено, ВыбранноеРасширение = Неопределено)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = Фильтр;
	Диалог.ПолноеИмяФайла 	= ВыбранноеИмяФайла;
	Диалог.Каталог 			= ВыбранныйКаталог;
	Диалог.Заголовок 		= Заголовок;
	Диалог.Расширение 		= ВыбранноеРасширение;
	
	Если Диалог.Выбрать() Тогда
		
		Возврат Диалог.ПолноеИмяФайла;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ВыбратьФайлДляОткрытия(Фильтр, Заголовок = Неопределено, ВыбранноеИмяФайла = Неопределено, ВыбранныйКаталог = Неопределено, ВыбранноеРасширение = Неопределено)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = Фильтр;
	Диалог.ПолноеИмяФайла 	= ВыбранноеИмяФайла;
	Диалог.Каталог 			= ВыбранныйКаталог;
	Диалог.Заголовок 		= Заголовок;
	Диалог.Расширение 		= ВыбранноеРасширение;
		
	Если Диалог.Выбрать() Тогда
		
		Возврат Диалог.ПолноеИмяФайла;
		
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ЗагрузитьФайлНаСервер(Файл)
	
	Если ПустаяСтрока(Файл)Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ФайлСуществует(Файл) Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Файл не существует. " + Файл;
		Сообщение.Сообщить();
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл), УникальныйИдентификатор);
КонецФункции

&НаСервереБезКонтекста
Функция ПоместитьВФайл(Знач Адрес)
	
	двДанные = ПолучитьИзВременногоХранилища(Адрес);
	
	Если ТипЗнч(двДанные)=Тип("ДвоичныеДанные") Тогда
		ИмяФайла=ПолучитьИмяВременногоФайла();
		двДанные.Записать(ИмяФайла);
		Возврат ИмяФайла;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Служебные

#Область Форматирование

&НаКлиентеНаСервереБезКонтекста
Функция ФорматВремяВыполнения(Знач Время)
	Возврат СтрШаблон("%1.%2", Формат('00010101' + Время / 1000, "ДЛФ=T"), Формат(Время % 1000, "ЧЦ=3; ЧН=000; ЧВН="));
КонецФункции

// <TODO необходимо вставить описание>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ФорматированноеОписание(Структура, ФорматнаяСтрока = Истина)
	
	Если ФорматнаяСтрока Тогда 
		ЖирныйШрифт = Новый Шрифт(Элементы.ДеревоНастроек.Шрифт, , , Истина);
		МассивЭлементов = Новый Массив;
		
		Для Каждого Эл Из Структура Цикл 
			
			МассивЭлементов.Добавить(Новый ФорматированнаяСтрока(Эл.Ключ + ": ", ЖирныйШрифт));
			МассивЭлементов.Добавить(Строка(Эл.Значение) + "; ");
			
		КонецЦикла;
		
		Возврат Новый ФорматированнаяСтрока(МассивЭлементов);
	Иначе
		
		Результат = "";
		
		Для Каждого Эл Из Структура Цикл 
			
			Результат = Результат +
						СтрШаблон("%1: %2;", Эл.Ключ, Эл.Значение) + 
						Символы.ПС;
			
		КонецЦикла;
		
		Возврат Результат;
	КонецЕсли;
	
КонецФункции // ФорматированноеОписание

&НаКлиенте
Функция ФорматированноеОписаниеСписок(Список, ФорматнаяСтрока = Истина)
	
	Если ФорматнаяСтрока Тогда 
		ЖирныйШрифт = Новый Шрифт(Элементы.Настройки_Дерево.Шрифт, , , Истина);
		МассивЭлементов = Новый Массив;
		
		Для Каждого Эл Из Список Цикл 
			Если ЗначениеЗаполнено(эл.Картинка) Тогда 
				МассивЭлементов.Добавить(Эл.Картинка);
			КонецЕсли;				
			
			МассивЭлементов.Добавить(Новый ФорматированнаяСтрока(" " + Эл.Представление + ": ", ЖирныйШрифт));
			МассивЭлементов.Добавить(Строка(Эл.Значение) + "; ");
			
		КонецЦикла;
		
		Возврат Новый ФорматированнаяСтрока(МассивЭлементов);
	Иначе
		
		Результат = "";
		
		Для Каждого Эл Из Список Цикл 
			
			Результат = Результат +
						СтрШаблон("%1: %2;", Эл.Представление, Эл.Значение) + 
						Символы.ПС;
			
		КонецЦикла;
		
		Возврат Результат;
	КонецЕсли;
	
КонецФункции // ФорматированноеОписание

#КонецОбласти //Форматирование

&НаКлиентеНаСервереБезКонтекста
Функция мОшибка(Знач Ошибка, Знач Результат = Неопределено)
	
	Если Результат = Неопределено Тогда 
		Результат = Новый Структура;
	КонецЕсли;
	
	Результат.Вставить("Выполнено", Ложь);
	
	Если ТипЗнч(Ошибка) = Тип("ИнформацияОбОшибке") Тогда 
		Результат.Вставить("Описание", ПодробноеПредставлениеОшибки(Ошибка));
	Иначе
		Результат.Вставить("Описание", Строка(Ошибка));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СообщитьОбОшибке(ОписаниеОшибки, ОписаниеДействия)
		
	фСтрока = Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока(?(ЗначениеЗаполнено(ОписаниеДействия), ОписаниеДействия + ". ", "") + "Возникла ошибка:", Новый Шрифт(, 14, Истина)),
		Символы.ПС,
		Символы.ПС,
	    Новый ФорматированнаяСтрока(ОписаниеОшибки, , WebЦвета.Коралловый)
	);
	Сообщить(ОписаниеОшибки);
	ПоказатьПредупреждение(, фСтрока);		
	
КонецПроцедуры // СообщитьОбОшибке

&НаСервереБезКонтекста
Функция ПодключитьВнешнуюОбработкуСервер(Знач Адрес)
	
	Возврат ВнешниеОбработки.Подключить(Адрес);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьТаблицу(ИсточникАдрес)
	
	РезультатТаблица.Очистить();
	СтруктураТаблицы = ЗагрузитьИзВременногоХранилищаТаблицу(ИсточникАдрес);
	РезультатТаблица_Адрес = ИсточникАдрес;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьИзВременногоХранилищаТаблицу(ИсточникАдрес)

	Таблица = ПолучитьИзВременногоХранилища(ИсточникАдрес);
	Возврат ВывестиТаблицу(Таблица);
	
КонецФункции

&НаСервере
Функция ВывестиТаблицу(Знач Таблица)
	
	Если Таблица = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Таблица = ПреобразоватьРезультатВТаблицу(Таблица);
	
	ОбновитьКолонки(РеквизитФормыВЗначение("РезультатТаблица").Колонки, Таблица.Колонки);
	
	РезультатТаблица.Загрузить(Таблица);
	
	СтруктураТаблицы = Новый Массив;
	
	Для Каждого Колонка Из Таблица.Колонки Цикл 
		
		СтруктураТаблицы.Добавить(Новый Структура("Имя, ТипЗначения, Заголовок", Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок));
		
	КонецЦикла;
	
	Возврат СтруктураТаблицы;
КонецФункции

&НаКлиенте
Функция ВыполнитьКоманду(ИмяКоманды) Экспорт 
	
	Команда = ЭтаФорма.Команды.Найти(ИмяКоманды);
	Выполнить(Команда.Действие + "(Команда)");
	
КонецФункции

&НаСервере
Функция ПолучитьИмяФайлаОбработки()
	
	Возврат РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьРезультатВТаблицу(Знач Результат)
	
	ТипРезультата = ТипЗнч(Результат);
	
	Если ТипРезультата = Тип("ТаблицаЗначений") ИЛИ Результат = Неопределено Тогда
		
		Возврат Результат;
		
	ИначеЕсли ТипРезультата = Тип("СписокЗначений") Тогда 
		
		Возврат СоздатьТаблицуИзКоллекции("Значение, Представление, Пометка, Картинка", Результат);
		
	ИначеЕсли ТипРезультата = Тип("Соответствие") ИЛИ ТипРезультата = Тип("Структура") ИЛИ ТипРезультата = Тип("ФиксированнаяСтруктура") ИЛИ ТипРезультата = Тип("ФиксированноеСоответствие") Тогда 
		
		Возврат СоздатьТаблицуИзКоллекции("Ключ, Значение", Результат);
		
	ИначеЕсли ЭтоПримитивныйТип(ТипРезультата) Тогда 
		
		Возврат СоздатьТаблицуИзКоллекции("Значение", Новый Структура("Значение", Результат));
				
	КонецЕсли;
	
КонецФункции

#Область Замеры

&НаКлиентеНаСервереБезКонтекста
Функция ЗамерСоздать()
	
	Возврат Новый Структура("Выполненные, Текущие", Новый Структура, Новый Структура);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗамерНачало(Знач Имя, Знач ДанныеЗамера)
	
	ДанныеЗамера.Текущие.Вставить(Имя, Новый Структура("Начало, Продолжительность", ТекущаяУниверсальнаяДатаВМиллисекундах()));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗамерЗавершить(Знач Имя, Знач ДанныеЗамера)
		
	ДанныеЗамера.Выполненные.Вставить(Имя, ТекущаяУниверсальнаяДатаВМиллисекундах() - ДанныеЗамера.Текущие[Имя].Начало);
	
	ДанныеЗамера.Текущие.Удалить(Имя);
	
КонецФункции

#КонецОбласти //Замеры

#КонецОбласти

#Область Работа_с_типами

&НаКлиенте
Функция ПолучитьПолноеИмяТипа(Тип)
	
	Если НЕ ХранилищеПараметров.Свойство("КэшТипов") Тогда
		
		ХранилищеПараметров.Вставить("КэшТипов", Новый Соответствие);
		
	КонецЕсли;
	
	Если ХранилищеПараметров.КэшТипов[Тип] = Неопределено Тогда 
		
		ХранилищеПараметров.КэшТипов.Вставить(Тип, ПолучитьПолноеИмяТипаСервер(Тип));
		
	КонецЕсли;
	
	Возврат ХранилищеПараметров.КэшТипов[Тип];
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПолноеИмяТипаСервер(Знач Тип)
	
	Мета = Метаданные.НайтиПоТипу(Тип);
	
	Если Мета <> Неопределено Тогда 
		Возврат Мета.ПолноеИмя();
	Иначе
		Возврат Строка(Тип);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТиповВсеСсылки() Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(
	"<TypeDescription xmlns=""http://v8.1c.ru/8.1/data/core"">
	|      <TypeSet xmlns:cc=""http://v8.1c.ru/8.1/data/enterprise/current-config"">cc:AnyRef</TypeSet>
	|</TypeDescription>");
	Результат = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПримитивныйТип(Знач Тип)
	
	Возврат Тип = Тип("Строка")
		ИЛИ Тип = Тип("Число")
		ИЛИ Тип = Тип("Булево")
		ИЛИ Тип = Тип("Дата")
		ИЛИ Тип = Тип("Неопределено")
		ИЛИ Тип = Тип("Null")
		ИЛИ Тип = Тип("Тип")
		
КонецФункции

#КонецОбласти //Работа_с_типами

#Область Работа_с_формой

&НаСервере
процедура СоздатьКолонкиТЗ(Колонки)
	
	МассивРеквизитов = Новый Массив;
	
	Для Каждого Колонка из Колонки Цикл
		Если Колонка.Имя = "_Служебная" Тогда 
			Продолжить;
		КонецЕсли;
		
		РеквизитФормы = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "РезультатТаблица");
		МассивРеквизитов.Добавить(РеквизитФормы);
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
	
	Для Каждого Колонка из Колонки цикл
		Если Колонка.Имя = "_Служебная" Тогда 
			Продолжить;
		КонецЕсли;
		ИмяКолонки = "РезультатТаблица" + Колонка.Имя;
		Элемент = ЭтаФорма.Элементы.Найти(ИмяКолонки);
		
		Если Элемент = Неопределено Тогда
			
			Элемент = ЭтаФорма.Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), Элементы.РезультатТаблица);
			//Попытка
			Элемент.ПутьКДанным = "РезультатТаблица." + Колонка.Имя;
			//Исключение
			//КонецПопытки;
			
		КонецЕсли;
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок = Колонка.Имя;
	КонецЦикла;
	
	Элементы.РезультатТаблица_Служебная.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКолонкиТЗ(Колонки)
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	Для Каждого Колонка из Колонки цикл
		Если Колонка.Имя = "_Служебная" Тогда 
			Продолжить;
		КонецЕсли;
		
		МассивУдаляемыхРеквизитов.Добавить("РезультатТаблица."+Колонка.Имя);
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
	
	Для Каждого Колонка из Колонки цикл
		Если Колонка.Имя = "_Служебная" Тогда 
			Продолжить;
		КонецЕсли;
		ИмяКолонки = "РезультатТаблица" + Колонка.Имя;
		Элемент = ЭтаФорма.Элементы.Найти(ИмяКолонки);
		ЭтаФорма.Элементы.Удалить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКолонки(СтарыеКолонки, НовыеКолонки)
	
	ДобавляемыеКолонки = Новый Массив;
	УдаляемыеКолонки = Новый Массив;
		
	Для Каждого Колонка Из СтарыеКолонки Цикл 
		
		НайденнаяКолонка = НовыеКолонки.Найти(Колонка.Имя);
		
		Если НайденнаяКолонка = Неопределено ИЛИ НайденнаяКолонка.ТипЗначения <> Колонка.ТипЗначения Тогда 
			
			УдаляемыеКолонки.Добавить(Колонка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Колонка Из НовыеКолонки Цикл 
		
		НайденнаяКолонка = СтарыеКолонки.Найти(Колонка.Имя);
		
		Если НайденнаяКолонка = Неопределено ИЛИ НайденнаяКолонка.ТипЗначения <> Колонка.ТипЗначения Тогда 
			
			ДобавляемыеКолонки.Добавить(Колонка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если УдаляемыеКолонки.Количество() Тогда 
		УдалитьКолонкиТЗ(УдаляемыеКолонки);
	КонецЕсли;
	Если ДобавляемыеКолонки.Количество() Тогда 
		СоздатьКолонкиТЗ(ДобавляемыеКолонки);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти //Работа_с_формой

//////////////////////////////////////////////////
/////Основные методы
//////////////////////////////////////////////////

#Область Проверки

&НаКлиенте
Функция МожноВыполнить(ПараметрыНастройки = Неопределено)
	
	Если ПараметрыНастройки = Неопределено Тогда 
		ПараметрыНастройки = ПараметрыТекущейНастройки;
	КонецЕсли;
	
	Если ПараметрыТекущейНастройки = Неопределено ИЛИ (ПараметрыТекущейНастройки.Тип <> 0 И ПараметрыТекущейНастройки.Тип <> 1) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ДоступноРедактированиеНастройки(ПараметрыНастройки = Неопределено) Экспорт 
	
	Если ПараметрыНастройки = Неопределено Тогда 
		ПараметрыНастройки = ПараметрыТекущейНастройки;
	КонецЕсли;
	
	Если ПараметрыНастройки = Неопределено ИЛИ НЕ ПараметрыНастройки.Свойство("ИдентификаторДанные") Тогда 
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область Выполнение

// Выполнение:
//	1.	Проверка возможности выполнения
//	2.	Подготовка контекста выполнения (Параметры, данные таблицы)
//	3.	Вызов методы
//	4.	Обработка результата выполнения
//
// Методы выполнения:
//	Должны возвращать структуру результата:
//		Выполнено - Булево - Признак успешности
//		ВремяВыполнения - Число - Необязательное. Время в милисекундах
//		Данные - ТаблицаЗначений - Результат выполнения
//		ОписаниеРезультатов - Массив - Коллекция результатов, состоящая из структур
//			ВремяВыполнения - Число
//			Данные - ТаблицаЗначений
//		Описание - Строка - Описание ошибки

&НаКлиенте
Функция ВыполнитьНастройку(Знач ПараметрыНастройки = Неопределено) Экспорт
	
	Замер = ЗамерСоздать();
	ЗамерНачало("ОбщееВремя", Замер);
	
	Если ПараметрыНастройки = Неопределено Тогда 
		ПараметрыНастройки = ПараметрыТекущейНастройки;
	КонецЕсли;
	
	Если НЕ МожноВыполнить(ПараметрыНастройки) Тогда 
		
		Возврат Новый Структура("Выполнено, Описание", Ложь, "Нельзя выполнить выбранную настройку");
		
	КонецЕсли;
	
	#Область Подготовка
	
	ТекущиеДанные = ДанныеНастройки(ПараметрыНастройки);
	
	ТипФункции = Неопределено;
	
	Если ЭтоЗапрос(ПараметрыНастройки) Тогда 
		
		ТипФункции = "Запрос";
		
	ИначеЕсли ЭтоАлгоритм(ПараметрыНастройки) Тогда 
		
		ТипФункции = "Алгоритм";
		
	КонецЕсли;
	
	ВыполнитьНаСервере = ТипФункции = "Запрос" ИЛИ НЕ ВыполнятьНаКлиенте;
	ОбновлятьТаблицу = ВыполнитьНаСервере И НЕ ТипФункции = "Запрос" И ТаблицаИзменена = Истина;
	
	ПараметрыВыполнения = СформироватьМассивСтруктур(ТекущиеДанные.Параметры, "ИмяПараметра, ЗначениеПараметра, АдресДанных");
	
	Если ОбновлятьТаблицу Тогда
		
		ЗамерНачало("ПередачаТаблицыНаСервер", Замер);
		
		ПоместитьТаблицуНаСервер(РезультатТаблица, РезультатТаблица_Адрес);
		ТаблицаИзменена = Ложь;
		
		ЗамерЗавершить("ПередачаТаблицыНаСервер", Замер);
		
	КонецЕсли;
	
	#КонецОбласти //Подготовка
		
	Если ВыполнитьНаСервере Тогда 

		РезультатВыполнения = ВыполнитьНаСервере(
			ТекущиеДанные.Текст, 
			ПараметрыВыполнения, 
			ТипФункции,
			РезультатТаблица_Адрес);
			
		ДополнитьСтруктуру(Замер.Выполненные, РезультатВыполнения.Замер.Выполненные);
			
		Если РезультатВыполнения.Выполнено И РезультатВыполнения.Свойство("ЕстьДанные") Тогда 
			
			ЗамерНачало("ВремяВывода", Замер);
			
			ЗагрузитьТаблицу(РезультатВыполнения.АдресДанных);

			ЗамерЗавершить("ВремяВывода", Замер);

		КонецЕсли;
		
	Иначе
		
		Контекст = Новый Структура("Таблица", РезультатТаблица);
		
		РезультатВыполнения = ВыполнитьСкриптНаКлиенте(ТекущиеДанные.Текст, ПараметрыВыполнения, Контекст);
		
		Если РезультатВыполнения.Свойство("Данные") И РезультатВыполнения.Данные <> Неопределено Тогда 
			
			ВывестиТаблицу(РезультатВыполнения.Данные);
			
		КонецЕсли;
				
	КонецЕсли;
	
	ЗамерЗавершить("ОбщееВремя", Замер);
	
	РезультатВыполнения.Вставить("Замер", Замер.Выполненные);
	
	ПослеВыполнения();
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПоместитьТаблицуНаСервер(Знач РезультатТаблица, Знач Адрес)
	
	Таблица = ДанныеФормыВЗначение(РезультатТаблица, Тип("ТаблицаЗначений"));
	
	ПоместитьВоВременноеХранилище(Таблица, Адрес);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьНаСервере(Знач Текст, Знач ДанныеПараметрыВыполнения, Знач ТипФункции, Знач АдресРезультата)
	
	РезультатВыполнения = Новый Структура("Выполнено, Описание", Истина);
	
	Замер = ЗамерСоздать();
	ЗамерНачало("ВремяВыполнения", Замер);
	
	ПараметрыВыполнения = Новый Структура;
	
	Для Каждого Стр из ДанныеПараметрыВыполнения цикл
		
		Если ЭтоАдресВременногоХранилища(Стр.АдресДанных) Тогда 
			
			ПараметрыВыполнения.Вставить(Стр.ИмяПараметра, ПолучитьИзВременногоХранилища(Стр.АдресДанных));
			
		Иначе
			
			ПараметрыВыполнения.Вставить(Стр.ИмяПараметра, Стр.ЗначениеПараметра);
			
		КонецЕсли;
	КонецЦикла;
	
	
	Попытка
		
		Если ТипФункции = "Запрос" Тогда 
					
			Результат = ВыполнитьЗапросСЗамером(Текст, ПараметрыВыполнения, Истина);
			
		ИначеЕсли ТипФункции = "Алгоритм" Тогда 
			
			Контекст = Новый Структура;
			Контекст.Вставить("Таблица", ПолучитьИзВременногоХранилища(АдресРезультата));
			
			Результат = ВыполнитьСкриптНаСервере(Текст, ПараметрыВыполнения, Контекст);
			
		КонецЕсли;
		
		ОбработкаРезультатВыполнения(Результат);
		
	Исключение
		
		Результат = Новый Структура("Выполнено, Описание", Ложь, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ЗамерЗавершить("ВремяВыполнения", Замер);
	
	ДополнитьСтруктуру(РезультатВыполнения, Результат);
	
	РезультатВыполнения.Вставить("Замер", Замер);

	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыполнения()
	
	Замер = РезультатВыполнения.Замер;
	
	Описание = Новый СписокЗначений();
	Описание.Добавить(РезультатТаблица.Количество(), "Строк");
	Описание.Добавить(ФорматВремяВыполнения(Замер.ОбщееВремя), "Время общее");
	
	
	Служебные_ОписаниеРезультат = ФорматированноеОписаниеСписок(Описание);
	
	Если Замер.Свойство("ВремяВыполнения") Тогда 
		Описание.Добавить(ФорматВремяВыполнения(Замер.ВремяВыполнения), "Выполнения");
	КонецЕсли;
	
	Если Замер.Свойство("ВремяВывода") Тогда 
		Описание.Добавить(ФорматВремяВыполнения(Замер.ВремяВывода), "Вывод");
	КонецЕсли;
	
	Элементы.Служебные_ОписаниеРезультат.Подсказка = ФорматированноеОписаниеСписок(Описание, Ложь);

	Если НЕ РезультатВыполнения.Выполнено Тогда 
		
		СообщитьОбОшибке(РезультатВыполнения.Описание, "Выполнение");
		
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ОписаниеРезультатов") Тогда 
		
		Результат_ВременныеТаблицы.Очистить();
		Для Каждого Стр Из РезультатВыполнения.ОписаниеРезультатов Цикл 
			
			НовСтр = Результат_ВременныеТаблицы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			НовСтр.Время = ФорматВремяВыполнения(НовСтр.Продолжительность);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруЗапроса(Текст)
	
	Схема = Новый СхемаЗапроса();
	
	Схема.УстановитьТекстЗапроса(Текст);
	
	МассивЗапросов = Новый Массив;
	
	Для Каждого Пакет Из Схема.ПакетЗапросов Цикл 
		
		ДанныеЗапроса = Новый Структура;
		
		Если ТипЗнч(Пакет) = Тип("ЗапросВыбораСхемыЗапроса") Тогда 
			ДанныеЗапроса.Вставить("Текст", Пакет.ПолучитьТекстЗапроса());
		Иначе
			ДанныеЗапроса.Вставить("Текст", "УНИЧТОЖИТЬ " + Пакет.ИмяТаблицы);			
		КонецЕсли;
		
		Если ТипЗнч(Пакет) = Тип("ЗапросВыбораСхемыЗапроса") Тогда 
			
			Если ЗначениеЗаполнено(Пакет.ТаблицаДляПомещения) Тогда 
				
				ДанныеЗапроса.Вставить("Тип", "СозданиеВТ");
				ДанныеЗапроса.Вставить("ИмяТаблицы", Пакет.ТаблицаДляПомещения);
				ДанныеЗапроса.Вставить("Имя", Пакет.ТаблицаДляПомещения);
				
			Иначе
				
				ДанныеЗапроса.Вставить("Тип", "Выборка");
				ДанныеЗапроса.Вставить("Имя", "Запрос " + (Схема.ПакетЗапросов.Индекс(Пакет) + 1));
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Пакет) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда 
			
			ДанныеЗапроса.Вставить("Тип", "Уничтожение");
			ДанныеЗапроса.Вставить("ИмяТаблицы", Пакет.ИмяТаблицы);
			ДанныеЗапроса.Вставить("Имя", "~" + Пакет.ИмяТаблицы);
			
		КонецЕсли;
		
		МассивЗапросов.Добавить(ДанныеЗапроса);
	КонецЦикла;
	
	Возврат МассивЗапросов;
	
КонецФункции

#Область Фактическое_выполнение

&НаСервереБезКонтекста
Функция ВыполнитьЗапросСЗамером(ТекстЗапроса, Параметры, СохранятьВТ)
	
	СтруктураЗапроса = ПолучитьСтруктуруЗапроса(ТекстЗапроса);
	
	// [TODO Оптимизация] Добавить анализ параметров, чтоб не передавай каждый раз. Корякин Алексей 18.08.2017 22:09:48
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Для Каждого Параметр из Параметры цикл
		
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	ОписаниеРезультатов = Новый Массив;
	
	СозданныеВТ = Новый Соответствие;
	
	Для Каждого Подзапрос Из СтруктураЗапроса Цикл 
		
		ОписаниеРезультат = Новый Структура;
		ОписаниеРезультат.Вставить("Имя", Подзапрос.Имя);
		ОписаниеРезультат.Вставить("Тип", Подзапрос.Тип);
		
		Запрос.Текст = Подзапрос.Текст;
		
		ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
		РезультатЗапроса = Запрос.Выполнить();
		Продолжительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала;
		
		Если Подзапрос.Тип = "СозданиеВТ" Тогда
			
			Количество = РезультатЗапроса.Выгрузить()[0][0];
			СозданныеВТ.Вставить(ВРег(Подзапрос.ИмяТаблицы), Истина);
			
		ИначеЕсли Подзапрос.Тип = "Выборка" Тогда
			
			ОписаниеРезультат.Вставить("Данные", РезультатЗапроса.Выгрузить());
			Количество = ОписаниеРезультат.Данные.Количество();
			
		ИначеЕсли Подзапрос.Тип = "Уничтожение" Тогда
			
			СозданныеВТ.Удалить(ВРег(Подзапрос.ИмяТаблицы));
			Количество = 0;
			
		КонецЕсли;
		
		ОписаниеРезультат.Вставить("Продолжительность", Продолжительность);
		ОписаниеРезультат.Вставить("Количество", Количество);
		
		ОписаниеРезультатов.Добавить(ОписаниеРезультат);
		
	КонецЦикла;
	
	Для Каждого ОписаниеРезультат Из ОписаниеРезультатов Цикл 
		
		Данные = Неопределено;
		
		Если ОписаниеРезультат.Свойство("Данные") Тогда
			
		ИначеЕсли ОписаниеРезультат.Тип = "СозданиеВТ" И СозданныеВТ[ВРег(ОписаниеРезультат.Имя)] = Истина Тогда 
			
			Запрос.Текст = "ВЫБРАТЬ * ИЗ " + ОписаниеРезультат.Имя;
			Данные = Запрос.Выполнить().Выгрузить();
			
			ОписаниеРезультат.Вставить("Данные", Данные);
			
		КонецЕсли;

	КонецЦикла;
	
	Результат = Новый Структура;
	
	Результат.Вставить("Выполнено", Истина);
	Результат.Вставить("ОписаниеРезультатов", ОписаниеРезультатов);
		
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьСкриптНаСервере(Знач Текст, Знач Параметры, Знач Контекст)
	
	Результат = ВыполнитьСкрипт(Текст, Параметры, Контекст);
	
	Если Результат.Выполнено Тогда 
		Результат.Данные = ПреобразоватьРезультатВТаблицу(Результат.Данные);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ВыполнитьСкриптНаКлиенте(Знач Текст, Знач Параметры, Знач Контекст)
		
	Возврат ВыполнитьСкрипт(Текст, Параметры, Контекст);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьСкрипт(Знач Текст, Знач Параметры, Знач Контекст)
	
	ТекстУстановкаКонтекста = "";

	Для Каждого Эл Из Контекст Цикл 
		ТекстУстановкаКонтекста = ТекстУстановкаКонтекста + СтрШаблон("%1 = Контекст.%1;", Эл.Ключ);	
	КонецЦикла;
	
	Результат = Неопределено;

	Попытка
		
		Выполнить(ТекстУстановкаКонтекста + Текст);
		
	Исключение
		
		Возврат Новый Структура("Выполнено, Описание", Ложь, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
		
	Возврат Новый Структура("Выполнено, Данные", Истина, Результат);
	
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбработкаРезультатВыполнения(Результат)
	
	Если НЕ Результат.Выполнено Тогда 
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если Результат.Свойство("ОписаниеРезультатов") Тогда 
	
		Для Каждого ОписаниеРезультат Из Результат.ОписаниеРезультатов Цикл 
			
			Если ОписаниеРезультат.Свойство("Данные") И ОписаниеРезультат.Данные <> Неопределено Тогда
				
				АдресДанных = ПоместитьВоВременноеХранилище(ОписаниеРезультат.Данные, Новый УникальныйИдентификатор);
				ОписаниеРезультат.Удалить("Данные");
				ОписаниеРезультат.Вставить("АдресДанных", АдресДанных);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Результат.Свойство("Данные") И Результат.Данные <> Неопределено Тогда
			
		АдресДанных = ПоместитьВоВременноеХранилище(Результат.Данные, Новый УникальныйИдентификатор);
		Результат.Удалить("Данные");
		
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресДанных) Тогда
		
		Результат.Вставить("АдресДанных", АдресДанных);
		Результат.Вставить("ЕстьДанные", Истина);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти //Фактическое_выполнение

#КонецОбласти

#Область Функции_скрипта_клиент

&НаКлиенте
Функция ПодключитьВнешнуюОбработку(ИмяФайла)
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
	Возврат ПодключитьВнешнуюОбработкуСервер(Адрес);
	
КонецФункции

&НаКлиенте
Функция ОткрытьВнешнуюОбработку(ИмяФайла, ПараметрыФормы = Неопределено)
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
	ИмяОбработки = ПодключитьВнешнуюОбработкуСервер(Адрес);
	
	ОткрытьФорму(СтрШаблон("ВнешняяОбработка.%1.Форма", ИмяОбработки), ПараметрыФормы, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецФункции

#КонецОбласти //Функции_скрипта_клиент

#Область Редактирование_Текстов

&НаКлиенте
Функция УстановитьТекст(Текст) Экспорт 
	
	Если НЕ ДоступноРедактированиеНастройки() Тогда 
		
		ВызватьИсключение "Редактирование текущей настройки не доступно";
		
	КонецЕсли;
	
	ВыбраннаяНастройка_Текст.УстановитьТекст(Текст);
	
	Возврат ХранилищеНастроекПоместить();
	
КонецФункции

&НаКлиенте
Процедура ПриЗакрытииКЗ(Текст, ДополнительныеПараметры) Экспорт 
	Если Текст = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ВыбраннаяНастройка_Текст.УстановитьТекст(Текст);
	
	ПриИзмененииДанныхНастройки();
	
КонецПроцедуры

#Область Обработка_запроса
//удаляет из текста запроса всю шнягу которая там при переносе из модуля 
//(палки, кавычки, точки с запятой)
&НаКлиенте
Функция обПропылесоситьТекстЗапроса(ИсходныйТекст) Экспорт
	
	ИсходныйТекст = СокрЛП(ИсходныйТекст);
	
	//вертипалки
	ОбработанныйТекст	=	СтрЗаменить(ИсходныйТекст,"|","");
	
	//открывающая кавычка
	Пока Лев(ОбработанныйТекст,1) = Символ(34) Цикл
		ОбработанныйТекст = Сред(ОбработанныйТекст,2);
		//закрывающая кавычка удаляется только если была открывающая
		//иначе может быть глюк со строковым выражением в запросе
		Пока Прав(ОбработанныйТекст,1) = Символ(34) Цикл
			ОбработанныйТекст = Сред(ОбработанныйТекст,1,СтрДлина(ОбработанныйТекст)-1);
		КонецЦикла; 
	КонецЦикла; 
	//закрывающая точка с запятой
	Если Прав(ОбработанныйТекст,1) = ";" Тогда
		ОбработанныйТекст = Сред(ОбработанныйТекст,1,СтрДлина(ОбработанныйТекст)-1);
	КонецЕсли; 
	
	//двойные кавычки надо заменить на одинарные
	//Строка2Кавычки = Символ(34) + Символ(34);
	//Строка1Кавычка = Символ(34);
	
	//ОбработанныйТекст	=	СтрЗаменить(ОбработанныйТекст,Строка2Кавычки,Строка1Кавычка);
	
	Возврат ОбработанныйТекст;
	
КонецФункции //обПропылесоситьТекстЗапроса

&НаСервереБезКонтекста
Функция ПроверкаПередВыполнением(Знач ТекстЗапроса)
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		
		Возврат мОшибка("Не заполнен текст запроса!");
		
	КонецЕсли;
		
	Попытка
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.НайтиПараметры();
		
	Исключение
		
		Возврат мОшибка(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Новый Структура("Успешно", Истина);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьТекстДляМодуля(Знач ТекстЗапроса)
	
	ТекстМодуля = ТекстЗапроса;
	
	//одинарные кавычки надо заменить на двойные
	Строка2Кавычки = Символ(34) + Символ(34);
	Строка1Кавычка = Символ(34);
	ТекстМодуля	=	СтрЗаменить(ТекстМодуля, Строка1Кавычка, Строка2Кавычки);
	
	//открывающие и закрывающие 
	ТекстМодуля = Символ(34) + ТекстМодуля + Символ(34) + ";";
	
	
	ТекстДок = Новый ТекстовыйДокумент; 
	ТекстДок.УстановитьТекст(ТекстМодуля);
	
	Для сч = 2 по ТекстДок.КоличествоСтрок() Цикл
		Строка = ТекстДок.ПолучитьСтроку(сч);
		ТекстДок.ЗаменитьСтроку(сч,"|"+Строка);
	КонецЦикла;  
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Вариант1",Символы.ВК+ТекстДок.ПолучитьТекст());
	
	ТекстДок.ВставитьСтроку(0, 	
	"Запрос = Новый Запрос;
	|Запрос.Текст = 
	|" );
	
	
	//Для каждого СтрокаПараметров Из ПараметрыЗапроса Цикл
	//	ТекстПеременной = СформироватьСтрокуПолученияСсылкиПоГУИД(СтрокаПараметров.ЗначениеПараметра);
	//	ТекстМодуля = ТекстМодуля + Символы.ПС + "Запрос.УстановитьПараметр(" + Строка1Кавычка + СокрЛП(СтрокаПараметров.ИмяПараметра) + Строка1Кавычка + ", " + ТекстПеременной + ");"
	//КонецЦикла; 
	//
	//ТекстМодуля = ТекстМодуля + Символы.ПС + "Результат = Запрос.Выполнить();";
	//СтруктураПараметров.Вставить("Вариант2",Символы.ВК + ТекстМодуля);
	//ОткрытьФормуСовместимость82(мПутьКОбработке+".ВариантыЗапросаДляБуфераУпр",СтруктураПараметров);
	
	Возврат ТекстДок;
КонецФункции

&НаКлиенте
Процедура ВыбраннаяНастройка_ТекстПриИзменении(Элемент)
	
	ПриИзмененииДанныхНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакомментироватьВыделенныйТекст()
	Перем СтрНач,СтрКон,КолНач,КолКон;
	
	Элементы.ВыбраннаяНастройка_Текст.ПолучитьГраницыВыделения(СтрНач, КолНач, СтрКон, КолКон);
		
	Для сч = СтрНач по СтрКон Цикл
		НовСтрока = "//" + ВыбраннаяНастройка_Текст.ПолучитьСтроку(сч);
		ВыбраннаяНастройка_Текст.ЗаменитьСтроку(сч, НовСтрока);
	КонецЦикла;  
	
	ХранилищеПараметров.Вставить("ГраницыВыделения", Новый Структура("СтрНач, КолНач, СтрКон, КолКон", СтрНач, КолНач, СтрКон, КолКон));
	
	УстановитьГраницыВыделения();
	ПодключитьОбработчикОжидания("УстановитьГраницыВыделения", 0.1, Истина);
	
	ПриИзмененииДанныхНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГраницыВыделения()
	
	ГраницыВыделения = ХранилищеПараметров.ГраницыВыделения;
	Элементы.ВыбраннаяНастройка_Текст.УстановитьГраницыВыделения(ГраницыВыделения.СтрНач, ГраницыВыделения.КолНач, ГраницыВыделения.СтрКон, ГраницыВыделения.КолКон);
	
КонецПроцедуры

&НаКлиенте
Процедура РасКомментироватьВыделенныйТекст()
	Перем СтрНач,СтрКон,КолНач,КолКон;
	
	Элементы.ВыбраннаяНастройка_Текст.ПолучитьГраницыВыделения(СтрНач,КолНач,СтрКон,КолКон);
	
	Текст = ВыбраннаяНастройка_Текст;
	
	Для сч = СтрНач по СтрКон Цикл
		СтарСтрока = Текст.ПолучитьСтроку(сч);
		Если Не Лев(СтарСтрока,2) = "//" Тогда Продолжить КонецЕсли; 
		
		НовСтрока = Сред(СтарСтрока, 3, СтрДлина(СтарСтрока));
		Текст.ЗаменитьСтроку(сч, НовСтрока);
	КонецЦикла; 
		
	ХранилищеПараметров.Вставить("ГраницыВыделения", Новый Структура("СтрНач, КолНач, СтрКон, КолКон", СтрНач, КолНач, СтрКон, КолКон));
	
	УстановитьГраницыВыделения();
	ПодключитьОбработчикОжидания("УстановитьГраницыВыделения", 0.1, Истина);
	
	ПриИзмененииДанныхНастройки();
	
КонецПроцедуры


#КонецОбласти //Обработка_запроса

&НаКлиенте
Процедура ЗагрузитьЗапросДляОтладки(Команда)
	
	ОткрытьФорму("ВнешняяОбработка.CodeConsole83.Форма.ФормаЗагрузитьДляОтладки"
		, 
		, ЭтаФорма
		, , , 
		, Новый ОписаниеОповещения("ЗагрузитьЗапросДляОтладкиПродолжение", ЭтотОбъект)
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗапросДляОтладкиПродолжение(ДанныеЗагрузкиЗапроса, ДопПараметры) Экспорт 

	Если ДанныеЗагрузкиЗапроса = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Результат = ПолучитьДанныеЗапроса(ДанныеЗагрузкиЗапроса.Адрес, ДанныеЗагрузкиЗапроса.НеУдалятьИзХранилища, УникальныйИдентификатор);
	ОтобразитьПараметрыВФорме(Результат.Параметры);
	ВыбраннаяНастройка_Текст.УстановитьТекст(Результат.Текст);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеЗапроса(Знач АдресДанных, Знач НеУдалятьИзХранилища = Ложь, Знач УникальныйИдентификатор)
	
	ДанныеЗапроса = ПолучитьИзВременногоХранилища(АдресДанных);
	
	Если Не НеУдалятьИзХранилища Тогда 
		УдалитьИзВременногоХранилища(АдресДанных);
	КонецЕсли;
	
	ПараметрыЗапроса = Параметры_ИзвлечьИзТекста(ДанныеЗапроса.Текст).Параметры;
	СоответствиеПараметры = Новый Соответствие;
		
	Для Каждого Параметр Из ДанныеЗапроса.Параметры Цикл 
		
		Если НЕ ПараметрыЗапроса.Свойство(Параметр.Ключ) Тогда 
			
			ОписаниеПараметра = Новый Структура("ТипЗначения", ТипЗнч(Параметр.Значение));
			ПараметрыЗапроса.Вставить(Параметр.Ключ, ОписаниеПараметра);
			
		Иначе
			
			ОписаниеПараметра = ПараметрыЗапроса[Параметр.Ключ];
			
		КонецЕсли;
		
		Если ТипЗнч(Параметр.Значение) = Тип("ТаблицаЗначений") Тогда 
			
			ОписаниеПараметра.Вставить("ТипЗначения", Новый ОписаниеТипов);
			ОписаниеПараметра.Вставить("АдресДанных", ПоместитьВоВременноеХранилище(Параметр.Значение, УникальныйИдентификатор));
			
		Иначе
			
			ОписаниеПараметра.Вставить("Значение", Параметр.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("Текст, Параметры", ДанныеЗапроса.Текст, ПараметрыЗапроса);
	
КонецФункции

#КонецОбласти

#Область Параметры

&НаСервереБезКонтекста
Функция Параметры_ИзвлечьИзТекста(Знач ТекстЗапроса)
	
	мПараметры = Новый Структура;
	
	Попытка
		Запрос = Новый Запрос(ТекстЗапроса);
	Исключение
		
		Возврат Новый Структура("Выполнено, Описание", Ложь, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Для Каждого Параметр Из Запрос.НайтиПараметры() Цикл 
		
		Если Параметр.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда 
			
			ОписаниеПараметра = Новый Структура("ТипЗначения, АдресДанных", Новый ОписаниеТипов);
			
		Иначе
			
			ОписаниеПараметра = Новый Структура("ТипЗначения", Параметр.ТипЗначения);
			
		КонецЕсли;
		
		мПараметры.Вставить(Параметр.Имя, ОписаниеПараметра);
		
	КонецЦикла;
	
	Возврат Новый Структура("Выполнено, Параметры", Истина, мПараметры);
	
КонецФункции

&НаКлиенте
Процедура Параметры_ЗаполнитьНаКлиенте()
		
	ТекстЗапроса = ВыбраннаяНастройка_Текст.ПолучитьТекст();
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда 
		Возврат;
	КонецЕсли;
	
	Результат = Параметры_ИзвлечьИзТекста(ТекстЗапроса);
	
	Если НЕ Результат.Выполнено Тогда 
		
		СообщитьОбОшибке(Результат.Описание, "При получении параметров запроса");
		Возврат;
		
	КонецЕсли;
	
	ОтобразитьПараметрыВФорме(Результат.Параметры);
	
	ХранилищеНастроекПоместить(ПараметрыТекущейНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПараметрыВФорме(ПараметрыЗапроса)
	
	Для Каждого Элемент Из ПараметрыЗапроса Цикл 
		
		Параметр = Элемент.Значение;
		
		Значение = ПреобразоватьЗначениеДляОтображенияНаФорме(?(Параметр.Свойство("Значение"), Параметр.Значение, Неопределено));
		_АдресДанных = Неопределено;
		УстановитьЗначениеПараметра(Элемент.Ключ, Значение, Параметр.ТипЗначения, Параметр.Свойство("АдресДанных", _АдресДанных), _АдресДанных);
		
	КонецЦикла;
	
	ЗаполнитьПредставлениеТипаДанных();
	
	ПриИзмененииДанныхНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеПараметра(Имя, Значение, ТипЗначения = Неопределено, ИспользоватьАдресДанных = Ложь, АдресДанных = Неопределено)
	
	ПараметрыЗапроса = ВыбраннаяНастройка_Параметры;
	
	Строки = ПараметрыЗапроса.НайтиСтроки(Новый Структура("ИмяПараметра", Имя));
	
	Если Строки.Количество() = 0 Тогда 
		
		Стр = ПараметрыЗапроса.Добавить();
		Стр.ИмяПараметра = Имя;
		
	Иначе
		
		Стр = Строки[0];
		
	КонецЕсли;
	
	Если ИспользоватьАдресДанных Тогда
		
		Если ЭтоАдресВременногоХранилища(АдресДанных) Тогда 
			
			Стр.АдресДанных = АдресДанных;
			
		ИначеЕсли НЕ ЭтоАдресВременногоХранилища(Стр.АдресДанных) Тогда 
			
			Стр.АдресДанных = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			
		КонецЕсли;
		
	Иначе
		
		Стр.АдресДанных = Неопределено;
		
		Если ТипЗначения <> Неопределено Тогда 
			Стр.ТипПараметра = ТипЗначения;
		КонецЕсли;
				
		Если Значение = Неопределено Тогда
			
			Если ТипЗнч(Стр.ЗначениеПараметра) = Тип("СписокЗначений") Тогда
				
				Стр.ЗначениеПараметра.ТипЗначения = Стр.ТипПараметра;
				
			Иначе
				
				Стр.ЗначениеПараметра = ТипЗначения.ПривестиЗначение(Стр.ЗначениеПараметра);
				
			КонецЕсли;
			
		Иначе
			
			Стр.ЗначениеПараметра = Значение;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияПараметров(ЗначенияПараметров) Экспорт 
	
	Для Каждого Эл из ЗначенияПараметров Цикл 
		
		УстановитьЗначениеПараметра(Эл.Ключ, Эл.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПредставлениеТипаДанных()
	
	Для Каждого Стр Из ВыбраннаяНастройка_Параметры Цикл 
		
		Стр.ПредставлениеТипаДанных = ?(ЭтоАдресВременногоХранилища(Стр.АдресДанных), "Таблица значений", ТипЗнч(Стр.ЗначениеПараметра));
		Стр.ИспользоватьСписок = ТипЗнч(Стр.ЗначениеПараметра) = Тип("СписокЗначений");
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти //Параметры

#Область Настройки

// [TODO Оптимизация] Реализовать безконтекстное сохранение/загрузку. Корякин Алексей 30.07.2017 12:03:45
&НаСервере
Функция ХранилищеНастроекПолучитьАдресВременногоХранилища()
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	СохранитьНастройкиНаСервере(ИмяФайла);
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
КонецФункции

&НаКлиенте
Процедура ХранилищеНастроекИзвлечь(Знач ПараметрыНастройки = Неопределено)
	
	Если ПараметрыНастройки = Неопределено Тогда 
		
		ПараметрыНастройки = ПараметрыТекущейНастройки;

	КонецЕсли;
	
	Стр = ДанныеНастройки(ПараметрыНастройки);
	
	Если Стр = Неопределено Тогда 
		
		ВыбраннаяНастройка_Текст.Очистить();
		Возврат;
		
	КонецЕсли;
	
	ВыбраннаяНастройка_Текст.УстановитьТекст(Стр.Текст);
	
	ВыбраннаяНастройка_Параметры.Очистить();
	
	Для Каждого Параметр Из Стр.Параметры Цикл 
		
		ЗаполнитьЗначенияСвойств(ВыбраннаяНастройка_Параметры.Добавить(), Параметр);

	КонецЦикла;
	
	ЗаполнитьПредставлениеТипаДанных();
	
	Если ЭтоАлгоритм(ПараметрыНастройки) Тогда 
		
		ВыполнятьНаКлиенте = Стр.НаКлиенте;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ХранилищеНастроекПоместить(Знач ПараметрыНастройки = Неопределено) Экспорт 
	
	Если ПараметрыНастройки = Неопределено Тогда 
		ПараметрыНастройки = ПараметрыТекущейНастройки;
	КонецЕсли;
	
	Если НЕ ДоступноРедактированиеНастройки(ПараметрыНастройки) Тогда 
		
		Возврат Ложь;
		
	КонецЕсли;
		
	Стр = ТаблицаНастроек(ПараметрыНастройки.Тип).НайтиПоИдентификатору(ПараметрыНастройки.ИдентификаторДанные);
		
	Стр.Текст = ВыбраннаяНастройка_Текст.ПолучитьТекст();
	Стр.Параметры.Очистить();
	
	Для Каждого Параметр Из ВыбраннаяНастройка_Параметры Цикл 
		
		ЗаполнитьЗначенияСвойств(Стр.Параметры.Добавить(), Параметр);

	КонецЦикла;
	
	Если ЭтоАлгоритм(ПараметрыНастройки) Тогда 
		
		Стр.НаКлиенте = ВыполнятьНаКлиенте;
		
	КонецЕсли;
	
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииДанныхНастройки()
	
	Модифицированность = Истина;
	
КонецПроцедуры

#Область  Сериализация

&НаСервере
Функция СохранитьНастройкиНаСервере(ИмяФайла)
	
	СохраняемыеДанные = Новый Структура("Дерево, Запросы, Алгоритмы",
		РеквизитФормыВЗначение("Настройки_Дерево"),
		РеквизитФормыВЗначение("Настройки_Запросы"),
		РеквизитФормыВЗначение("Настройки_Алгоритмы"),
	);
	
	МассивНастроек = Новый Массив;
	МассивНастроек.Добавить(СохраняемыеДанные.Запросы);
	МассивНастроек.Добавить(СохраняемыеДанные.Алгоритмы);
	
	Для Каждого КоллекцияНастроек Из МассивНастроек Цикл 
		Для Каждого ЭлементНастройка Из КоллекцияНастроек Цикл 
			
			Для Каждого Параметр Из ЭлементНастройка.Параметры Цикл 
				
				Если ЭтоАдресВременногоХранилища(Параметр.АдресДанных) Тогда 
					
					Параметр.ЗначениеПараметра = ПолучитьИзВременногоХранилища(Параметр.АдресДанных);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ЭлементНастройка.Параметры.Колонки.Удалить("АдресДанных");
			
		КонецЦикла;
		
	КонецЦикла;
	ЗначениеВФайл(ИмяФайла, СохраняемыеДанные);
	
	// ЗначениеВФайл(ИмяФайла, РеквизитФормыВЗначение("ДеревоНастроек"));
	
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиНаСервере(Адрес)
	
	ИмяФайла = ПоместитьВФайл(Адрес);	
	Если ИмяФайла=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	вНастройки = ЗначениеИзФайла(ИмяФайла);
	УдалитьФайлы(ИмяФайла);
	
	
	Если ТипЗнч(вНастройки) = Тип("Структура") Тогда 
		
		Настройки_Дерево.ПолучитьЭлементы().Очистить();
		Дерево = РеквизитФормыВЗначение("Настройки_Дерево");
		
		Скопировать(вНастройки.Дерево, Дерево);
		
		МассивНастроек = Новый Массив;
		МассивНастроек.Добавить(вНастройки.Запросы);
		МассивНастроек.Добавить(вНастройки.Алгоритмы);
		
		Для Каждого КоллекцияНастроек Из МассивНастроек Цикл 
			
			Если КоллекцияНастроек.Колонки.Найти("ПараметрыЗапроса") <> Неопределено Тогда 
				КоллекцияНастроек.Колонки.ПараметрыЗапроса.Имя = "Параметры";
			КонецЕсли;
				
			Для Каждого ЭлементНастройка Из КоллекцияНастроек Цикл 
				
				Если ЭлементНастройка.Параметры.Колонки.Найти("АдресДанных") = Неопределено Тогда 
					ЭлементНастройка.Параметры.Колонки.Добавить("АдресДанных", Новый ОписаниеТипов("Строка"));
				КонецЕсли;
				
				Для Каждого Параметр Из ЭлементНастройка.Параметры Цикл 
					
					Если ТипЗнч(Параметр.ЗначениеПараметра) = Тип("ТаблицаЗначений") Тогда 
						
						Параметр.АдресДанных = ПоместитьВоВременноеХранилище(Параметр.ЗначениеПараметра, УникальныйИдентификатор);
						Параметр.ЗначениеПараметра = Неопределено;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		ЗначениеВРеквизитФормы(Дерево,"Настройки_Дерево");
		ЗначениеВРеквизитФормы(вНастройки.Алгоритмы, "Настройки_Алгоритмы");
		ЗначениеВРеквизитФормы(вНастройки.Запросы, "Настройки_Запросы");
		
	КонецЕсли;
	
	УстановитьКартинкуНастройки(Настройки_Дерево.ПолучитьЭлементы());
	
КонецПроцедуры

#КонецОбласти //Сериализация

&НаСервереБезКонтекста
Процедура УстановитьКартинкуНастройки(Элементы)
	
	Для Каждого Элемент Из Элементы Цикл 
		
		Элемент.Картинка = КартинкаПоТипуНастройки(Элемент.Тип);
		УстановитьКартинкуНастройки(Элемент.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиЗагрузитьНастройкиОбработки()
	
	ИмяФайлаОбработки = ПолучитьИмяФайлаОбработки();
	
	Файл = Новый Файл(ИмяФайлаОбработки);
	Если НЕ ФайлСуществует(Файл.Путь + "config.json") Тогда 
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Попытка
		
		Чтение = Новый ЧтениеJSON();
		Чтение.ОткрытьФайл(Файл.Путь + "config.json");
		НастройкиОбработки = ПрочитатьJSON(Чтение, Истина);
		Чтение.Закрыть();
		
	Исключение
		
		СообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), "Загрузка настроек обработки");
		
	КонецПопытки;
	
КонецФункции

#Область Проверка_типа_настройки

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЗапрос(Тип)
	
	Возврат Тип <> Неопределено И ((ТипЗнч(Тип) = Тип("Структура") И Тип.Тип = 0) ИЛИ Тип = 0);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоАлгоритм(Тип)
	
	Возврат Тип <> Неопределено И ((ТипЗнч(Тип) = Тип("Структура") И Тип.Тип = 1) ИЛИ Тип = 1);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоГруппа(Тип)

	Возврат Тип <> Неопределено И ((ТипЗнч(Тип) = Тип("Структура") И Тип.Тип = 9) ИЛИ Тип = 9);
	
КонецФункции

#КонецОбласти //Проверка_типа_настройки

#КонецОбласти

#Область Получение_настроек

&НаКлиенте
Функция ТаблицаНастроек(Тип)
	Если ЭтоЗапрос(Тип) Тогда 
		
		Возврат Настройки_Запросы;
		
	ИначеЕсли ЭтоАлгоритм(Тип) Тогда 
		
		Возврат Настройки_Алгоритмы;
		
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ДанныеНастройки(ПараметрыНастройки) Экспорт 
	Если ПараметрыНастройки = Неопределено ИЛИ НЕ ПараметрыНастройки.Свойство("ИдентификаторДанные") Тогда 
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ТаблицаНастроек(ПараметрыНастройки.Тип).НайтиПоИдентификатору(ПараметрыНастройки.ИдентификаторДанные);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыНастройки(КлючНастройки)
	
	Если КлючНастройки = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
		
	СтрН = НайтиВДеревеФормы(Настройки_Дерево.ПолучитьЭлементы(), "Ключ", КлючНастройки);
	
	Если СтрН = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	Результат = Новый Структура;
	
	Результат.Вставить("Ключ", КлючНастройки);
	Результат.Вставить("Тип", СтрН.Тип);
	Результат.Вставить("Идентификатор", СтрН.ПолучитьИдентификатор());
	
	ТаблицаДанные = ТаблицаНастроек(СтрН.Тип);
	
	Если ТаблицаДанные <> Неопределено Тогда 
		Строки = ТаблицаДанные.НайтиСтроки(Новый Структура("Ключ", КлючНастройки));
		
		Результат.Вставить("ИдентификаторДанные", Строки[0].ПолучитьИдентификатор());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьРодителяНастройки(СтрокаНастройки)
	
	Возврат ?(СтрокаНастройки = Неопределено ИЛИ СтрокаНастройки.ПолучитьРодителя() = Неопределено, Настройки_Дерево, СтрокаНастройки.ПолучитьРодителя());

КонецФункции
// Функция - Добавить настройку
//
// Параметры:
//  Тип	 - Число	 - 0 - Запрос, 1 - Скрипт, 9 -Группа
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте
Функция ДобавитьНастройку(Тип, Родитель = Неопределено)
	
	Если Родитель = Неопределено Тогда 
		
		Если ЭтоГруппа(ПараметрыТекущейНастройки) Тогда 
			
			Родитель = Настройки_Дерево.НайтиПоИдентификатору(ПараметрыТекущейНастройки.Идентификатор);
			
		Иначе
			
			Родитель = ПолучитьРодителяНастройки(Элементы.Настройки_Дерево.ТекущиеДанные);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Стр = Родитель.ПолучитьЭлементы().Добавить();
	Стр.Тип = Тип;
	Стр.Ключ = Новый УникальныйИдентификатор;
	Стр.Картинка = КартинкаПоТипуНастройки(Тип);
	
	Если ЭтоЗапрос(Тип) Тогда
		
		СтрДанные = Настройки_Запросы.Добавить();
		
	ИначеЕсли ЭтоАлгоритм(Тип) Тогда 
		
		СтрДанные = Настройки_Алгоритмы.Добавить();
		
	КонецЕсли;
	
	Если СтрДанные <> Неопределено Тогда 
		СтрДанные.Ключ = Стр.Ключ;
	КонецЕсли;
	
	Возврат Стр;
	
КонецФункции

&НаКлиенте
Функция СкопироватьТекущуюНастройку()
	
	ТекущиеДанные = Элементы.Настройки_Дерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Стр = СкопироватьНастройку(ТекущиеДанные, Неопределено);
	
	Элементы.Настройки_Дерево.ТекущаяСтрока = Стр.ПолучитьИдентификатор();	
	ПриИзмененииДанныхНастройки();
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СкопироватьНастройку(Источник, Приемник)
	
	НоваяСтрока = ДобавитьНастройку(Источник.Тип, Приемник);
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник, , "Ключ");
	
	Если НЕ ЭтоГруппа(Источник.Тип) Тогда 
		
		ХранилищеНастроек 	= ТаблицаНастроек(Источник.Тип);
		ХранилищеНовой 		= ХранилищеНастроек.НайтиПоИдентификатору(ПолучитьПараметрыНастройки(НоваяСтрока.Ключ).ИдентификаторДанные);
		ХранилищеКопируемой = ХранилищеНастроек.НайтиПоИдентификатору(ПолучитьПараметрыНастройки(Источник.Ключ).ИдентификаторДанные);
		
		ЗаполнитьЗначенияСвойств(ХранилищеНовой, ХранилищеКопируемой, , "Ключ, Параметры");
		Скопировать(ХранилищеКопируемой.Параметры, ХранилищеНовой.Параметры);
		
	Иначе
		
		Для Каждого Стр Из ПолучитьКоллекцию(Источник) Цикл 
			
			СкопироватьНастройку(Стр, НоваяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Функция УдалитьНастройку(Знач Настройка = Неопределено)
	
	Если Настройка = Неопределено Тогда 
		Настройка = Элементы.Настройки_Дерево.ТекущиеДанные;
	КонецЕсли;
	
	Если Настройка = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыТекущейНастройки = Неопределено;
	
	Если НЕ ЭтоГруппа(Настройка.Тип) Тогда 
		ХранилищеНастроек 	= ТаблицаНастроек(Настройка.Тип);
		ХранилищеНастроек.Удалить(ХранилищеНастроек.НайтиПоИдентификатору(ПолучитьПараметрыНастройки(Настройка.Ключ).ИдентификаторДанные));
	КонецЕсли;
	
	ПолучитьРодителяНастройки(Настройка).ПолучитьЭлементы().Удалить(Настройка);
	
	Возврат Истина;
	
КонецФункции
#КонецОбласти //Получение_настроек

//////////////////////////////////////////////////
/////Интерфейсные методы, обработчики команд
//////////////////////////////////////////////////

#Область Форма

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КонсольКода_ЗагрузитьИзВременногоХранилища" Тогда 
		Сообщить("Адрес данных: " + Параметр);
		ЗагрузитьТаблицу(Параметр);
		
		Если ТипЗнч(Источник) = Тип("УправляемаяФорма") И Источник.Открыта() Тогда 
			Источник.Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовок()
	
	Заголовок = "Консоль кода. " + 
		ПараметрыПубликации()["version"] + 
		?(ПустаяСтрока(ИмяФайлаНастроек), "", ": " + ИмяФайлаНастроек);
	
КонецПроцедуры

#Область События

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда 
		
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаВопросаПриЗакрытии", ЭтотОбъект), "Настройки не сохранены. Закрыть?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаПриЗакрытии(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		
		Модифицированность = Ложь;
		ЭтотОбъект.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РезультатТаблица_Адрес = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	НайтиЗагрузитьНастройкиОбработки();
	
	ХранилищеПараметров = Новый Структура;
	
	Если НЕ ПустаяСтрока(ИмяФайлаНастроек)Тогда 
		Адрес = ЗагрузитьФайлНаСервер(ИмяФайлаНастроек);
		
		Если ЭтоАдресВременногоХранилища(Адрес) Тогда 
			ЗагрузитьНастройкиНаСервере(Адрес);
		КонецЕсли;
	Иначе
		
		ДобавитьНастройку(0);
		Модифицированность = Ложь;
		
	КонецЕсли;
	УстановитьЗаголовок();
	
	Рандом = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах() % 2147483647);
	Если Рандом.СлучайноеЧисло() % 3 = 1 Тогда 
		
		ПодключитьОбработчикОжидания("ПроверитьНаличиеОбновление", 10, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Команды

#Область Настройки

&НаКлиенте
Функция НоваяНастройка(Команда = Неопределено) Экспорт 
	
	ОчиститьНастройки();
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)
	
	ИмяВыбранногоФайла = ВыбратьФайлДляОткрытия(
		"Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*",
		"Укажите файл Для списка запросов",
		ИмяФайлаНастроек,
		ПутьФайлаЗапроса,
		"sel"
	);
	
	ЗагрузитьНастройкиИзФайла(ИмяВыбранногоФайла);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	ХранилищеНастроекПоместить(ПараметрыТекущейНастройки);
	
	Если Команда.Имя = "Файл_СохранитьНастройкиКак" ИЛИ ПустаяСтрока(ИмяФайлаНастроек) Тогда 
		ИмяВыбранногоФайла = ВыбратьФайлДляСохранения(
			"Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*",
			"Укажите файл Для списка запросов",
			ИмяФайлаНастроек,
			ПутьФайлаЗапроса,
			"sel"
		);
		
		СохранитьНастройкуВФайл(ИмяВыбранногоФайла);

	Иначе
		
		СохранитьНастройкуВФайл(ИмяФайлаНастроек);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьНастройкиИзФайла(ИмяВыбранногоФайла) Экспорт 
	
	Если ИмяВыбранногоФайла = Неопределено Тогда 
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПараметрыТекущейНастройки = Неопределено;
	
	Адрес = ЗагрузитьФайлНаСервер(ИмяВыбранногоФайла);
	Если НЕ ЭтоАдресВременногоХранилища(Адрес) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ЗагрузитьНастройкиНаСервере(Адрес);
	
	ПослеСохраненияИлиЗагрузкиНастроек(ИмяВыбранногоФайла);
		
	УстановитьЗаголовок();
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СохранитьНастройкуВФайл(ИмяВыбранногоФайла) Экспорт 
	
	Если ИмяВыбранногоФайла = Неопределено Тогда 
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Адрес = ХранилищеНастроекПолучитьАдресВременногоХранилища();	
	ПолучитьФайл(Адрес, ИмяВыбранногоФайла, Ложь);
	УдалитьИзВременногоХранилища(Адрес);
	
	ПослеСохраненияИлиЗагрузкиНастроек(ИмяВыбранногоФайла);
	
	ПоказатьОповещениеПользователя("Настройки сохранены", , ИмяФайлаНастроек);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьНастройки()
	
	ПараметрыТекущейНастройки = Неопределено;
	
	Настройки_Дерево.ПолучитьЭлементы().Очистить();
	Настройки_Алгоритмы.Очистить();
	Настройки_Запросы.Очистить();
	
	ПослеСохраненияИлиЗагрузкиНастроек(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияИлиЗагрузкиНастроек(ИмяФайла)
	
	Модифицированность = Ложь;
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда 
		
		Файл = Новый Файл(ИмяФайла);
		ИмяФайлаНастроек = ИмяФайла;
		ПутьФайлаЗапроса = Файл.Путь;
		
	Иначе
		
		ИмяФайлаНастроек = Неопределено;
		ПутьФайлаЗапроса = Неопределено;
		
	КонецЕсли;
	
	УстановитьЗаголовок();
	
КонецПроцедуры

#КонецОбласти //Настройки

#Область Редактор

&НаКлиенте
Процедура Редактор_Раскомментировать(Команда)
	РасКомментироватьВыделенныйТекст();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросСкрипт(Команда)
	
	ХранилищеНастроекПоместить(ПараметрыТекущейНастройки);
	
	Если НЕ МожноВыполнить() Тогда 
		Возврат;
	КонецЕсли;
	
	ВыполнитьНастройку(ПараметрыТекущейНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТекстДляМодуля(Команда)
	
	ТекстДок = СформироватьТекстДляМодуля(ВыбраннаяНастройка_Текст.ПолучитьТекст());
	
	ТекстДок.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекстЗапросаОтМусора()
	
	ВыбраннаяНастройка_Текст.УстановитьТекст(обПропылесоситьТекстЗапроса(ВыбраннаяНастройка_Текст.ПолучитьТекст()));
	
КонецПроцедуры // ОчиститьТекстЗапросаОтМусора()

&НаКлиенте
Процедура Редактор_ОткрытьКонструкторЗапроса(Команда)
	
	ТекстЗапроса = ВыбраннаяНастройка_Текст.ПолучитьТекст();
	Контсруктор = Новый КонструкторЗапроса(?(ПустаяСтрока(ТекстЗапроса) ,Неопределено, ТекстЗапроса));

	Контсруктор.Показать(Новый ОписаниеОповещения("ПриЗакрытииКЗ", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура Редактор_Закомментировать(Команда)
	ЗакомментироватьВыделенныйТекст();
КонецПроцедуры

&НаКлиенте
Процедура Параметры_Заполнить(Команда)
	
	Параметры_ЗаполнитьНаКлиенте();
	
КонецПроцедуры

#КонецОбласти //Редактор

#Область Таблица_результат

&НаКлиенте
Процедура Таблица_НастроитьКолонки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПрименитьНастройкиТаблицы", ЭтаФорма);
	ОткрытьФорму("ВнешняяОбработка.CodeConsole83.Форма.ФормаНастройкаТаблицы", Новый Структура("Данные", СтруктураТаблицы), ЭтаФорма, , , ,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Результат_ДобавитьВПараметры(Команда)
	Значение = ЗначениеТекущейЯчейки();
	
	ИмяПараметра = Элементы.РезультатТаблица.ТекущийЭлемент.Заголовок;
	
	УстановитьЗначениеПараметра(ИмяПараметра, Значение);
КонецПроцедуры

#КонецОбласти //Таблица_результат

&НаКлиенте
Процедура ПереключитьВидимость(Команда)
	Элемент = Неопределено;
	Кнопка = Неопределено;
	
	ИзменяемыеЭлементы = Новый Массив;
	
	Если Команда.Имя = "Видимость_Дерево_Настроек" Тогда 
		Элемент = Элементы.Настройки_Дерево;
		ИзменяемыеЭлементы.Добавить(Элемент);
		ИзменяемыеЭлементы.Добавить(Элементы.Настройки_ДеревоГруппаДобавить);
		Кнопка = Элементы.Видимость_Дерево_Настроек;
	ИначеЕсли Команда.Имя = "Видимость_Параметры" Тогда 
		Элемент = Элементы.ГруппаСтранницыПараметры;
		ИзменяемыеЭлементы.Добавить(Элемент);
		Кнопка = Элементы.Видимость_Параметры;
	КонецЕсли;
	
	ВидимостьНовая = НЕ Элемент.Видимость;
	
	Для Каждого Эл Из ИзменяемыеЭлементы Цикл 
		Эл.Видимость = ВидимостьНовая;
	КонецЦикла;
	
	Кнопка.Пометка = ВидимостьНовая;
	//Кнопка.ЦветФона = ?(Элемент.Видимость, WebЦвета.Белый, WebЦвета.Серебряный);
КонецПроцедуры

#Область  Дерево_настроек
&НаКлиенте
Процедура Настройки_ДобавитьНастройку(Команда)
	
	Если Команда.Имя = "Настройки_ДобавитьЗапрос" Тогда 
		Тип = 0;
	ИначеЕсли Команда.Имя = "Настройки_ДобавитьСкрипт" Тогда 
		Тип = 1;
	ИначеЕсли Команда.Имя = "Настройки_ДобавитьГруппу" Тогда 
		Тип = 9;
	КонецЕсли;
	
	Если Тип= Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Стр = ДобавитьНастройку(Тип);
	
	Элементы.Настройки_Дерево.ТекущаяСтрока = Стр.ПолучитьИдентификатор();	
	ПриИзмененииДанныхНастройки();
	
	ЭтаФорма.ТекущийЭлемент = Элементы.Настройки_Дерево;
	
КонецПроцедуры

#КонецОбласти //Дерево_настроек

#КонецОбласти

#Область События_элементов_формы

#Область  ДеревоНастроек

&НаКлиенте
Процедура Настройки_ДеревоПриАктивизацииСтроки(Элемент)
	
	// Сохраним предыдущую настройку
	ХранилищеНастроекПоместить(ПараметрыТекущейНастройки);
	
	// Получим параметры и отобразим новую
	КлючТекущейНастройки = ?(Элементы.Настройки_Дерево.ТекущиеДанные = Неопределено, Неопределено, Элементы.Настройки_Дерево.ТекущиеДанные.Ключ);
	
	ПараметрыТекущейНастройки = ПолучитьПараметрыНастройки(КлючТекущейНастройки);
	
	УстановитьНастройкиИнфтерфейса(ПараметрыТекущейНастройки);
	ХранилищеНастроекИзвлечь(ПараметрыТекущейНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки_ДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	Если НЕ Копирование Тогда 
		Возврат;
	КонецЕсли;
	
	СкопироватьТекущуюНастройку();
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки_ДеревоПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	УдалитьНастройку();
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки_ДеревоНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда 
		
		ПараметрыПеретаскивания.Значение = ПараметрыПеретаскивания.Значение[0];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки_ДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПеретаскиваемаяСтрока = Настройки_Дерево.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	Приемник = ?(Строка = Неопределено, Неопределено, Настройки_Дерево.НайтиПоИдентификатору(Строка));
	
	Отказ = (Приемник = Неопределено) ИЛИ (НЕ ЭлементПодченен(Приемник, ПеретаскиваемаяСтрока));
	
	ПараметрыПеретаскивания.Действие = ?(Отказ, ДействиеПеретаскивания.Перемещение, ДействиеПеретаскивания.Отмена);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки_ДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Значение = Настройки_Дерево.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	Приемник = ?(Строка = Неопределено, Неопределено, Настройки_Дерево.НайтиПоИдентификатору(Строка));
	
	РодительЗначение = ПолучитьРодителяНастройки(Значение);
	РодительПриемник = ПолучитьРодителяНастройки(Приемник);
	
	Если Приемник <> Неопределено И РодительЗначение = РодительПриемник И НЕ ЭтоГруппа(Приемник.Тип) Тогда 
		
		ПриИзмененииДанныхНастройки();		
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Приемник = Неопределено И РодительЗначение = РодительПриемник Тогда 
		
		Коллекция = Настройки_Дерево.ПолучитьЭлементы();
		Индекс = Коллекция.Индекс(Значение);
		Коллекция.Сдвинуть(Индекс, Коллекция.Количество() - Индекс - 1);
		
		ПриИзмененииДанныхНастройки();		
		Возврат;
		
	КонецЕсли;
	
	Если Приемник = Неопределено тогда
		
		Приемник = Настройки_Дерево;
		
	ИначеЕсли НЕ ЭтоГруппа(Приемник.Тип) тогда
		
		Родитель = Приемник.ПолучитьРодителя();
		
		Если Родитель <> Неопределено И ЭтоГруппа(Родитель.Тип) Тогда
			
			Приемник = Приемник.ПолучитьРодителя();
			
		иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НовСтр = СкопироватьНастройку(Значение, Приемник);
	
	УдалитьНастройку(Значение);
	
	Элементы.Настройки_Дерево.ТекущаяСтрока = НовСтр.ПолучитьИдентификатор();	
	ПриИзмененииДанныхНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки_ДеревоПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ЭтоГруппа(ПараметрыТекущейНастройки.Тип) Тогда 
		
		ЭтаФорма.ТекущийЭлемент = Элементы.ВыбраннаяНастройка_Текст;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти //ДеревоНастроек

#Область Параметры

&НаКлиенте
Процедура ВыбраннаяНастройка_ПараметрыПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элемент.ТекущиеДанные.ЗначениеПараметра) = Тип("СписокЗначений") Тогда 
		
		Элементы.ВыбраннаяНастройка_ПараметрыЗначение.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		
	Иначе
		
		Элементы.ВыбраннаяНастройка_ПараметрыЗначение.ОграничениеТипа = Элемент.ТекущиеДанные.ТипПараметра;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбраннаяНастройка_ПараметрыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВыбраннаяНастройка_ПараметрыИспользоватьСписок" Тогда 
		
		Данные = Элемент.ТекущиеДанные;
		
		Если Данные = Неопределено ИЛИ ЭтоАдресВременногоХранилища(Данные.АдресДанных) Тогда 
			
			Возврат;
			
		КонецЕсли;
		
		ЭтоСписок = ТипЗнч(Данные.ЗначениеПараметра) = Тип("СписокЗначений");
		ЭтоСписок = НЕ ЭтоСписок;
		
		Если ЭтоСписок Тогда 
			
			Значение = Новый СписокЗначений;
			Значение.ТипЗначения = Данные.ТипПараметра;
			
			Если ЗначениеЗаполнено(Данные.ЗначениеПараметра) Тогда 
				Значение.Добавить(Данные.ЗначениеПараметра);
			КонецЕсли;
			
		Иначе
			
			Значение = Данные.ТипПараметра.ПривестиЗначение(?(Данные.ЗначениеПараметра.Количество(), Данные.ЗначениеПараметра[0].Значение, Неопределено));
			
		КонецЕсли;
		
		Данные.ЗначениеПараметра = Значение;
		
		ВыбраннаяНастройка_ПараметрыПриАктивизацииСтроки(Элемент);
		
		ПриИзмененииДанныхНастройки();
		
		ЗаполнитьПредставлениеТипаДанных();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбраннаяНастройка_ПараметрыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Данные = Элементы.ВыбраннаяНастройка_Параметры.ТекущиеДанные;
	Если ЭтоАдресВременногоХранилища(Данные.АдресДанных) Тогда 
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("ВнешняяОбработка.CodeConsole83.Форма.ФормаРедакторТаблицы", Новый Структура("АдресДанныхТЗ", Данные.АдресДанных), ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбраннаяНастройка_ПараметрыПередНачаломИзменения(Элемент, Отказ)
	
	Значение = Элементы.ВыбраннаяНастройка_Параметры.ТекущиеДанные.ЗначениеПараметра;
	
	Если ТипЗнч(Значение) = Тип("Граница") Тогда 

		Форма = ОткрытьФорму("ВнешняяОбработка.CodeConsole83.Форма.ФормаРедакторГраница", 
			Новый Структура("Граница", Значение), 
			// По какой-то причине не отрабатывает события "ОбработкаВыбора" на поле значения 
			Элемент, , , , , 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Форма.Инициализировать(ЭтаФорма);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбраннаяНастройка_ПараметрыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Элементы.ВыбраннаяНастройка_Параметры.ТекущиеДанные.ЗначениеПараметра = ВыбранноеЗначение;
	
КонецПроцедуры

#КонецОбласти //Параметры

&НаКлиенте
Процедура РезультатТаблицаПриАктивизацииЯчейки(Элемент)
	ПодключитьОбработчикОжидания("ВывестиОписаниеЗначенияТаблицы", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура РезультатТаблицаПриИзменении(Элемент)
	ТаблицаИзменена = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Результат_ВременныеТаблицыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Результат_ВременныеТаблицы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ РезультатВыполнения = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ТекущиеДанные.АдресДанных) Тогда 
		ЗагрузитьТаблицу(ТекущиеДанные.АдресДанных);
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти //События_элементов_формы

#Область Таблица_результата

&НаКлиенте
Функция ЗначениеТекущейЯчейки()
	Элемент = Элементы.РезультатТаблица;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Элемент.ТекущиеДанные[ИмяТекущейКолонки()];
	
КонецФункции

&НаКлиенте
Функция ИмяТекущейКолонки()
	
	Возврат Элементы.РезультатТаблица.ТекущийЭлемент.Заголовок;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвойстваЗначения(Значение)
	
	Результат = Новый Структура("Выполнено, Описание", Истина);
	
	ТипЗначения = ТипЗнч(Значение);
	
	Описание = Новый СписокЗначений;
	
	Результат.Вставить("ОписаниеЗначения", Описание);
	
	Если НЕ ОписаниеТиповВсеСсылки().СодержитТип(ТипЗначения) Тогда 
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Описание.Добавить(Значение.УникальныйИдентификатор(), "UID");
	Исключение
	КонецПопытки;
	
	ЗначениеЗаполнено = ЗначениеЗаполнено(Значение);
	
	Попытка
		Мета = Метаданные.НайтиПоТипу(ТипЗначения);
		
		Если ЗначениеЗаполнено И Метаданные.Перечисления.Содержит(Мета) Тогда 
			
			Порядок = ЗначениеЗапросом("ВЫБРАТЬ " + Мета.ПолноеИмя() + ".Порядок ГДЕ Ссылка = &Ссылка", Новый Структура("Ссылка", Значение));
			МетаЗначение = Мета.ЗначенияПеречисления[Порядок];
			Описание.Добавить(Мета.ПолноеИмя() + "." + МетаЗначение.Имя, "Полное имя");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено И Метаданные.Справочники.Содержит(Мета)
			ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(Мета)
			ИЛИ Метаданные.ПланыСчетов.Содержит(Мета)
			ИЛИ Метаданные.ПланыВидовРасчета.Содержит(Мета) Тогда 
			
			ИмяПредопределенного = ЗначениеЗапросом("ВЫБРАТЬ " + Мета.ПолноеИмя() + ".ИмяПредопределенныхДанных ГДЕ Ссылка = &Ссылка", Новый Структура("Ссылка", Значение));
			
			Если ЗначениеЗаполнено(ИмяПредопределенного) Тогда 
				Описание.Добавить(Мета.ПолноеИмя() + "." + ИмяПредопределенного, "Полное имя");
			КонецЕсли;
			
		КонецЕсли;		
	Исключение
		
		Возврат мОшибка(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВывестиОписаниеЗначенияТаблицы()
	
	Значение = ЗначениеТекущейЯчейки();
	
	Если Значение = Неопределено Тогда 
		Служебные_ОписаниеТекущегоЗначения = Неопределено;
		Возврат;
	КонецЕсли;
	
	
	// Костыль от зацикливания
	Если ХранилищеПараметров.Свойство("ТекущееЗначениеТаблицы") И Значение = ХранилищеПараметров.ТекущееЗначениеТаблицы Тогда 
		Возврат;
	КонецЕсли;
	
	ХранилищеПараметров.Вставить("ТекущееЗначениеТаблицы", Значение);
	
	Описание = Новый СписокЗначений;	
	
	Описание.Добавить(Значение, "Значение");
	Описание.Добавить(ПолучитьПолноеИмяТипа(ТипЗнч(Значение)), "Тип");
	
	ХранилищеПараметров.Вставить("ТекущееЗначениеТаблицы_Описание", Описание);
	
	Служебные_ОписаниеТекущегоЗначения = ФорматированноеОписаниеСписок(Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура Служебные_ОписаниеТекущегоЗначенияНажатие(Элемент, СтандартнаяОбработка)
	
	Если НЕ ХранилищеПараметров.Свойство("ТекущееЗначениеТаблицы_Описание") Тогда 
		Возврат;
	КонецЕсли;
	
	// Не дополненное описание	
	Если ХранилищеПараметров.ТекущееЗначениеТаблицы_Описание.Количество() = 2 Тогда 
		
		ХранилищеПараметров.ТекущееЗначениеТаблицы_Описание.Добавить(ИмяТекущейКолонки(), "Имя реквизита");
		Результат = ПолучитьСвойстваЗначения(ХранилищеПараметров.ТекущееЗначениеТаблицы_Описание[0].Значение);
		
		Если НЕ Результат.Выполнено Тогда 
			СообщитьОбОшибке(Результат.Описание, "Получение описания значения");
			Возврат;
		КонецЕсли;
		
		Скопировать(Результат.ОписаниеЗначения, ХранилищеПараметров.ТекущееЗначениеТаблицы_Описание);
				
	КонецЕсли;
		
	ОткрытьФорму(ИмяФормы + "Свойств", 
			Новый Структура("Список", ХранилищеПараметров.ТекущееЗначениеТаблицы_Описание), 
			ЭтаФорма, , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиТаблицы(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда 
		
		СтруктураТаблицы = ПрименитьНастройкиТаблицыСервер(Результат, РезультатТаблица_Адрес);
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Функция ПрименитьНастройкиТаблицыСервер(СтруктураТаблицы, АдресТаблицы)

	Таблица = РеквизитФормыВЗначение("РезультатТаблица");
	
	НовыеКолонки = Новый Массив;
	УдаляемыеКолонки = Новый Массив;
	ИзмененныеКолонки = Новый Массив;
	
	ИндексКолонок = Новый Структура;
	
	Для Каждого Колонка Из СтруктураТаблицы Цикл 
		ИндексКолонок.Вставить(Колонка.Имя, Колонка);
		
		КолонкаТаблицы = Таблица.Колонки.Найти(Колонка.Имя);
		Если КолонкаТаблицы = Неопределено Тогда 
			НовыеКолонки.Добавить(Колонка);			
		ИначеЕсли КолонкаТаблицы.ТипЗначения <> Колонка.ТипЗначения Тогда 
			ИзмененныеКолонки.Добавить(Колонка);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КолонкаТаблицы Из Таблица.Колонки Цикл 
		
		Колонка = ИндексКолонок[Колонка.Имя];
		
		Если Колонка = Неопределено Тогда 
			
			УдаляемыеКолонки.Добавить(КолонкаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Колонка Из НовыеКолонки Цикл 
		
		Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок);
		
	КонецЦикла;
	
	Для Каждого Колонка Из УдаляемыеКолонки Цикл 
		
		Таблица.Колонки.Удалить(Колонка);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Таблица, АдресТаблицы);

	Возврат ВывестиТаблицу(Таблица);
	
КонецФункции

#КонецОбласти //Таблица_результата

&НаКлиенте
Процедура УстановитьНастройкиИнфтерфейса(ПараметрыНастройки)

	ИспользоватьРедактор = ПараметрыНастройки <> Неопределено И (ЭтоЗапрос(ПараметрыНастройки) ИЛИ ЭтоАлгоритм(ПараметрыНастройки));
	Если ИспользоватьРедактор И ЭтоЗапрос(ПараметрыНастройки) Тогда 
		
		Элементы.ГруппаКоманды.ТекущаяСтраница = Элементы.ГруппаЗапрос;
		
	ИначеЕсли ИспользоватьРедактор И ЭтоАлгоритм(ПараметрыНастройки) Тогда 
	
		Элементы.ГруппаКоманды.ТекущаяСтраница = Элементы.ГруппаСкрипт;
		
	КонецЕсли;
		
	Элементы.ГруппаРедактор.Доступность = ИспользоватьРедактор;
	Элементы.ТекстЗапросаКонтекстноеМенюОткрытьКонструкторЗапроса.Доступность = ИспользоватьРедактор И ЭтоЗапрос(ПараметрыНастройки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КартинкаПоТипуНастройки(Тип)
	Если ЭтоЗапрос(Тип) Тогда 
		
		Возврат БиблиотекаКартинок.КонструкторЗапроса;
		
	ИначеЕсли ЭтоАлгоритм(Тип) Тогда 
		
		Возврат БиблиотекаКартинок.ПроизвольноеВыражение;
		
	ИначеЕсли ЭтоГруппа(Тип) Тогда 
		
		Возврат БиблиотекаКартинок.ВнешнийИсточникДанныхКуб;
		
	КонецЕсли;
КонецФункции
