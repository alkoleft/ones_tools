#Область База

&НаКлиенте
Перем Ядро;

&НаКлиенте
Функция Инициализировать(пЯдро) Экспорт 
	
	Ядро = пЯдро;
	
	Возврат ОписаниеПлагина();
	
КонецФункции

&НаКлиенте
Функция Уничтожить() Экспорт
	
	Ядро = Неопределено;
	
КонецФункции

&НаКлиенте
Функция ОписаниеПлагина() Экспорт 
	
	Описание = Новый Структура;
	Описание.Вставить("Имя", "SQL");
	Описание.Вставить("Представление", "SQL");
	Описание.Вставить("Ключ", "SQL");
	
	Описание.Вставить("Функциональность", Новый Массив);
	Описание.Функциональность.Добавить(Ядро.БазовыеОперации.ВыполнениеСкрипта);
	
	Описание.Вставить("Подключение", "ФормаSQL");
	Описание.Вставить("КодТипа", 3);
	Описание.Вставить("Выполнение", Истина);
	Описание.Вставить("КлиентСервер", Истина);
	Описание.Вставить("Иконка", Элементы.Декорация1.Картинка);
	Описание.Вставить("Команды", Новый Массив);
	Описание.Команды.Добавить(Новый Структура("Имя, ИмяКоманды, Действие", "УстановитьСоединение", "УстановитьСоединение", "ВыполнитьКомандуПлагина"));
	
	Возврат Описание;
	
КонецФункции // ОписаниеПлагина

&НаКлиенте
Функция ЕстьПоддержкаФункционала(Функционал, Параметры) Экспорт 
	
	Возврат Функционал = Ядро.БазовыеОперации.ВыполнениеСкрипта;
	
КонецФункции // ЕстьПоддержкаФункционала

#КонецОбласти // База

&НаКлиенте
Функция УстановитьСоединение() Экспорт 
	
	Данные = Новый Массив;
	Провайдеры = Новый СписокЗначений;
	Провайдеры.Добавить("SQLOLEDB.1");
	Провайдеры.Добавить("SQLNCLI10");
	Провайдеры.Добавить("SQLNCLI11");
	
	Данные.Добавить(Новый Структура("Имя, Тип, Обязательное, СписокВыбора, РежимВыбораИзСписка", "Провайдер", "Строка", Истина, Провайдеры, Истина));
	Данные.Добавить(Новый Структура("Имя, Тип, Обязательное", "Сервер", "Строка", Истина));
	Данные.Добавить(Новый Структура("Имя, Тип, Обязательное", "БазаДанных", "Строка", Ложь));
	Данные.Добавить(Новый Структура("Имя, Тип, Обязательное", "Пользователь", "Строка", Ложь));
	Данные.Добавить(Новый Структура("Имя, Тип, Обязательное", "Пароль", "Строка", Ложь));
	Данные.Добавить(Новый Структура("Имя, Тип, Обязательное, Вид", "АвторизацияWindows", "Булево", Ложь, "ПолеФлажка"));
	
	ПараметрыОткрытия = Новый Структура("ОписаниеДанных, Заголовок", Данные, "Настройки подключения");
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьПараметрыПодключения", ЭтаФорма);
	ОткрытьФорму("ВнешняяОбработка.CodeConsole83.Форма.ФормаВводаДанных", ПараметрыОткрытия, ВладелецФормы, УникальныйИдентификатор, , , ОписаниеОповещения);
	
КонецФункции

&НаКлиенте
Процедура СохранитьПараметрыПодключения(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыСтрокиПодключения = Новый Структура;
	ПараметрыСтрокиПодключения.Вставить("Провайдер", "Provider");
	ПараметрыСтрокиПодключения.Вставить("Сервер", "Data Source");
	ПараметрыСтрокиПодключения.Вставить("БазаДанных", "Initial Catalog");
	ПараметрыСтрокиПодключения.Вставить("Пользователь", "User ID");
	ПараметрыСтрокиПодключения.Вставить("Пароль", "Pwd");
	ПараметрыСтрокиПодключения.Вставить("АвторизацияWindows", "Trusted_Connection");
	
	ПараметрыПодключения = Новый Соответствие;
	
	Для Каждого Эл ИЗ РезультатЗакрытия Цикл 
		
		Если ЗначениеЗаполнено(Эл.Значение) Тогда 
			ПараметрыПодключения.Вставить(ПараметрыСтрокиПодключения[эл.Ключ], Эл.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыПодключения.Получить("Trusted_Connection") = Истина Тогда 
		ПараметрыПодключения.Вставить("Trusted_Connection", "yes");
	Иначе
		ПараметрыПодключения.Удалить("Trusted_Connection");
	КонецЕсли;
	
	ВладелецФормы.ХранилищеПараметров.Вставить("ПараметрыПодключенияSQL", ПараметрыПодключения);
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьЗапрос(Знач Текст, Знач ПараметрыВыполнения, Знач НастройкиВыполнения, Знач АдресРезультата) Экспорт 
	
	Перем ПараметрыСоединения;
	
	Если НЕ ВладелецФормы.ХранилищеПараметров.Свойство("ПараметрыПодключенияSQL", ПараметрыСоединения) ИЛИ ПараметрыСоединения = Неопределено Тогда 
		Возврат Новый Структура("Выполнено, Описание", Ложь, "Не установлено соединение");
	КонецЕсли;
	
	Результат = ВыполнитьЗапросНаСервере(Текст, ПараметрыВыполнения, ПараметрыСоединения, УникальныйИдентификатор);
	
	Возврат Результат;
	 
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьЗапросНаСервере(Знач ТекстЗапроса, Знач ПарамтерыЗапроса, Знач ПараметрыСоединения, Знач УникальныйИдентификатор)
	
	Результат = ВыполнитьЗапросSQL(ТекстЗапроса, ПарамтерыЗапроса, ПараметрыСоединения);
	
	Если НЕ Результат.Выполнено Тогда 
		Возврат Результат;
	КонецЕсли;
	
	АдресДанных = ПоместитьВоВременноеХранилище(Результат.Данные[0], УникальныйИдентификатор);
	
	Результат.Вставить("Данные", АдресДанных);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСоединение(ПараметрыСоединения)
	
	Если ПараметрыСоединения["Соединение"] <> Неопределено Тогда 
		Возврат ПараметрыСоединения["Соединение"];
	КонецЕсли;
	
	СтрокаСоединения = "";
	
	Для Каждого Параметр Из ПараметрыСоединения Цикл 
		
		СтрокаСоединения = СтрокаСоединения + СтрШаблон("%1=%2; ", Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
		
	Соединение = Новый COMОбъект("ADODB.Connection");
	Соединение.Open(СтрокаСоединения);
	
	ПараметрыСоединения.Вставить("Соединение", Соединение);
	
	Возврат Соединение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьЗапросSQL(ТекстЗапроса, ПарамтерыЗапроса, ПараметрыСоединения)
	
	Соединение = ПолучитьСоединение(ПараметрыСоединения);
		
	РезультатЗапроса = ПолучитьРезультатЗапроса(Соединение, ТекстЗапроса);
	
	Результат = ЗагрузитьРезультатЗапроса(РезультатЗапроса);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьРезультатЗапроса(Соединение, ТекстЗапроса)
	
	Command = Новый COMОбъект("ADODB.Command");
	
	RecordSet=Новый COMОбъект("ADODB.Recordset");
    RecordSet.CursorLocation=3;
    RecordSet.LockType=2;	
	RecordSet.Open(ТекстЗапроса, Соединение);
	
	Если RecordSet.EOF() and RecordSet.BOF() then
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат RecordSet;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗагрузитьРезультатЗапроса(Знач RecordSet)
	
	мРезультаты = Новый Массив;
	
	Пока RecordSet <> Неопределено Цикл 
		
		РезльтатТаблица = ЗагрузитьТаблицу(RecordSet);
		Если РезльтатТаблица.Выполнено Тогда 
			мРезультаты.Добавить(РезльтатТаблица.Данные);
		Иначе
			Возврат РезльтатТаблица;
		КонецЕсли;
		RecordSet = RecordSet.NextRecordset();
		
	КонецЦикла;
	
	Результат = Новый Структура("Выполнено, Описание", Истина);
	Результат.Вставить("Данные", мРезультаты);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗагрузитьТаблицу(RecordSet)
	
	Результат = Новый Структура("Выполнено, Описание", Истина);
	
	#Если Сервер Тогда

	КоличествоКолонок = RecordSet.Fields.Count - 1;	
	РезультатТЗ = new ТаблицаЗначений;
	ДвДанные = 205;
	Для i = 0 По КоличествоКолонок Цикл
		Массив = new Массив;
		Массив.Add(ПолучитьТип(RecordSet.Fields(i).Type));
		name = RecordSet.Fields(i).name;
		Если ПустаяСтрока(name) Тогда 
			name = "col" + i; 
		КонецЕсли;
		Если Массив[0] = Тип("ДвоичныеДанные") Тогда 
			РезультатТЗ.Columns.Add(name);
		Иначе
			РезультатТЗ.Columns.Add(name, new ОписаниеТипов(Массив));
		КонецЕсли;
	КонецЦикла;
	RecordSet.MoveFirst();
	Пока  not (RecordSet.EOF() or RecordSet.BOF()) Цикл
		row = РезультатТЗ.Add();
		Для i = 0 По КоличествоКолонок Цикл 
			value = RecordSet.Fields(i).Value;
			Если value = Null then
				continue;
			ИначеЕсли ТипЗнч(value) = Тип("COMSafeArray") Тогда
				Type = RecordSet.Fields(i).Type;
				Если Type = 205 or Type = 128 then
					value = ПолучитьДвДанные(value);
				Иначе	
					value = value.Выгрузить();
				КонецЕсли;
				
			Иначе
			КонецЕсли;
			row[i] = Value;
		КонецЦикла;
		RecordSet.MoveNext();
	КонецЦикла;
	
	Результат.Вставить("Данные", РезультатТЗ);
	
	#Иначе
		
	#КонецЕсли

	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТип(ТипADO)
	Если 	ТипADO = 20 ИЛИ
			ТипADO = 14 ИЛИ
			ТипADO = 5 ИЛИ
			ТипADO = 3 ИЛИ
			ТипADO = 131 ИЛИ
			ТипADO = 4 ИЛИ
			ТипADO = 2 ИЛИ
			ТипADO = 16 ИЛИ
			ТипADO = 21 ИЛИ
			ТипADO = 19 ИЛИ
			ТипADO = 18 ИЛИ
			ТипADO = 17 ИЛИ
			ТипADO = 139
		Тогда 
		Возврат Тип("Число");
	ИначеЕсли 
			ТипADO = 8 ИЛИ
			ТипADO = 129 ИЛИ
			ТипADO = 203 ИЛИ
			ТипADO = 201 ИЛИ
			ТипADO = 200 ИЛИ
			ТипADO = 202 ИЛИ
			ТипADO = 130 
		Тогда 
		Возврат Тип("Строка");
	ИначеЕсли 
			ТипADO = 11
		Тогда 
		Возврат Тип("Булево");
	ИначеЕсли 
			ТипADO = 133 ИЛИ
			ТипADO = 7 ИЛИ
			ТипADO = 137 ИЛИ
			ТипADO = 34 ИЛИ
			ТипADO = 134 ИЛИ
			ТипADO = 135
		Тогда 
		Возврат Тип("Дата");
	ИначеЕсли 
			ТипADO = 128 ИЛИ
			ТипADO = 204 ИЛИ
			ТипADO = 205
		Тогда 
		Возврат Тип("ДвоичныеДанные");
	ИначеЕсли 
			ТипADO = 0
		Тогда 
		Возврат Тип("Неопределено");
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДвДанные(ЗначениеADO)
	Stream=Новый COMОбъект("ADODB.Stream");
    Stream.Type=1;
    Stream.Open();	
	Stream.Write(ЗначениеADO);
	Каталог = КаталогВременныхФайлов() + "export\";
	СоздатьКаталог(Каталог);
	ИмяФайла = Каталог + "tmp.tmp";
	УдалитьФайлы(ИмяФайла);
    Stream.SaveToFile(ИмяФайла);
	двДанные = новый ДвоичныеДанные(ИмяФайла);
	
	Возврат двДанные;
КонецФункции

